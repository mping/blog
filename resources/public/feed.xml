<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='https://mcorbin.fr' rel='self' type='application/rss+xml'/>
<title>
(mcorbin.fr)
</title>
<link>
https://mcorbin.fr
</link>
<description>
Blog de mcorbin
</description>
<lastBuildDate>
Sat, 22 Feb 2020 20:04:37 +0100
</lastBuildDate>
<generator>
clj-rss
</generator>
<item>
<guid>
https://mcorbin.fr/posts/2020-02-22-jvm-ecosysteme/
</guid>
<link>
https://mcorbin.fr/posts/2020-02-22-jvm-ecosysteme/
</link>
<title>
La JVM, Java, ses haters, son écosystème
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme beaucoup de monde, j&amp;#8217;ai eu l&amp;#8217;occasion de travailler professionnellement avec Java (et je continue de le faire ponctuellement aujourd&amp;#8217;hui). Dans cet article, je parlerais de la JVM, de Java, et de la (mauvaise) réputation que ce langage se traîne. Mais cette dernière est-elle vraiment justifiée ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_jvm&quot;&gt;La JVM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense que la JVM est probablement la plateforme la plus mature pour développer des applications aujourd&amp;#8217;hui. Elle a en effet plusieurs avantages :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De très très bonnes performances.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un écosystème énorme. Il existe des clients écrits en Java pour à peu près toutes les bases de données, broker de messages etc&amp;#8230;&amp;#8203; disponibles sur le marché. Ces clients sont de plus généralement des clients officiels maintenus par les développeurs du produit. La librairie standard est également très riche.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De nombreux langages disponibles (Java, Clojure, Scala, Kotlin, Groovy&amp;#8230;&amp;#8203;), tous bénéficiant de l&amp;#8217;écosystème et des performances de la JVM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est très facile aujourd&amp;#8217;hui de déployer des applications sur la JVM. Généralement installer la JVM puis lancer un &lt;code&gt;java -jar app.jar&lt;/code&gt; suffit, des outils comme &lt;code&gt;jlink&lt;/code&gt; permettent même d&amp;#8217;optimiser cela.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De nombreuses innovations apparaissent sur la JVM ou dans son écosystème, comme par exemple &lt;em&gt;GraalVM&lt;/em&gt;, les différents types de garbage collector etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je développe depuis plusieurs années sur la JVM (en Clojure majoritairement aujourd&amp;#8217;hui), et j&amp;#8217;en ai toujours été très content.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et pourtant&amp;#8230;&amp;#8203; quand je présente un de mes projets open source écrit en Clojure, j&amp;#8217;ai régulièrement droit à des :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pourquoi ça tourne sur la JVM ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Jamais je ne déployerais des application sur la JVM de nouveau, c&amp;#8217;est l&amp;#8217;enfer à gérer !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mon expérience de la JVM a toujours été désastreuse !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tourner sur la JVM n&amp;#8217;est pas un avantage.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est aussi quelque chose qu&amp;#8217;on voit souvent sur les réseaux sociaux. La JVM serait lente, consommerait beaucoup de RAM, les applications seraient difficiles à maintenir&amp;#8230;&amp;#8203;&lt;br&gt;
Pourtant, comme dit précédemment, il est facile de faire des applications très performantes consommant quelques centaines de Mo de RAM. On voit d&amp;#8217;ailleurs bien que la JVM est performante vu la quantité d&amp;#8217;outils &quot;Big Data&quot; tournant dessus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais alors, comment en est-on arrivé là ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_langage_java&quot;&gt;Le langage Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Certains diront que la faute revient à Java. Ce langage serait lourd, verbeux, et ce serait un calvaire de développer des applications en Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est vrai, Java a des inconvénients mais ce n&amp;#8217;est pas le pire langage du monde. De plus, le langage s&amp;#8217;améliore, certes lentement mais ça va dans le bon sens.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le langage n&amp;#8217;a pas un système de type digne des langages fortements typés comme OCaml ou Rust, le &quot;tout objet&quot; du langage est parfois lourd, l&amp;#8217;immuabilité n&amp;#8217;est pas vraiment encouragé, la programmation fonctionnelle est limitée&amp;#8230;&amp;#8203; Mais on peut largement travailler avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, la critique de Java est encore plus savoureuse quand elle vient de développeurs Golang (je développe aussi en Golang, vous pouvez retrouver mon avis sur le langage &lt;a href=&quot;https://mcorbin.fr/posts/2019-06-13-one-year-of-go/&quot;&gt;ici&lt;/a&gt;). Java n&amp;#8217;a rien à envier à Golang en terme de fonctionnalité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais alors, quel est le problème ?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_serveurs_d_applications&quot;&gt;Les serveurs d&amp;#8217;applications&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une génération complète de développeurs et de sysadmin ont été traumatisé par les Glassfish, JBoss et autres WebSphere.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai eu la chance de commencer ma carrière vers la fin de leurs utilisations (bon il y en a toujours qui tournent en prod aujourd&amp;#8217;hui mais ça se voit moins on va dire), et en effet j&amp;#8217;ai quelques souvenirs de fichiers &lt;code&gt;domain.xml&lt;/code&gt; bien violents (le tout branché sur de l&amp;#8217;Oracle sur AIX histoire de bien faire les choses).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comme dit précédemment, aujourd&amp;#8217;hui un &lt;code&gt;java -jar&lt;/code&gt; suffit généralement pour lancer une application. Mais cette époque a fait du dégât, généralement les remarques du type &quot;OMG Java en prod plus jamais!&quot; viennent de gens ayant connu cette époque.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_frameworks_java&quot;&gt;Les frameworks Java&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour moi, la mauvaise réputation de Java aujourd&amp;#8217;hui vient principalement de ses frameworks &lt;em&gt;et non du langage&lt;/em&gt;, j&amp;#8217;insiste sur ce point.&lt;br&gt;
Il y a une culture de l&amp;#8217;usine à gaz difficile à comprendre dans la communauté Java, et c&amp;#8217;est quelque chose que je n&amp;#8217;ai jamais vu dans d&amp;#8217;autres langages ou communautés.
L&amp;#8217;expression &quot;pourquoi faire simple quand on peut faire compliqué&quot; prend ici tout son sens. L&amp;#8217;exemple type de cette culture étant Spring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_c_est_quoi_le_problème_avec_spring&quot;&gt;C&amp;#8217;est quoi le problème avec Spring ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai eu l&amp;#8217;occasion de travailler professionnellement sur des projets Spring dans plusieurs contextes.
Je parle ici de projets avec du Spring &quot;modernes&quot;: Spring Boot, Spring Cloud, &quot;microservices&quot;&amp;#8230;&amp;#8203; Et c&amp;#8217;était à peu près ma réaction quand j&amp;#8217;arrivais sur les projets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/jvm-ecosysteme/wtf.gif&quot; alt=&quot;what the fuck&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On me disait : &quot;tu verras, c&amp;#8217;est des stacks modernes&quot;.&lt;br&gt;
Quel naïf j&amp;#8217;étais ! Essayons de résumer un projet Java/Spring comme ils sont faits aujourd&amp;#8217;hui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_génération_du_projet&quot;&gt;Génération du projet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les développeurs adorent générer les projets via des archetypes Maven, ou si vous n&amp;#8217;avez pas de chance avec &lt;a href=&quot;https://mcorbin.fr/posts/2018-02-08-spring-generateur/&quot;&gt;JHipster&lt;/a&gt;.&lt;br&gt;
Vous n&amp;#8217;avez pas commencé à coder, mais vous avez déjà 25 classes et un &lt;code&gt;pom.xml&lt;/code&gt; de 2000 lignes.
Soyons franc, la seule chose à faire après ça devrait être &lt;code&gt;rm -rf *&lt;/code&gt; et repartir sur des bases saines, mais bon, c&amp;#8217;est comme ça qu&amp;#8217;il faut faire il paraît.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_annotation&quot;&gt;Annotation&lt;/h3&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/jvm-ecosysteme/annotation.jpg&quot; alt=&quot;tout doit être annoté&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet devient un jeu où le but est simple, le mot-clé &lt;code&gt;new&lt;/code&gt; est interdit.
Plus il y a de magie, plus il y a d&amp;#8217;annotations, mieux c&amp;#8217;est.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Métriques ? Annotations.&lt;br&gt;
Mocks ? Annotations.&lt;br&gt;
Dépendances ? Annotations.&lt;br&gt;
Getters ? Annotation (coucou lombok).&lt;br&gt;
Routes HTTP ? Annotations.&lt;br&gt;
Cache de la DB ? Annotation.&lt;br&gt;
Mapping entre objets ? Annotations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pourrais continuer comme ça longtemps&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La plupart des projets pourraient avoir une class &lt;code&gt;Main&lt;/code&gt; qui serait plus ou moins :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;Cache cache = new cache(cacheConfig);
Database database = new Database(databaseConfig);
HTTPServer server = new HTTPServer(cache, database);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Où &lt;code&gt;database&lt;/code&gt; et &lt;code&gt;cache&lt;/code&gt; implémentent une interface (pour écrire facilement un mock).&lt;br&gt;
Bien sûr, comme dit précédemment utiliser &lt;code&gt;new&lt;/code&gt; est interdit, donc vous ne verrez jamais ça.
J&amp;#8217;ai eu des discussions hallucinantes où les devs ne pouvaient même pas envisager ne pas utiliser &lt;code&gt;@Inject&lt;/code&gt;, comme si on leur demandait de coder avec &lt;code&gt;ed&lt;/code&gt; à la place de leur IDE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On préfère avoir une mega usine à gaz qui explose au runtime. Bah oui, c&amp;#8217;est super utile d&amp;#8217;avoir du typage statique quand derrière on a du &lt;code&gt;bean not found&lt;/code&gt; au démarrage du projet (démarrage qui met 2 plombes au passage généralement).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_utilisez_les_libs_les_plus_bloated_de_l_écosystème&quot;&gt;Utilisez les libs les plus bloated de l&amp;#8217;écosystème&lt;/h3&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rule 34: IF IT EXISTS, THERE IS A SPRING STARTER FOR IT.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous ne pensiez quand même pas pouvoir utiliser les clients officiels Kafka, Elasticsearch etc&amp;#8230;&amp;#8203; quand même ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Non, il faut utiliser Spring Kafka, Spring Elasticsearch, Spring Redis&amp;#8230;&amp;#8203; ces libs cachent les implémentations officiels, sont très peu flexibles, et sont surtout totalement inutiles.
Bah oui, faire &lt;code&gt;KafkaConsumer consumer = new KafkaConsumer(config)&lt;/code&gt; c&amp;#8217;est trop compliqué.
Mais bon, le but de ces frameworks est de cocher des cases, pour pouvoir dire &quot;Oui c&amp;#8217;est supporté !!&quot; dès qu&amp;#8217;une techno est mentionnée en réunion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;JPA, AspectJ, Hibernate&amp;#8230;&amp;#8203; Il y aurait tellement de choses à dire sur ces technos sorties de l&amp;#8217;enfer.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring Data ? True story, j&amp;#8217;arrive sur un projet : &quot;gnagna microservices, gnagna stack moderne, gnagna on est le meilleur projet de la ville&amp;#8230;&amp;#8203;&quot; j&amp;#8217;ouvre un fichier et je tombe sur une tonne de fonctions ressemblant à :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;findByLibelleIgnoreCaseContainingOrOuvrageIgnoreCaseContainingOrCreatedByIgnoreCaseContaining&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;WTF ?&lt;/strong&gt; C&amp;#8217;est un &lt;em&gt;vrai nom&lt;/em&gt; de fonction qui était dans le projet, hein, et que j&amp;#8217;ai conservé précieusement pour la ressortir. C&amp;#8217;est un peu à ce moment où je me suis dis que je devais soit repasser sysadmin, soit trouver une boîte qui ne fait pas du Java (j&amp;#8217;ai fait l&amp;#8217;un puis l&amp;#8217;autre d&amp;#8217;ailleurs). Et ces fonctions ne choquaient &lt;strong&gt;PERSONNE&lt;/strong&gt; sur le projet, c&amp;#8217;était &quot;business as usual&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_design_pattern&quot;&gt;Design pattern&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une classe &lt;strong&gt;==&lt;/strong&gt; une interface, c&amp;#8217;est la règle ! Chaque requête HTTP faisant un accès à une base de données devra aussi au moins créer :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;un DAO,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;un DTO,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;un VO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourquoi ? Car ça fait 20 ans qu&amp;#8217;on cargo cult le Gang of Four.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_hiérarchie_de_pom_complexe&quot;&gt;Hiérarchie de pom complexe&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avec les starters Spring et compagnie, votre &lt;code&gt;pom.xml&lt;/code&gt; fait maintenant 3500 lignes.
Sauf qu&amp;#8217;en fait le pom a aussi un pom &quot;parent&quot;, un &quot;BOM&quot;&amp;#8230;&amp;#8203; chaque montée de version d&amp;#8217;un de ces trucs vous coûtera des jours de travail.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_montées_de_versions&quot;&gt;Montées de versions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons en des montées de versions.
Chaque montée de version de Spring et de ses starters amènera son lot de bugs bien louches, et beaucoup de projets/libs n&amp;#8217;ont même pas de changelog donc amusez-vous bien lors du débugging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_faites_ch_er_les_ops_au_maximum&quot;&gt;Faites ch*er les ops au maximum&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La stack Spring Cloud Netflix (Ribbon &amp;amp; co) est un enfer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Votre projet est maintenant un load balancer bugué, pas flexible, exposant très difficilement ses métriques.
C&amp;#8217;est toujours cool quand on on se rend compte que N % des requêtes partent dans les limbes sans avoir aucune métrique et aucun moyen de débuguer le truc.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_de_toute_façon_personne_ne_comprend_comment_ça_marche&quot;&gt;De toute façon, personne ne comprend comment ça marche&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai travaillé avec de très bons développeurs Java, certains &quot;connus&quot;.
Des devs qui en font &quot;depuis 199X&quot;.
Des gens qui font du Spring depuis le tout début.
Même eux ne pourront pas vous aider, le framework est juste trop complexe.
Et quand ton annotation marche pas car un truc rentre en conflit avec un autre, va trouver la source du problème&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je me rappelle d&amp;#8217;une montée de version de Spring où mon CTO de l&amp;#8217;époque avait tweeté : &quot;Quelle douleur les montées de version Spring et ces dépendances. A la limite de l&amp;#8217;abandon mais toujours en cours&quot;.
Oui, les montées de versions étaient &lt;strong&gt;dingues&lt;/strong&gt;, de mémoire celle là commençait à se compter en mois.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mais_pourtant&quot;&gt;Mais pourtant&amp;#8230;&amp;#8203;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Malgré cette complexité &lt;strong&gt;ENORME&lt;/strong&gt;, il ne faut surtout pas changer ! Incompréhensible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tu passes 2 semaines sur un bug Ribbon, tu mets 1 mois à monter de version Spring, tu mets 3 jours à monter de version ton pom parent, ton &quot;microservice&quot; avec 10 endpoints REST a 60 classes, 10 000 lignes de code et a un pom de 3000 lignes&amp;#8230;&amp;#8203; Mais tout le monde est content et continue dans sa lancée !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur un des projets où je suis intervenu, quelques développeurs (généralement ceux qui avaient codés avec autre chose que Java dans leurs carrières) voulaient lancer un microservice avec &lt;em&gt;Vert.x&lt;/em&gt; pour tester (certains l&amp;#8217;avaient déjà utilisés en prod, d&amp;#8217;ailleurs j&amp;#8217;en ai également entendu de bons retours).&lt;br&gt;
Bien sûr les autres développeurs étaient contre (fallait faire du microservice mais &lt;em&gt;avec Spring&lt;/em&gt;), et d&amp;#8217;ailleurs les décideurs étaient aussi contre car : &quot;Quand je demande à la SSII du coin des développeurs Spring ils en ont en stock&quot;. OK.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_nouvel_espoir&quot;&gt;Un nouvel espoir ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais de nouveaux frameworks Java apparaissent, amenant simplicité avec eux&amp;#8230;&amp;#8203; Ah non, on me souffle dans l&amp;#8217;oreillette que les Quarkus, Micronaut &amp;amp; co vous feront aussi faire de l&amp;#8217;annotation driven development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c&amp;#8217;est pourquoi j&amp;#8217;ai arrêté de coder en Java.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 22 Feb 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-02-13-informatique-coeur-metier/
</guid>
<link>
https://mcorbin.fr/posts/2020-02-13-informatique-coeur-metier/
</link>
<title>
L'informatique, c'est pas notre coeur de métier !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;informatique, c&amp;#8217;est pas notre coeur de métier ! On a tous déjà entendu cette phrase, et je ne sais pas vous, mais cette phrase m&amp;#8217;a toujours donné des sueurs froides.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aux premiers abords, la phrase peut sembler valide.
En effet, une entreprise dont le métier est par exemple de distribuer de l&amp;#8217;énergie, ou de transporter des personnes d&amp;#8217;un point A à un point B&amp;#8230;&amp;#8203; Son coeur de métier, ce n&amp;#8217;est pas l&amp;#8217;informatique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le gros problème avec cette phrase est qu&amp;#8217;elle est généralement utilisée pour justifier des mauvaises pratiques, un manque de moyen, un système d&amp;#8217;information dans un état déplorable&amp;#8230;&amp;#8203; Bref, &quot;l&amp;#8217;informatique, c&amp;#8217;est pas notre coeur de métier&quot;, c&amp;#8217;est la phrase que vous entendez généralement quand vous pointez un problème et que personne ne veut faire l&amp;#8217;effort de réfléchir à une solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_informatique_en_partie_votre_coeur_de_métier&quot;&gt;L&amp;#8217;informatique, (en partie) votre coeur de métier ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons l&amp;#8217;exemple du leader de la distribution d&amp;#8217;électricité en France.
Son coeur de métier, c&amp;#8217;est tout simplement de distribuer de l&amp;#8217;électricité.
Mais on parle quand même d&amp;#8217;une entreprise qui :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pose 35 millions de compteurs &quot;connectés&quot; sur le territoire Français.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Où les clients font de plus en plus de choses via Internet (ouverture et fermeture de lignes, gestion des factures&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Où un tas de logiciels internes servent à faire tourner la boîte.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Est-ce que l&amp;#8217;informatique n&amp;#8217;est pas devenu de facto un domaine essentiel de l&amp;#8217;entreprise, sans lequel elle ne pourrait pas fonctionner ? Cela pourrait rapidement se tester: coupez les serveurs pendant une heure et on verra ce qu&amp;#8217;il se passera ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, la tendance en France depuis de nombreuses années est d&amp;#8217;externaliser complètement tout ce qui touche à l&amp;#8217;informatique, par exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Plus aucun de recrutement &quot;technique&quot;, on recrute éventuellement des profils &quot;chef de projets&quot;, &quot;fonctionnels&quot; (choisissez le nom que vous voulez) mais surtout pas un tech.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Les équipes projets sont composées à 100 % de prestataires, souvent avec un turn-over important.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_impact_de_l_externalisation&quot;&gt;L&amp;#8217;impact de l&amp;#8217;externalisation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;externalisation de la technique a selon moi plusieurs effets. Le premier est bien sûr la perte de compétences en interne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La dépendance aux sociétés de services devient donc totale. Sauf qu&amp;#8217;il y a un problème: les entreprises veulent un système d&amp;#8217;information et des applications répondant à leurs besoins, alors que les sociétés de services veulent faire de l&amp;#8217;argent.
Il est donc dans l&amp;#8217;intêret des sociétés de services que les projets durent et demandent une main d&amp;#8217;oeuvre importante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est là que ça devient intéressant : les entreprises clientes ne sont même plus capables de juger ce que les sociétés de services vendent, et deviennent des vaches à lait qui signeront n&amp;#8217;importe quoi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlez-en à votre entourage hors tech, je suis sûr que vous avez des amis, ou de la famille dans différents domaines qui auront des discours de type : &quot;Ah oui nos logiciels, ils sont faits par &amp;lt;grosse SSII&amp;gt;, ils nous coûtent 2 millions par an, ça fonctionne pas, à chaque fois qu&amp;#8217;on demande une modification ça coûte 50 000 € et ça met un an à apparaître&amp;#8230;&amp;#8203; d&amp;#8217;ailleurs, on va lancer bientôt un nouveau appel d&amp;#8217;offre pour tout réécrire&quot;.&lt;br&gt;
Ce genre d&amp;#8217;arnaques (oui, le terme est bien choisi) est très courant, et certaines sociétés se gavent en profitant que l&amp;#8217;informatique et ses métiers soient encore mal compris dans beaucoup d&amp;#8217;endroits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le même genre, on a sûrement tous vu des projets simples type CRUD mais où des archis (avec des gros TJM tant qu&amp;#8217;à faire) débarquent en mode &quot;Si si je vous promets vous avez absolument besoin de microservices pour votre projet, ça tombe bien je suis un expert sur le sujet&quot;.&lt;br&gt;
Le décideur de l&amp;#8217;entreprise a en effet vaguement entendu parler de microservices, il parait qu&amp;#8217;il faut absolument faire ça maintenant.&lt;br&gt;
Et sans trop comprendre comment l&amp;#8217;application se transforme en un système distribué à 5000 jours hommes, 40 développeurs, 15 ops et 10 agilistes. Jackpot pour les SSII ! Et de toute façon, vu le turn-over dans 6 mois l&amp;#8217;équipe actuelle ne sera plus là, autant se faire plaisir sur les technos en attendant non ? En plus, le manager est content, son équipe est maintenant la plus grosse du bâtiment, elle doit sûrement faire des choses très importantes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_et_le_management_dans_tout_ça&quot;&gt;Et le management dans tout ça ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le problème apparait aussi dans la hiérarchie.
Plus personne ne comprenant la technique, il n&amp;#8217;y a &lt;em&gt;aucune&lt;/em&gt; vision sur la stratégie long terme de la boite. la &quot;DSI&quot; n&amp;#8217;en porte que le nom.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous entendrez des phrases du type : &quot;Nous allons digitaliser l&amp;#8217;entreprise grâce à l&amp;#8217;intelligence artificielle et la blockchain&quot;, mais ça n&amp;#8217;ira pas plus loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ou pire, quelqu&amp;#8217;un signera pendant un bon repas d&amp;#8217;affaire un deal avec IBM ou autre et il faudra tout migrer sur des outils moisis.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_équilibre_à_trouver&quot;&gt;Un équilibre à trouver&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Faire appel à des prestataires externes peut avoir son intérêt.
Je comprends tout à fait qu&amp;#8217;il soit difficile de se passer totalement de prestataires quand on a plusieurs projets qui se lancent et se terminent en parallèle.&lt;br&gt;
Mais dans beaucoup de boites, il y a bien assez de travail pour avoir au moins une partie des effectifs en interne. On ne me fera pas croire que des boîtes qui ont des sites avec 500 prestas dans le bâtiment depuis toujours ne trouveraient pas de quoi occuper des gens en interne.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis persuadé que le recours massif à la prestation en France est en partie responsable du retard que nous avons par rapport à certains de nos voisins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela cause des soucis aux entreprises (perte de compétences, gouffre financier, dépendance totale aux prestataires pour des projets pourtant stratégiques&amp;#8230;&amp;#8203;), mais aussi aux prestataires eux même (turn over, manque de reconnaissance, de moyens, remarques non écoutées, impression que le seul but de votre hiérarchie dans la vie est de vous empêcher de travailler correctement&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère que dans le futur, on remettra en valeur les profils techniques (ce n&amp;#8217;est pas le sujet de cet article, mais la dévalorisation des profils techniques et le &quot;plafond de verre&quot; qu&amp;#8217;ils atteignent en France est également un problème. La technique c&amp;#8217;est sale, donc on délègue et on écoute surtout pas les remarques des équipes tech), que de vrais CTO et de vrais DSI pilotent la vision technique des entreprises, et que l&amp;#8217;excellence technique revienne au coeur des préoccupations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 13 Feb 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-01-06-plateforme-execution/
</guid>
<link>
https://mcorbin.fr/posts/2020-01-06-plateforme-execution/
</link>
<title>
Développement d'applications, conteneurs et plateforme d'exécution
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus en plus d&amp;#8217;applications tournent dans des conteneurs, et de plus en plus de conteneurs tournent sur des plateformes types Kubernetes. Devons nous changer nos habitudes lorsque nous développons des applications conteneurisées ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_plateforme_d_exécution_n_est_pas_importante&quot;&gt;La plateforme d&amp;#8217;exécution n&amp;#8217;est pas importante&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je pense qu&amp;#8217;il faut dissocier l&amp;#8217;application en elle même (et donc son développement) de la plateforme d&amp;#8217;exécution (où l&amp;#8217;application tournera). En effet, une application aura toujours besoin:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;D&amp;#8217;exposer un endpoint de &lt;code&gt;health&lt;/code&gt; indiquant si l&amp;#8217;application fonctionne correctement et est prête à fonctionner (et donc prête à recevoir du trafic pour une application web par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;D&amp;#8217;exposer des métriques (au format Prometheus par exemple), ou alors de les générer dans votre format préféré (Graphite, InfluxDB&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De générer des logs corrects, avec une manière de contrôler la verbosité des logs etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela n&amp;#8217;a &lt;strong&gt;aucun&lt;/strong&gt; rapport avec la plateforme d&amp;#8217;exécution de l&amp;#8217;application. Par exemple, mon endpoint de &lt;code&gt;health&lt;/code&gt; peut aussi bien être utilisé par un load balancer comme HAProxy, par un agent comme Consul, ou bien par Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une application devrait pouvoir passer très facilement d&amp;#8217;une plateforme d&amp;#8217;exécution à une autre, comme par exemple d&amp;#8217;un déploiement sur machines virtuelles classiques, sans conteneurs, à un déploiement dans Kubernetes. Si cela n&amp;#8217;est pas possible, cela veut dire qu&amp;#8217;on a lié l&amp;#8217;application à sa plateforme, et ce couplage fort rend la possibilité de changement beaucoup plus difficile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, on parle beaucoup aujourd&amp;#8217;hui de Kubernetes, mais comme je le dis toujours, ce n&amp;#8217;est pas la plateforme miracle. Même si vous déployez vos applications sur Kubernetes aujourd&amp;#8217;hui, rien ne dit que vous ne voudrez pas les &quot;sortir&quot; de Kubernetes l&amp;#8217;année prochaine pour une raison ou une autre.&lt;br&gt;
De la même façon, il devrait être facile de passer d&amp;#8217;une application hébergée sur une machine virtuelle à une application tournant sur Kubernetes. L&amp;#8217;outillage autour de l&amp;#8217;application va changer, mais pas l&amp;#8217;application en elle même.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_impact_des_conteneurs_lors_du_dev&quot;&gt;L&amp;#8217;impact des conteneurs lors du dev&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A part &lt;code&gt;docker-compose&lt;/code&gt; qui est je trouve intéressant pour démarrer facilement des dépendances comme des bases de données, je ne vois pas pourquoi on devrait parler de conteneurs lors de la phase de développement. Comme dit dans le paragraphe précédemment, c&amp;#8217;est beaucoup trop tôt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le développeur doit pouvoir développer sans se soucier de la plateforme d&amp;#8217;exécution. Ce sera dans la plateforme d&amp;#8217;intégration continue que la plateforme d&amp;#8217;exécution aura un impact (pour construire un conteneur, un package&amp;#8230;&amp;#8203; à partir du projet).&lt;br&gt;
Bien sûr, il y aura toujours dans le dépôt Git du projet quelques fichiers en lien avec cela (Dockerfile par exemple), mais cela n&amp;#8217;a aucun impact sur le développement de l&amp;#8217;application elle même.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et surtout, quand je développe, je ne veux surtout pas à avoir à construire des conteneurs, installer un minikube ou avoir à déployer sur des clusters Kubernetes depuis mon poste de dev.&lt;br&gt;
Pour moi, cela doit être le job de la plateforme d&amp;#8217;intégration continue. Je pousse mon travail, et je peux d&amp;#8217;une façon ou une autre déployer mon application sur ma plateforme. Cela permet également une certaine tracabilité.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En local, je veux travailler en isolation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense sincèrement qu&amp;#8217;il faut pouvoir s&amp;#8217;abstraire de la plateforme d&amp;#8217;exécution lors du développement.&lt;br&gt;
Les développeurs perdront un temps fou à configurer leurs postes, seront frustrés, à chaque montée de version plus rien ne fonctionnera etc&amp;#8230;&amp;#8203; si développer demande trop de dépendances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion: Evitez de faire fuiter votre infrastructure sur vos postes de développement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 06 Jan 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2020-01-01-exemple-infra-terraform/
</guid>
<link>
https://mcorbin.fr/posts/2020-01-01-exemple-infra-terraform/
</link>
<title>
Un exemple d'infrastructure: création avec Terraform
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la &lt;a href=&quot;https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/&quot;&gt;partie précédente&lt;/a&gt;, nous avons vu comment créer des images de machines virtuelles. Dans cet article, nous allons déployer notre infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_infrastructure_à_déployer&quot;&gt;L&amp;#8217;infrastructure à déployer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici l&amp;#8217;infrastructure que nous allons déployer aujourd&amp;#8217;hui:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/exemple-infra/terraform/infra-example-terraform.png&quot; alt=&quot;Infrastructure à déployer avec Terraform&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette infrastucture, qui est assez simple, est susceptible d&amp;#8217;évoluer dans les articles suivants, notamment sur un article dédié au load balancing. Comme vous pouvez le voir, elle est actuellement composée de plusieurs éléments:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Les machines&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Deux machines &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/frontend.tf&quot;&gt;frontend&lt;/a&gt; qui seront les points d&amp;#8217;entrées sur notre infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trois machines &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/master.tf&quot;&gt;consul_master&lt;/a&gt; sur lesquelles nous déploierons, comme leurs noms l&amp;#8217;indique, Consul dans un prochain article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/worker.tf&quot;&gt;Instance Pool&lt;/a&gt; qui se chargera de gérer nos workers et sur lesquels nous déploierons nos applications. Comme indiqué dans &lt;a href=&quot;https://community.exoscale.com/documentation/compute/instance-pools/&quot;&gt;la documentation&lt;/a&gt; d&amp;#8217;Exoscale, un Instance Pool est un groupe de machines identiques dont la taille peut être variable (pour s&amp;#8217;adapter aux besoins).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une machine &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/database.tf&quot;&gt;database&lt;/a&gt; sur laquelle nous déploierons une petite application qui simulera une base de données.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Réseau&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/network.tf&quot;&gt;réseau privé&lt;/a&gt; dans lequel sera placé toutes les machines. Un serveur DHCP (géré automatiquement par Exoscale) fournira aux interfaces privées une IP comprise dans la plage d&amp;#8217;adresse &lt;code&gt;10.240.0.1&lt;/code&gt;-&lt;code&gt;10.240.0.220&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/firewall.tf&quot;&gt;security group&lt;/a&gt; (notre firewall) qui nous permet d&amp;#8217;accéder par SSH aux machines, et qui ouvrent les ports 80 et 443 en sortie des machines.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/keypair.tf&quot;&gt;clé SSH publique&lt;/a&gt; sera créée et déployée sur les machines, et un &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/terraform/data.tf&quot;&gt;fichier de configuration&lt;/a&gt; Cloud Init nous permettra entre autre de configurer l&amp;#8217;interface &lt;code&gt;eth1&lt;/code&gt; de nos machines.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_terraform&quot;&gt;Terraform&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est un outil développé par Hashicorp qui simplifie la gestion d&amp;#8217;infrastructures. Vous définissez vos ressources (réseaux, machines virtuelles, clés ssh&amp;#8230;&amp;#8203;) dans des fichiers d&amp;#8217;une manière déclarative, et Terraform se chargera de les créer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme toujours, avoir sa configuration dans des fichiers texte permet de la pousser sur Git et de traiter l&amp;#8217;infrastructure comme du code (reviews de pull requests etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform gère l&amp;#8217;infrastructure comme un graphe où chaque ressource peut avoir des dépendances sur d&amp;#8217;autres. Par exemple, une machine peut avoir besoin d&amp;#8217;une clé SSH. Cette machine peut être elle même dans un réseau privé. Terraform se chargera de créer (et détruire) les ressources dans le bon ordre.&lt;br&gt;
Terraform possède même une commande (&lt;code&gt;terraform graph&lt;/code&gt;) permerttant de générer le graphe de vos ressources au format.dot. Voici le nôtre (cliquez pour agrandir):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;a class=&quot;image&quot; href=&quot;/img/exemple-infra/terraform/graph.png&quot;&gt;&lt;img src=&quot;/img/exemple-infra/terraform/graph.png&quot; alt=&quot;graphe de notre infrastructure&quot;&gt;&lt;/a&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme tous les outils Hashicorp, Terraform est un outil très bien pensé, supporté par la plupart des Cloud du marché, et qui est devenu de facto un outil de plus en plus utilisé lorsqu&amp;#8217;il faut gérer de l&amp;#8217;infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_fichier_state&quot;&gt;Le fichier state&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform maintient son état dans un fichier &lt;code&gt;state&lt;/code&gt;. Ce fichier contient l&amp;#8217;état de votre infrastructure vu par Terraform. Il ne faut jamais modifier ce fichier manuellement, Terraform s&amp;#8217;en chargera lorsqu&amp;#8217;il exécutera des actions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_remote_backend&quot;&gt;Remote backend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce fichier peut être stocké sur votre système de fichier (par défaut), ou bien sur un &lt;code&gt;remote backend&lt;/code&gt;. Cela est notamment utile pour plusieurs raisons:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Cela permet de conserver le fichier state si vous perdez votre ordinateur par exemple.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est plus simple de travailler en équipe et de partager son fichier state entre plusieurs personnes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Certains backends supportent le chiffrement du fichier state. En effet, ce fichier peut contenir des informations sensibles à propos de votre infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enfin, certains backends permettent de poser un lock sur le fichier state. Cela permet d&amp;#8217;éviter les opérations concurrentes sur l&amp;#8217;infrastructure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez retrouver dans la &lt;a href=&quot;https://www.terraform.io/docs/backends/types/index.html&quot;&gt;documentation&lt;/a&gt; les backends existants. Par exemple, le backend S3 est très intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_backend_s3&quot;&gt;Backend S3&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce backend permet de stocker le fichier sur un stockage compatible S3. Il fonctionne par exemple sur l&amp;#8217;&lt;a href=&quot;https://www.exoscale.com/object-storage/&quot;&gt;Object Storage&lt;/a&gt; d&amp;#8217;Exoscale qui est compatible S3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce backend supporte aussi d&amp;#8217;autres fonctionnalités seulement disponible sur Amazon, comme la gestion du chiffrement ou l&amp;#8217;ajout du lock sur le fichier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour le configurer (et aussi configurer le provider Exoscale présenté plus loin), vous devez définir quelques variables d&amp;#8217;environnements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export TF_VAR_exoscale_api_key=&amp;lt;exoscale key&amp;gt;
export TF_VAR_exoscale_secret_key=&amp;lt;exoscale secret&amp;gt;
export AWS_ACCESS_KEY_ID=${TF_VAR_exoscale_api_key}
export AWS_SECRET_ACCESS_KEY=${TF_VAR_exoscale_secret_key}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_description_de_la_configuration&quot;&gt;Description de la configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez regarder les différents fichiers dont j&amp;#8217;ai mis les liens précédemment pour voir à quoi ressemble la configuration de Terraform, mais voici quelques explications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_variables&quot;&gt;Variables&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de vérifier des variables dans la configuration. Par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;variable &quot;ssh_public_key_path&quot; {
  description = &quot;Path to the ssh public key&quot;
  default     = &quot;/home/mathieu/.ssh/example-infra/id_rsa.pub&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je déclare une variable nommée &lt;code&gt;ssh_public_key_path&lt;/code&gt;. Cette variable a une description et une valeur par défaut.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est ensuite possible de surcharger cette variable lors de l&amp;#8217;exécution de Terraform de plusieurs manières:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Passage d&amp;#8217;une variable d&amp;#8217;environnement nommée TF_VAR_&amp;lt;nom de la variable&amp;gt;, comme par exemple &lt;code&gt;TF_VAR_ssh_public_key_path&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Passage lors de l&amp;#8217;appel de Terraform en passant une option &lt;code&gt;-var=&quot;ssh_public_key_path=value&quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ajout des valeurs des variables dans un fichier et passage de ce fichier lors de l&amp;#8217;appel de Terraform de cette façon: &lt;code&gt;-var-file=&quot;file.vars&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon exemple de configuration, j&amp;#8217;ai besoin par exemple de passer des variables pour configurer mon provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configuration_du_provider&quot;&gt;Configuration du provider&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe un grand nombre de provider Terraform. Les providers sont utilisés pour créer des ressources sur différents systèmes (Exoscale, Openstack, Cloudflare&amp;#8230;&amp;#8203;). Voici par exemple comment configurer le provider Exoscale:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provider &quot;exoscale&quot; {
  version = &quot;~&amp;gt; 0.15&quot;
  key = var.exoscale_api_key
  secret = var.exoscale_secret_key
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit qu&amp;#8217;il est possible de configurer la version du provider utilisée par Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_configuration_du_backend_s3&quot;&gt;Configuration du backend S3&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple où je configure le backend S3 pour le faire fonctionner sur Exoscale:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;terraform {
  backend &quot;s3&quot; {
    bucket   = &quot;mcorbin-example-infra-tf&quot;
    key    = &quot;mcorbin-example-infra.tfstate&quot;
    region = &quot;ch-gva-2&quot;

    endpoint = &quot;https://sos-ch-gva-2.exo.io&quot;

    # Deactivate the AWS specific behaviours
    #
    # https://www.terraform.io/docs/backends/types/s3.html#skip_credentials_validation
    skip_credentials_validation = true
    skip_get_ec2_platforms      = true
    skip_requesting_account_id  = true
    skip_metadata_api_check     = true
    skip_region_validation      = true

  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On configure tout simplement le bucket où le fichier state sera stocké.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les options &lt;code&gt;skip_&lt;/code&gt; sont là pour désactiver certains comportements spécifiques à S3. Il n&amp;#8217;y a pas d&amp;#8217;inquiétide à avoir, par exemple &lt;code&gt;skip_credentials_validation&lt;/code&gt; ne veut pas dire que votre fichier state sera public.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_les_datasources&quot;&gt;Les datasources&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les datasources dans Terraform permettent de récupérer de l&amp;#8217;information. Un exemple concret est par exemple récupérer un template de machine virtuelle selon différents critères. Ce template peut ensuite être utilisé dans les ressources décrivant les machines virtuelles par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un exemple d&amp;#8217;utilisation d&amp;#8217;une datasource (cf le mot clé &lt;code&gt;data&lt;/code&gt;) servant à récupérer le template que nous avons construit dans l&amp;#8217;article précédent sur Packer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;data &quot;exoscale_compute_template&quot; &quot;debian&quot; {
  zone = var.exoscale_zone
  name = &quot;Debian 10 1574286847&quot;
  filter = &quot;mine&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme nous le verrons ensuite, nous pourrons utiliser dans d&amp;#8217;autres ressources les informations récupérées.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_cloud_init&quot;&gt;Cloud Init&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform permet bien sûr de déployer des machines virtuelles en passant un fichier Cloud Init. Cela se fait également via une datasource de manière très simple. Il est également possible de passer des variables au fichier Cloud Init chargé, qui sera donc un template (cela est utile pour avoir un fichier différent par host si besoin).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_count&quot;&gt;Count&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous voulez déployer une ressource plusieurs fois (comme par exemple déployer plusieurs machines virtuelles identiques), vous pouvez utiliser l&amp;#8217;attribut &lt;code&gt;count&lt;/code&gt; sur les ressources. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;resource &quot;exoscale_compute&quot; &quot;consul_master&quot; {
  count = 3

  display_name = &quot;consul-master-${count.index}&quot;
  template_id  = &quot;${data.exoscale_compute_template.debian.id}&quot;

  zone = var.exoscale_zone

  size            = &quot;tiny&quot;
  disk_size       = 20
  key_pair        = exoscale_ssh_keypair.example-infra-perso.name
  security_groups = [exoscale_security_group.example-infra-common.name]
  tags = {
    ansible_groups = &quot;consul-master&quot;
  }

  user_data = data.template_cloudinit_config.config.rendered
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je déploie ici 3 machines virtuelles (&lt;code&gt;count = 3&lt;/code&gt;). A part leurs noms, ces machines seront identiques. On voit que j&amp;#8217;utilise dans le nom de la machine (paramètre &lt;code&gt;display_name&lt;/code&gt;) une variable &lt;code&gt;${count.index}&lt;/code&gt;. Mes machines seront donc nommées &lt;code&gt;consul-master-0&lt;/code&gt;, &lt;code&gt;consul-master-1&lt;/code&gt; et &lt;code&gt;consul-master-2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cet exemple montre aussi comment cette ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt; référence d&amp;#8217;autres ressources et variables:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le template est configuré en récupérant l&amp;#8217;ID exposé par la datasource de type template présentée précédemment: &lt;code&gt;&quot;${data.exoscale_compute_template.debian.id}&quot;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La zone est configurée via &lt;code&gt;var.exoscale_zone&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La keypair, le security group, et les user data (pour cloud init) sont également configurés via référencement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;itérer sur des ressources déclarées avec un &lt;code&gt;count&lt;/code&gt;. Par exemple, je souhaite placer ces machines dans un réseau privé. Cela se fait de cette façon:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;exoscale_nic&quot; &quot;eth_consul_master&quot; {
  count = length(exoscale_compute.consul_master)

  compute_id = exoscale_compute.consul_master.*.id[count.index]
  network_id = exoscale_network.example-infra.id
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La variable &lt;code&gt;exoscale_compute.consul_master.*.id[count.index]&lt;/code&gt; permettra de créer une ressource de type &lt;code&gt;exoscale_nic&lt;/code&gt; par machine virtuelle, et donc permettra d&amp;#8217;attacher chaque machine au réseau.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_init&quot;&gt;Init&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première commande Terraform à lancer est &lt;code&gt;terraform init&lt;/code&gt;. Cette commande sert tout simplement à initialiser le backend utilisé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_plan&quot;&gt;Plan&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois que votre configuration est écrite, vous pouvez lancer &lt;code&gt;terraform plan&lt;/code&gt;. Cette commande crée et affiche le plan d&amp;#8217;exécution. Ce dernier permet de voir toutes les actions que réalisera Terraform: création, suppression, mise à jour de ressources. Il peut par exemple être intéressant d&amp;#8217;attacher la sortie de &lt;code&gt;terraform plan&lt;/code&gt; en commentaire d&amp;#8217;une pull request lorsque l&amp;#8217;on travaille avec Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est toujours important de regarder ce que va faire Terraform avant de réaliser un déploiement. En effet, il est très facile de détruire des ressources avec Terraform. Une ressource est détruite (ou reconstruite) si:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Elle a été supprimée du plan.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un champ immuable a été mis à jour. Par exemple, si je change le template utilisé par une machine virtuelle, Packer essayera de la recréer (donc de détruire la machine existante et de la reconstruire).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Si la ressource dépend d&amp;#8217;une autre ressource qui sera elle même détruite. Comme dit précédemment, si une ressource est détruite ou reconstruite, les ressources dépendantes le seront aussi.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_apply&quot;&gt;Apply&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;terraform apply&lt;/code&gt; appliquera les modifications à votre infrastructure. Terraform affichera encore une fois le plan, et demandera une confirmation.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_destroy&quot;&gt;Destroy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La commande &lt;code&gt;terraform destroy&lt;/code&gt; vous permet de détruire votre infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_cycle_de_vie&quot;&gt;Cycle de vie&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform présente selon moi une difficulté majeure: la gestion du cycle de vie des ressources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Reprenons mon exemple précédent: je veux changer le template utilisé par mes machines virtuelles. Vous voulez probablement faire ça régulièrement sur certaines machines (cf mon article précédent sur Packer où j&amp;#8217;expose quelques raisons pour reconstruire régulièrement ses templates).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par défaut, Terraform voudra détruire et recréer toutes mes machines. Bien sûr, ce n&amp;#8217;est pas ce que nous voulons. Ce problème se retrouve un peu partout dans Terraform (vous modifiez une ressource et Terraform décide que cela provoquera la reconstruction de votre infrastructure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de contrôler le comportement de Terraform sur ce point.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_depends_on&quot;&gt;depends_on&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, il est possible de forcer la dépendance entre deux ressources via l&amp;#8217;option &lt;code&gt;depends_on&lt;/code&gt; sur une ressource. Cela peut être utile parfois pour forcer une destruction qui ne se produirait pas par défaut par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_lifecycle&quot;&gt;lifecycle&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;option &lt;code&gt;lifecycle&lt;/code&gt; sur une ressource permet, comme son nom l&amp;#8217;indique, de contrôler le cycle de vie d&amp;#8217;une ressource. Voyons quelques exemples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_ignore_changes&quot;&gt;ignore_changes&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;ignore_changes&lt;/code&gt; permet d&amp;#8217;indiquer à Terraform de ne pas reconstruire une ressource si le ou les attributs spécifiés ont été mis à jour.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, sur une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;, indiquer:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lifecycle {
    ignore_changes = [key_pair]
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;permettra d&amp;#8217;éviter la reconstruction de la machine si la keypair référencée par la ressource est modifiée.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_prevent_destroy&quot;&gt;prevent_destroy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette option indiquer tout simplement à Terraform de ne jamais détruire la ressource. Par exemple, si j&amp;#8217;indique &lt;code&gt;prevent_destroy = true&lt;/code&gt; pour une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt; et que j&amp;#8217;essaye de détruire cette resource, j&amp;#8217;obtiendrais:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: Instance cannot be destroyed

  on master.tf line 2:
   2: resource &quot;exoscale_compute&quot; &quot;consul_master&quot; {

Resource exoscale_compute.consul_master[1] has lifecycle.prevent_destroy set,
but the plan calls for this resource to be destroyed. To avoid this error and
continue with the plan, either disable lifecycle.prevent_destroy or reduce the
scope of the plan using the -target flag.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_create_before_destroy&quot;&gt;create_before_destroy&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une fois ajoutée sur une ressource, cette option permet de recréer une ressource &lt;strong&gt;avant&lt;/strong&gt; sa destuction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple le cas d&amp;#8217;une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;. Si on modifie le template de la ressource, Terraform voudra par défaut détruire puis reconstruire la ressource.&lt;br&gt;
Grâce à l&amp;#8217;option &lt;code&gt;create_before_destroy = true&lt;/code&gt;, la nouvelle machine sera créée avant la destruction de l&amp;#8217;ancienne machine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_provisioners&quot;&gt;Provisioners&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les provisioners permettent tout simplement d&amp;#8217;exécuter une action après la création d&amp;#8217;une ressource, comme par exemple exécuter un script ou bien déployer un fichier sur une instance nouvellement créée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela permet par exemple d&amp;#8217;attendre qu&amp;#8217;un service soit démarré avant de considérer une machine comme créée par Terraform.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, si j&amp;#8217;ajoute sur une ressource de type &lt;code&gt;exoscale_compute&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;provisioner &quot;local-exec&quot; {
  command = &quot;echo 'create' &amp;amp;&amp;amp; sleep 10&quot;
}

provisioner &quot;local-exec&quot; {
  when = &quot;destroy&quot;
  command = &quot;echo 'destroy' &amp;amp;&amp;amp; sleep 20&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le premier provisioner sera appelé lors de la création (ou recréation) d&amp;#8217;une ressource, et le second lors d&amp;#8217;une destruction. Dans mon exemple de configuration, j&amp;#8217;utilise par exemple un provisioner de type &lt;code&gt;local-exec&lt;/code&gt; pour ajouter des tags sur les machines virtuelles de mon instance pool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme indiqué dans la &lt;a href=&quot;https://www.terraform.io/docs/provisioners/index.html#provisioners-are-a-last-resort&quot;&gt;documentation de Terraform&lt;/a&gt;, il ne faut pas abuser des provisioners. De plus, certains problèmes existent avec les provisioners. Par exemple, si j&amp;#8217;ajoute sur une ressource:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lifecycle {
  create_before_destroy = true
}

provisioner &quot;local-exec&quot; {
  command = &quot;echo 'create' &amp;amp;&amp;amp; sleep 10&quot;
}

provisioner &quot;local-exec&quot; {
  when = &quot;destroy&quot;
  command = &quot;echo 'destroy' &amp;amp;&amp;amp; sleep 20&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bizarrement, le provisioner &lt;code&gt;destroy&lt;/code&gt; ne sera pas appelé (cf &lt;a href=&quot;https://github.com/hashicorp/terraform/issues/13395&quot;&gt;cette issue&lt;/a&gt; sur Github).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_terraform_vs_gestionnaire_de_configuration&quot;&gt;Terraform vs gestionnaire de configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est très bon pour créer de l&amp;#8217;infrastructure, mais selon moi pas pour configurer des serveurs ou faire de l&amp;#8217;orchestration (même si cela peut être possible via les provisioners).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense qu&amp;#8217;il est important de ne pas essayer d&amp;#8217;utiliser un seul outil pour tout faire. Il vaut mieux restreindre Terraform à faire ce qu&amp;#8217;il fait bien, et utiliser par exemple Ansible pour la configuration, le déploiement d&amp;#8217;applications, l&amp;#8217;orchestration&amp;#8230;&amp;#8203; Nous verrons ça dans les articles suivants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De même, je préfère éviter de créer de l&amp;#8217;infrastucture avec Ansible (la capacité de Terraform à gérer les dépendances entre ressources étant un gros plus).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pour_aller_plus_loin&quot;&gt;Pour aller plus loin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je n&amp;#8217;ai pas parlé de tout ce qui est possible de faire avec Terraform. Par exemple, les &lt;a href=&quot;https://www.terraform.io/docs/modules/index.html&quot;&gt;modules&lt;/a&gt; permettent de créer des morceaux de configurations réutilisables. Cela est très utile pour éviter d&amp;#8217;avoir à se répéter, par exemple pour la création de machines virtuelles partageant certaines choses en commun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform ne se limite pas à la création d&amp;#8217;infrastructure. Il permet de configurer des applications comme RabbitMQ, PostgresSQL, MySQL&amp;#8230;&amp;#8203; Vous pouvez jeter un coup d&amp;#8217;oeil à la liste des &lt;a href=&quot;https://www.terraform.io/docs/providers/index.html&quot;&gt;providers&lt;/a&gt; disponibles. A vous de trancher ce qui doit être géré par Terraform ou par un autre outil.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;est pas toujours évident de mettre à jours des ressources nécessitant une destruction avec Terraform (surtout si ces ressources sont référencées par d&amp;#8217;autres ressources). Utiliser les provisioners comme par exemple &lt;a href=&quot;https://www.hashicorp.com/blog/zero-downtime-updates-with-terraform&quot;&gt;dans cet article d&amp;#8217;Hashicorp&lt;/a&gt; peut fonctionner, mais il est selon moi plus simple (et plus sûr) de dupliquer l&amp;#8217;infrastructure dans ce cas (et donc faire du déploiement blue/green).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Terraform est aussi un outil dangereux: un mauvais &lt;code&gt;terraform destroy&lt;/code&gt; peut détruire toute votre infrastructure. Faites toujours très attention à ce que vous faites, et n&amp;#8217;hésitez pas à utiliser &lt;code&gt;prevent_destroy&lt;/code&gt; sur vos ressources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;N&amp;#8217;hésitez pas non plus à découper votre déploiement en plusieurs projets Terraform (par environnement, client, provider etc&amp;#8230;&amp;#8203;), ce sera comme cela plus simple à gérer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est tout pour cet article, dans l&amp;#8217;article suivant on parlera de déploiement et d&amp;#8217;Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 01 Jan 2020 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-12-08-meuse-0.3.0/
</guid>
<link>
https://mcorbin.fr/posts/2019-12-08-meuse-0.3.0/
</link>
<title>
Meuse 0.3.0 released !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve just released the version 0.3.0 of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, an alternative registry for the Rust programming language. What&amp;#8217;s new in this release ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_database_migrations&quot;&gt;Database migrations&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse will now automatically create its database, and apply migration scripts when it starts. No need to execute SQL scripts manually anymore !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_a_frontend&quot;&gt;A frontend&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ve created a frontend for Meuse. The frontend is very limited (you can only browse crates and categories, there is no authentication etc&amp;#8230;&amp;#8203;) but I plan to improve it in the future. You can disable it in the configuration if you want.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/meuse030/frontend.jpg&quot; alt=&quot;Meuse frontend example&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_download_count&quot;&gt;Download count&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse now counts the number of times that a a crate is downloaded, per version. The number is returned by the API when you retrieve informations about crates, and is also available in the frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_a_new_call_to_retrieve_statistics&quot;&gt;A new call to retrieve statistics&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The URL &lt;code&gt;api/v1/meuse/statistics&lt;/code&gt; now returns the number of crates, crates versions, users and the total number of downloads.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_refactoring_and_enhancement&quot;&gt;Refactoring and enhancement&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did some internal refactorings on the database layer and on error handling. I also added new metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will now write a CLI for the project (&lt;code&gt;curl&lt;/code&gt; works well, but I want to have something better).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I would also like to improve the frontend, but I&amp;#8217;m a very bad frontend developer (and I do not really like it). If you want to contribute, please ping me (by email or by creating issues on the &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Github repository&lt;/a&gt;). The frontend is generated by the server, so the work should be mostly HTML, CSS and javascript.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 08 Dec 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/
</link>
<title>
Un exemple d'infrastructure: gestion des images
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans cet article, je montrerais comment construire les images qui seront utilisées pour créer nos machines virtuelles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_machine_virtuelle_la_base_de_tout&quot;&gt;La machine virtuelle, la base de tout.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toutes nos applications tourneront sur des machines virtuelles. Ces machines virtuelles auront comme système d&amp;#8217;exploitation &lt;code&gt;Debian 10&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je veux pouvoir gérer les images de ces machines. En effet, beaucoup de gens utilisent les images de base fournies par leur cloud provider, et passent ensuite du Ansible/Puppet&amp;#8230;&amp;#8203; pour faire les mises à jour du système d&amp;#8217;exploitation et pour installer un certain nombre d&amp;#8217;outils &quot;de base&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, il est beaucoup plus efficace de construire en amont une image pour sa machine virtuelle, avec les mises à jour déjà appliquées, et les outils déjà installés. Cela permet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;De déployer chez un cloud provider des distributions Linux ou des systèmes d&amp;#8217;exploitations non disponibles par défaut.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De gagner du temps et pas de perdre 5 minutes lors du déploiement de chaque nouvelle machine virtuelle pour installer toujours la même chose.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De pouvoir facilement livrer une nouvelle image contenant par exemple des mises à jour de sécurité ou un nouveau outil: de cette façon, on a la garantie que toutes les nouvelles machines créées seront à jour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De savoir &quot;où on en est&quot; sur notre infrastructure: en mettant par exemple la date de construction de l&amp;#8217;image dans le nom de cette dernière, on peut facilement savoir quelle machine reconstruire (le but étant d&amp;#8217;avoir l&amp;#8217;infrastructure la plus immutable possible, je dirais qu&amp;#8217;il faut toujours se méfier des machines trop vieilles).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De configurer notre image comme on le veut, comme par exemple avoir un partitionnement spécifique.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pourquoi pas même d&amp;#8217;installer vos applications directement sur l&amp;#8217;image, et donc de vous servir des images comme outil de packaging ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour construire nos images, on utilisera &lt;a href=&quot;https://www.packer.io/intro/&quot;&gt;Packer&lt;/a&gt; de Hashicorp. J&amp;#8217;avais d&amp;#8217;ailleurs réalisé un talk sur Packer dont vous pouvez retrouver les slides &lt;a href=&quot;https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/&quot;&gt;ici&lt;/a&gt;. Je vous conseille de les dérouler car elles contiennent pas mal d&amp;#8217;infos intéressantes, notamment sur les les différentes stratégies de construction d&amp;#8217;images. je parle notamment dans les slides de la construction d&amp;#8217;images:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;En partant d&amp;#8217;images de base &lt;code&gt;cloud&lt;/code&gt; fournies par les distributions (Debian, Ubuntu, RedHat&amp;#8230;&amp;#8203;): c&amp;#8217;est ce que nous allons faire dans la suite de cet article.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;En répondant intéractivement aux questions d&amp;#8217;un installer, avec Packer qui simule le clavier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Via des fichiers de description d&amp;#8217;installations, comme par exemple les fichiers &lt;code&gt;kickstart&lt;/code&gt; de RedHat.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_packer&quot;&gt;Packer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packer est donc un outil servant à automatiser la création d&amp;#8217;images pour machines virtuelles. Il a plusieurs avantages:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Il est simple à installer et à utiliser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La recette des images est écrite en json, et donc se versionne très bien dans Git.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packer permet de construire et de déployer les images sur de nombreux cloud, ou bien de les construire avec des outils comme &lt;code&gt;qemu&lt;/code&gt; ou &lt;code&gt;vagrant&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez trouver les fichiers de configurations utilisés dans cet article &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/tree/master/packer&quot;&gt;sur Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La configuration de packer se décompose en plusieurs sections:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;variables: on peut déclare des variables dans cette section. Elles pourront être réutilisées ensuite dans le reste de la configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;builders: cette section sert à configure le &quot;quoi&quot; qui démarrera notre machine virtuelle sur laquelle nous appliquerons des modifications&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;provisioners: cette section sert à configurer les actions à exécuter sur la machine virtuelle, comme par exemple exécuter des scripts shell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;post-processors: cette section sert à exécuter des actions &lt;code&gt;après&lt;/code&gt; la construction d&amp;#8217;une machine virtuelle, comme par exemple la pousser sur un cloud provider pour utilisation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_construire_notre_image_debian_10&quot;&gt;Construire notre image Debian 10&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On va faire les choses assez simplement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nous utiliserons le builder &lt;code&gt;qemu&lt;/code&gt; (avec l&amp;#8217;accélération &lt;code&gt;kvm&lt;/code&gt;, Packer utilisera kvm par défaut si disponible sur la machine) pour construire notre image. Cela nous permet de dissocier la construction de l&amp;#8217;image du cloud provider où elle sera utilisée, et il sera donc plus facile de faire du multi cloud si cela s&amp;#8217;avère un jour nécessaire.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nous nous contenterons de faire les mises à jour et d&amp;#8217;installer quelques packages sur l&amp;#8217;image.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;image sera ensuite poussée sur le cloud Exoscale.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_recette_packer&quot;&gt;La recette Packer&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, la configuration est &lt;a href=&quot;https://github.com/mcorbin/exemple-infra/blob/master/packer/debian.json&quot;&gt;trouvable sur Github&lt;/a&gt;.&lt;br&gt;
Je ne vais pas détailler tout le fichier de configuration &lt;code&gt;json&lt;/code&gt; de Packer (la doc Packer le fait très bien), mais il est quand même important d&amp;#8217;expliquer comment la création de l&amp;#8217;image est réalisée, et de ce qui se passe quand une machine démarre chez un cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je vais partir d&amp;#8217;une autre image de base pour réaliser mon image. Cette image est l&amp;#8217;image &lt;code&gt;Cloud&lt;/code&gt; fournie par Debian, et est trouvable &lt;a href=&quot;https://cdimage.debian.org/cdimage/openstack/current-10/&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces images sont des images ayant déjà &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/&quot;&gt;Cloud Init&lt;/a&gt; d&amp;#8217;installé, et sont donc généralement utilisables telles quelles sur n&amp;#8217;importe quel cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous ne savez pas ce qu&amp;#8217;est Cloud Init, voici un petit résumé: c&amp;#8217;est une collection de scripts Python qui se lancent lors du démarrage de la machine. Ces scripts Python vont faire plusieurs choses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chaque cloud provider expose une &lt;code&gt;datasource&lt;/code&gt;, qui est en fait un serveur HTTP exposant des informations sur la machine (zone, offering, ID de la machine, configuration réseau&amp;#8230;&amp;#8203;). Cloud Init se connecte à ce serveur lorsque la machine démarre, va chercher ces informations, et configure la machine en fonction de ce qu&amp;#8217;il a reçu.&lt;br&gt;
Par exemple, c&amp;#8217;est comme cela que les cloud providers déploiement vos clés SSH sur les machines: sans Cloud Init, vous ne pourriez pas vous connecter sur vos machines virtuelles.&lt;br&gt;
C&amp;#8217;est aussi Cloud Init qui gère généralement le redimensionnement d&amp;#8217;un disque lorsqu&amp;#8217;on l&amp;#8217;agrandit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Il est également possible de passer à Cloud Init un fichier &lt;code&gt;yaml&lt;/code&gt; décrivant des actions à exécuter au démarrage de la machine. De nombreuses choses sont possibles: configuration des utilisateurs, commandes shell à exécuter, écriture de fichiers&amp;#8230;&amp;#8203; Vous pouvez trouver quelques exemples &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/topics/examples.html&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Packer démarrera donc avec &lt;code&gt;qemu&lt;/code&gt; une machine virtuelle Debian contenant Cloud Init. Une fois démarrée, Packer se connectera dessus via SSH et exécutera des actions (dans notre cas, il exécutera seulement un script shell).&lt;br&gt;
Mais nous ne sommes pas sur un Cloud Provider, donc comment pouvons nous passer notre clé publique à la machine pour que Packer se connecte ? C&amp;#8217;est là qu&amp;#8217;intervient la &lt;a href=&quot;https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html&quot;&gt;datasource NoCloud&lt;/a&gt;. Nous allons passer à la machine un disque qui contiendra un fichier &lt;code&gt;user-data&lt;/code&gt;. Ce fichier configurera une clé publique sur la machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici par exemple le contenu du fichier &lt;code&gt;user-data&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;#cloud-config
ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDWhO7XUDYZDzKi+3TDrmwAsx3r+xtiz1uUoBP69z7cKEHiehXuORdQxi4o9/mA9Nz+fRWm3Wy2aAvm4ZjCpSTx77wTICaJ3mlbRpYfQHqCRiV2Qgeo94GErTpR6xPsn699bJKIu+N/dEzg6l3SV5XWslFZ/7asRc+iS+ZRu3dm2thOWnPwKNcIx9q/VjafdMqzwmV9HIPhfVOhB4MxQcQe0vOf1788cT0ef/5sOyVeYkcNjMvFfX/qb3M/VjvdrCPTzW01c53elptWBp6EVjQG3PQIh2qmhgx594jE3b/ZfHVgfqdkabIsFgF7f+xU1HVchMh5Q4iCDiypZkR3GoBcbW56GMayPoZ7duiCKnLyJJ9VDkZexMuR5suOxrFf5FqLvHW7alxvbmEHofk/nwCniF/OCeq9++MAPJp28wDeM748Im6I/NXk0wRV7I6AXbFLAgkEdU4C/GZ2EinNkRDJJ39ISV03VssYAKCZlYfuK+JvNZbg3smEOQgDa0sJvyN81CCKDl48hk963uUZK7iKy/Vch/abz9eT1t5PABB/7pW+sui0ohpCBYoKQXW6JCXNjE0i7K8uhF9kYXj4PINQd0+ikzbzwmippTJAWlfZMSh4+bpyNQfAZNz9rmXp8PFV51wJRsTPH2Bqzayy4MwXWIV6X4xd2pKptb6J0aZDZQ== packer&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Générons ensuite un disque contenant ce fichier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;cloud-localds seed.img user-data&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fichier &lt;code&gt;seed.img&lt;/code&gt; sera à passer à Packer, et Cloud Init exécutera automatiquement le contenu du fichier (et donc configurera notre clé publique).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est ce bloc dans la configuration &lt;code&gt;json&lt;/code&gt; de Packer qui permettra de passer ce disque à la machine virtuelle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&quot;qemuargs&quot;: [
    [&quot;-cpu&quot;, &quot;qemu64,rdrand=on&quot;],
    [&quot;-drive&quot;, &quot;file=output-qemu/debian-buster.qcow2,format=qcow2,if=virtio&quot;],
    [&quot;-drive&quot;, &quot;file=seed.img,format=raw,if=virtio&quot;]
],&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que l&amp;#8217;on passe ici plusieurs paramètres à qemu:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le premier concerne la génération de nombre aléatoire, chose importante sur une machine virtuelle. Si je sujet vous intéresse, &lt;a href=&quot;https://www.exoscale.com/syslog/random-numbers-generation-in-virtual-machines/&quot;&gt;allez ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le deuxième spécifie le chemin vers l&amp;#8217;image qui sera créée par Packer (c&amp;#8217;est cette image qui sera envoyée sur le cloud provider).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Le troisième est notre fichier &lt;code&gt;seed.img&lt;/code&gt; qui contient donc notre fichier yaml.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il nous reste une dernière chose à configurer pour se connecter sur la machine: la clée privée à utiliser par Packer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela se configure dans le builder qemu, via l&amp;#8217;option &lt;code&gt;ssh_private_key_file&lt;/code&gt;. Nous allons passer le chemin vers notre clé privé (qui doit être la clé associée à la clé publique présente dans le fichier &lt;code&gt;seed.img&lt;/code&gt;) via une variable d&amp;#8217;environnement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la section &lt;code&gt;variables&lt;/code&gt; du fichier Packer, vous pouvez voir:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;ssh_private_key_file&quot;: &quot;{{env `PACKER_PRIVATE_KEY`}}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, dans la section &lt;code&gt;builders&lt;/code&gt;, vous trouverez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;ssh_private_key_file&quot;: &quot;{{user `ssh_private_key_file`}}&quot;,&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous n&amp;#8217;aurons donc qu&amp;#8217;à configurer la variable d&amp;#8217;environnement &lt;code&gt;PACKER_PRIVATE_KEY&lt;/code&gt; pour pouvoir se connecter sur la machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, je n&amp;#8217;exécuterais qu&amp;#8217;un script shell sur notre machine qui installera quelques packages, mettra Cloud Init à jour (de façon assez sale, en téléchargeant le paquet via wget :D) et configurera la datasource Exoscale.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_un_premier_essai&quot;&gt;Un premier essai&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous devriez maintenant pouvoir construire votre image. Commentez toute la partie &lt;code&gt;post-processors&lt;/code&gt; du fichier &lt;code&gt;debian.json&lt;/code&gt; et lancez:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;PACKER_PRIVATE_KEY=/home/mathieu/.ssh/infra/id_rsa packer build debian.json&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En modifiant bien sûr la valeur de &lt;code&gt;PACKER_PRIVATE_KEY&lt;/code&gt;, et votre image devrait se construire !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si tout se passe bien, vous devriez voir les logs d&amp;#8217;exécution de Packer et à la fin un message indiquant &lt;code&gt;=&amp;#8658; Builds finished. The artifacts of successful builds are: -&amp;#8594; qemu: VM files in directory: output-qemu&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, l&amp;#8217;image finale devrait être dans &lt;code&gt;output-qemu/debian-buster.qcow2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez un problème, vous pouvez regarder les logs ou utiliser un client &lt;code&gt;vnc&lt;/code&gt; (comme &lt;code&gt;remmina&lt;/code&gt;) sur Linux pour vous connecter sur la machine en cours de construction si besoin (le port &lt;code&gt;vnc&lt;/code&gt; est défini comme étant &lt;code&gt;6000&lt;/code&gt; dans mon exemple).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_changer_la_taille_de_l_image&quot;&gt;Changer la taille de l&amp;#8217;image&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille virtuelle d&amp;#8217;une image sur le cloud Exoscale doit être de 10G au minimum. Il faut donc mettre à jour la taille de notre image. Pour cela, nous utilisons un &lt;code&gt;post-processors&lt;/code&gt; de type &lt;code&gt;shell-local&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;{
    &quot;type&quot;: &quot;shell-local&quot;,
    &quot;inline&quot;: [&quot;qemu-img resize output-qemu/debian-buster.qcow2 10G&quot;]
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille virtuelle de notre image sera maintenant de 10G. Cela se vérifie facilement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;qemu-img info output-qemu/debian-buster.qcow2
image: output-qemu/debian-buster.qcow2
file format: qcow2
virtual size: 10G (10737418240 bytes)
disk size: 522M
cluster_size: 65536
Format specific information:
    compat: 1.1
    lazy refcounts: false
    refcount bits: 16
    corrupt: false

du -sh output-qemu/debian-buster.qcow2
523M	output-qemu/debian-buster.qcow2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La taille de notre image sur le disque est de 523M, mais la taille virtuelle est bien de 10G.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_pousser_l_image_sur_exoscale&quot;&gt;Pousser l&amp;#8217;image sur Exoscale&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le post processor &lt;a href=&quot;https://www.packer.io/docs/post-processors/exoscale-import.html&quot;&gt;exoscale-import&lt;/a&gt; nous permet d&amp;#8217;importer sur le Cloud Exoscale notre image fraîchement construite. Sa configuration est très simple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;type&quot;: &quot;exoscale-import&quot;,
    &quot;api_key&quot;: &quot;{{user `exoscale_api_key`}}&quot;,
    &quot;api_secret&quot;: &quot;{{user `exoscale_api_secret`}}&quot;,
    &quot;image_bucket&quot;: &quot;mcorbin.fr.images&quot;,
    &quot;template_name&quot;: &quot;Debian 10 {{timestamp}}&quot;,
    &quot;template_description&quot;: &quot;Debian 10 template&quot;,
    &quot;template_username&quot;: &quot;debian&quot;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les variables d&amp;#8217;environnements &lt;code&gt;EXOSCALE_API_KEY&lt;/code&gt; et &lt;code&gt;EXOSCALE_API_SECRET&lt;/code&gt; serviront à configurer les credentials nécessaires au post processor. On spécifie aussi le bucket sur lequel sera poussée l&amp;#8217;image (en effet, les images sont d&amp;#8217;abord poussées sur l&amp;#8217;object store compatible S3 d&amp;#8217;Exoscale avant d&amp;#8217;être enregistrées).&lt;br&gt;
Le nom de l&amp;#8217;image contiendra le timestamp de la date de création.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous relancez le build en configurant les nouvelles variables d&amp;#8217;environnements et en utilisant un bucket vous appartenant dans &lt;code&gt;image_bucket&lt;/code&gt;, l&amp;#8217;image devrait être maintenant visible sur Exoscale !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/exemple-infra/packer/debian-template.png&quot; alt=&quot;image debian sur Exoscale&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour information, le temps entre le lancement du build Packer sur mon ordinateur portable et le moment où l&amp;#8217;image est disponible sur le Cloud Exoscale est de 3 minutes 30.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_aller_plus_loin&quot;&gt;Aller plus loin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela peut se faire dans une &lt;code&gt;plateforme d&amp;#8217;intégration continue&lt;/code&gt; type Jenkins. Le but est vraiment que vous puissiez livrer à tout moment une nouvelle image.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également très important de &lt;code&gt;tester ses images&lt;/code&gt;.&lt;br&gt;
Avant de les pousser en prod, exécutez des tests dessus: est ce que l&amp;#8217;image boot correctement, est ce que les services dessus sont bien démarrés, est ce qu&amp;#8217;il n&amp;#8217;y a pas de problèmes de sécurité sur l&amp;#8217;image&amp;#8230;&amp;#8203; Ces tests doivent aussi se lancer sur votre plateforme d&amp;#8217;intégration continue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons utilisé dans cet article la datasource Cloud Init &lt;code&gt;nocloud&lt;/code&gt;. Il existe une autre datasource, appelée &lt;code&gt;nocloud-net&lt;/code&gt; qui permet de faire presque la même chose: avec &lt;code&gt;nocloud-net&lt;/code&gt;, on ne passe pas un disque à Cloud Init, Packer exposera via HTTP un répertoire contenant le fichier &lt;code&gt;user-data&lt;/code&gt;. Ce dernier sera récupéré par Cloud Init lors du démarrage de la machine virtuelle.&lt;br&gt;
Attention, &lt;code&gt;nocloud-net&lt;/code&gt; n&amp;#8217;est pas supportée sur toutes les versions de Cloud Init.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_suite&quot;&gt;La suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous avons vu dans cet article comment construire des images. Dans le prochain article, nous créerons notre infrastructure (machines virtuelles, réseau&amp;#8230;&amp;#8203;) avec &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 21 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-20-un-exemple-infra-intro/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-20-un-exemple-infra-intro/
</link>
<title>
Un exemple d'infrastructure automatisée et scalable
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela faisait longtemps que je voulais écrire une série d&amp;#8217;articles sur le déploiement d&amp;#8217;une infrastructure et la gestion des applications qui tournent dessus, le tout répondant à certains critères:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Déploiement automatisé, que ce soit pour l&amp;#8217;infrastructure en elle même ou bien pour les applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvant monter en charge si besoin.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Utilisant un certain nombre d&amp;#8217;outils qui se combinent bien ensemble.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Chaque article sera consacré à une partie de l&amp;#8217;infrastructure ou à un sujet plus &quot;applicatif&quot;: gestion de machines virtuelles, déploiement de l&amp;#8217;infrastructure, intégration continue, packaging et déploiement des applications, load balancing, monitoring, métriques&amp;#8230;&amp;#8203; j&amp;#8217;essayerais aussi de justifier mes choix, en pesant le pour et le contre par rapport à d&amp;#8217;autres produits que ceux présentés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela va probablement prendre pas mal de temps. Je prendrais peut être parfois quelques raccourcis si je vois qu&amp;#8217;une section me prend trop de temps.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_et_ce_sera_déployé_où&quot;&gt;Et ce sera déployé où ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous déploierons l&amp;#8217;infrastructure chez un cloud provider.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toute l&amp;#8217;infrastructure sera déployée sur &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;, qui est aussi mon employeur (vous allez dire que je prêche pour ma paroisse).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, si vous recherchez un cloud provider européen avec du bon tooling, un catalogue produit sympa, un support très réactif (car géré par l&amp;#8217;équipe tech), jetez un coup d&amp;#8217;oeil (et on a plusieurs nouveaux produits qui arrivent très prochainement, et une grosse roadmap pour 2020 :p).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les articles peuvent également s&amp;#8217;appliquer à d&amp;#8217;autres cloud en changeant quelques configurations dans certains outils, car je veillerais à rester général (et pour beaucoup d&amp;#8217;articles, le choix du cloud provider ne sera pas du tout important).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez retrouver dès à présent &lt;a href=&quot;https://mcorbin.fr/posts/2019-11-21-exemple-infra-vm-image/&quot;&gt;le premier article de cette série&lt;/a&gt;, qui concerne la gestion des images de nos futures machines virtuelles !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 20 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-11-11-meuse-0.2.0/
</guid>
<link>
https://mcorbin.fr/posts/2019-11-11-meuse-0.2.0/
</link>
<title>
What's new in Meuse 0.2.0
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I released today the version 0.2.0 of &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, an alternative registry for the Rust programming language. A lot of improvements have been made, and new features (in beta :p) are availables in this release: S3 backend for crates binary files, and &lt;code&gt;crates.io&lt;/code&gt; mirroring.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_new_things_in_this_release&quot;&gt;New things in this release&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_refactoring_and_bugfixes&quot;&gt;Refactoring and bugfixes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I did a lot of refactoring in the project internals. It&amp;#8217;s not finished yet, but the code looks better now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I also fixed a couple of bugs, and also made a few improvements (for example in error handling).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_monitoring&quot;&gt;Monitoring&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse exposes a Prometheus endpoint since the release &lt;code&gt;0.1.0&lt;/code&gt;. This release adds more metrics: JVM metrics and the database connection pool metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_multiple_backends_for_the_crates_binary_files&quot;&gt;Multiple backends for the crates binary files&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I refactored the project to be able to easily add more backends for crates binary files, and added a S3 backend. This will allow you to store your crates binary files on any S3-compatible storage (I made my tests with SOS, the S3-compatible storage provided by &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_crates_io_mirroring&quot;&gt;crates.io mirroring&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse is now able to mirror &lt;code&gt;crates.io&lt;/code&gt;, and will also cache crates binary files downloaded from &lt;code&gt;crates.io&lt;/code&gt; on its own store (so on its filesystem or on S3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Using Meuse alongside crates.io&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was already possible to use &lt;code&gt;Meuse&lt;/code&gt; alongside &lt;code&gt;crates.io&lt;/code&gt;. You could for example upload private crates on Meuse, and these crates could have dependencies on crates stored on &lt;code&gt;crates.io&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To do that, you should configure the &lt;code&gt;allowed-registries&lt;/code&gt; parameter of your private registry index (cf &lt;a href=&quot;https://github.com/rust-lang/rfcs/blob/master/text/2141-alternative-registries.md#registry-index-format-specification&quot;&gt;the alternative registry RFC&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But we can do better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;crates.io mirroring&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meuse can download crates files from &lt;code&gt;crates.io&lt;/code&gt;, and then cache them on its own store. The next time you download this crate, &lt;code&gt;crates.io&lt;/code&gt; will not be contacted at all, Meuse will serve the crate from its store directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you store your crates files on the &lt;code&gt;filesystem&lt;/code&gt;, Meuse will write the cached crates in a directory named &lt;code&gt;.crates.io&lt;/code&gt;, which will be automatically created at the root of the store directory. If the crates are stored in a S3-compatible storage, the file path will be prefixed by &lt;code&gt;.crates.io&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/meuse_020/cargo_mirror1.jpg&quot; alt=&quot;cargo mirror explanation&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find how to create a &lt;code&gt;crates.io&lt;/code&gt; mirror, please check the &lt;a href=&quot;https://meuse.mcorbin.fr/installation/mirroring/&quot;&gt;Meuse documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next Meuse release, I will add an endpoint to force the caching of a crate. Like that, you will be able to cache crates from &lt;code&gt;crates.io&lt;/code&gt; in Meuse even if you don&amp;#8217;t run &lt;code&gt;cargo build&lt;/code&gt; for your project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_auth_issues&quot;&gt;Auth issues&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;cargo&lt;/code&gt; does not pass the authentication token for the &lt;code&gt;cargo search&lt;/code&gt; command, and when a crate is downloaded. This means that I cannot authenticate the user for these actions in Meuse (cf &lt;a href=&quot;https://github.com/rust-lang/cargo/issues/7091&quot;&gt;this issue&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next steps for Meuse are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;More refactoring: there are several things that I don&amp;#8217;t like in the codebase.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New features around &lt;code&gt;crates.io&lt;/code&gt; mirroring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;More metrics (especially for the S3 client).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Better documentation (in the code and in the documentation website).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A CLI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A read-only frontend.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Also, don&amp;#8217;t hesitate to test the project, report issues, and give me feedbacks. It would be very helpful for me.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 11 Nov 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/
</guid>
<link>
https://mcorbin.fr/posts/2019-09-10-machines-virtuelles/
</link>
<title>
Slides: Gérez les images de vos machines virtuelles
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai récemment donné un talk au Café Devops de Lyon à propos de la gestion des images pour machines virtuelles. Vous pouvez retrouver les slides &lt;a href=&quot;https://mcorbin.fr/pdf/slides/virtual_machines.pdf&quot;&gt;ici&lt;/a&gt; ;)&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>
Tue, 10 Sep 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-07-11-repl-driven-development/
</guid>
<link>
https://mcorbin.fr/posts/2019-07-11-repl-driven-development/
</link>
<title>
REPL Driven Development et gestion des états
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque l&amp;#8217;on code en Clojure (mais pas que), il y a un outil formidable pour nous accompagner: le REPL. Dans cet article, je parlerais de programmation intéractive et de la gestion des états dans une application&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_programmation_intéractive&quot;&gt;Programmation intéractive&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_présentation&quot;&gt;Présentation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure (et dans les langages de la famille des LISP en général), nous développons avec un REPL. On pourrait définir le REPL comme un interpréteur évolué, en permanence connecté à notre code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici par exemple à quoi ressemble mon écran lorsque je code en Clojure (Emacs ftw):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/repl/repl-emacs.png&quot; alt=&quot;mon environnement de développement&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut voir ici que j&amp;#8217;ai sur le côté gauche de mon écran mon REPL, et sur le côté droit mon code. Je peux à tout moment intéragir avec mon REPL, comme par exemple &quot;charger&quot; le code de mon projet dans le REPL et exécuter le code. Je peux également définir des fonctions, variables temporaires etc&amp;#8230;&amp;#8203; directement dans le REPL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand je parles du REPL à d&amp;#8217;autres développeurs, j&amp;#8217;ai souvent des réflexions du type &lt;code&gt;mais des interpréteurs il y en a dans tous les langages !&lt;/code&gt;. Effectivement, même Java a maintenant un REPL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, vous vous voyez coder avec le REPL en Java ? Charger un &lt;a href=&quot;https://mcorbin.fr/posts/2018-02-08-spring-generateur/&quot;&gt;programmes Spring Boot&lt;/a&gt; dans un REPL puis intéragir avec ? Taper du code ultra verbeux dans le REPL ? Ceci est de la science fiction, et n&amp;#8217;arrivera jamais.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_mon_workflow&quot;&gt;Mon workflow&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque je code en Clojure, mon workflow est le suivant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Je réfléchis à mon problème en écrivant du code et en le chargeant dans le REPL. J&amp;#8217;intéragis avec celui ci via le REPL (j&amp;#8217;appelle les fonctions que j&amp;#8217;écris avec certains paramètres par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J&amp;#8217;écris des tests, et je fignole, toujours en utilisant le REPL. L&amp;#8217;exécution de mes tests est &lt;code&gt;ultra rapide&lt;/code&gt;, car ma JVM/mon application est déjà démarrée.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Intéragir avec son code via le REPL ne remplace donc pas les tests. Par contre, la boucle de feedback sur ce que l&amp;#8217;on fait est ultra rapide. J&amp;#8217;écris une fonction, je peux immédiatement jouer avec.&lt;br&gt;
Je ne pratique donc pas le TDD lorsque je fais du Clojure, je ne commence pas à écrire mes tests mais j&amp;#8217;utilise le REPL pour définir la structure de mon programme, puis je les écris.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait que Clojure soit un langage où la syntaxe est très concise et où l&amp;#8217;immuabilité est très présente joue aussi. Je n&amp;#8217;aurais pas la même expérience dans un langage verbeux ou pleins d&amp;#8217;états.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons d&amp;#8217;états.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_des_états&quot;&gt;Gestion des états&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_composants&quot;&gt;Composants&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, en Clojure pratiquement tout est immuable, ce qui est génial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais dans un programme, j&amp;#8217;ai quand même besoin d&amp;#8217;états (faut bien faire des entrées/sorties un jour ou l&amp;#8217;autre pour intéragir avec). Prenons par exemple &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;Meuse&lt;/a&gt;, mon projet de registry Rust sur lequel je travaille actuellement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce projet est une application web classique. Voici les composants devant garder un état/faisant des effets de bords dans cette application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le chargement de ma configuration (un fichier yaml).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un serveur HTTP.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un threadpool de connexion vers une base de données.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Un composant envoyant des commandes Git, et qui possède un lock.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans d&amp;#8217;autres cas, j&amp;#8217;aurais pû avoir un cache, ou d&amp;#8217;autres threadpools&amp;#8230;&amp;#8203; Mais finalement, il y a peu de composants avec état dans un programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque facilement que ces états ont des dépendances. Mon composant &lt;code&gt;database&lt;/code&gt; a besoin de sa configuration, le composant &lt;code&gt;http&lt;/code&gt; a aussi besoin de sa configuration mais aussi du composant &lt;code&gt;database&lt;/code&gt; et &lt;code&gt;git&lt;/code&gt;. Le composant &lt;code&gt;git&lt;/code&gt; a lui même besoin d&amp;#8217;une configuration:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/repl/components_repl.png&quot; alt=&quot;hiérarchie de composants&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les dépendances de mon application peuvent donc se voir comme un arbre.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Java, c&amp;#8217;est généralement via l&amp;#8217;injection de dépendance que les composants sont instanciés dans le bon ordre, et &quot;stockés&quot; dans un conteneur de façon un peu magique&lt;br&gt;
En parlant de cela, je trouve dommage que l&amp;#8217;écosystème Java pousse à cette pratique (&lt;code&gt;@inject&lt;/code&gt; moi mes objets et après moi le déluge), là où quelques &lt;code&gt;new&lt;/code&gt; et des constructeurs bien écrits suffiraient à résoudre le problème. Bref.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure, il est possible de définir ces composants via certaines librairies, comme par exemple &lt;a href=&quot;https://github.com/stuartsierra/component&quot;&gt;component&lt;/a&gt;, &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount&lt;/a&gt; ou &lt;a href=&quot;https://github.com/weavejester/integrant&quot;&gt;integrant&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sans rentrer dans les détails de chaque librairie, chacune permet à sa manière de définir cette hiérarchie de composant.&lt;br&gt;
Chaque librairie permet aussi de facilement démarrer votre système (un système étant la somme de vos composants). Démarrer votre système équivant donc à démarrer votre application. Il est également possible de stopper le système, de le démarrer partiellement, et même de remplacer un composant par un mock pour les tests !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et bien sûr, tout cela est faisable via le REPL. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Je démarre mon application via le REPL. Mon application est maintenant active. J&amp;#8217;ajoute une nouvelle route dans mon routeur HTTP, &quot;charge&quot; mon code dans le REPL. La route est tout de suite active !&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;J&amp;#8217;implémente le code de ma nouvelle route. A tout moment, je peux recharger mon code, et celui ci sera actif. Je peux également expérimenter facilement via le REPL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;j&amp;#8217;écris des tests, qui comme dit précédemment s&amp;#8217;exécutent à toute vitesse vu que ma JVM tourne déjà.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est possible de modifier n&amp;#8217;importe quelle partie de mon programme &lt;code&gt;à chaud&lt;/code&gt; à tout moment. Bref, mon confort de développement est énorme (je n&amp;#8217;ai rien trouvé de semblable en Python/Rust/Go/Java/C etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;il est d&amp;#8217;ailleurs même possible d&amp;#8217;avoir un port ouvert avec un REPL pour vos applications même en prod si vous le voulez (bien que cela soit une grosse faille de sécurité). Mais c&amp;#8217;est possible, et là aussi n&amp;#8217;importe quelle fonction pourrait être patchée à chaud. Des gens ont fait des choses formidables comme cela, lisez donc ça par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;An impressive instance of remote debugging occurred on NASA’s 1998 Deep Space 1 mission. A half year after the space craft launched, a bit of Lisp code was going to control the spacecraft for two days while conducting a sequence of experiments. Unfortunately, a subtle race condition in the code had escaped detection during ground testing and was already in space. When the bug manifested in the wild–100 million miles away from Earth–the team was able to diagnose and fix the running code, allowing the experiments to complete.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_etat_du_repl&quot;&gt;Etat du REPL&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il me reste un dernier soucis. Le REPL garde son état.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que je démarre une application. Je vais pouvoir comme dit précédemment modifier à chaud mon programme, ou définir dans mon REPL des variables ou des fonctions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Problème: il est facile de se perdre, et d&amp;#8217;avoir un doute: est ce que le code dans mon fichier reflète le code qui tourne dans mon REPL ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour cela, il existe des outils comme &lt;a href=&quot;https://github.com/clojure/tools.namespace&quot;&gt;clojure.tools.namespace&lt;/a&gt;. Ces outils, combinés aux librairies de gestion de composants décrites précédemment, permettent de recharger proprement (et quasi instantanément) l&amp;#8217;état de votre application. Une fois rechargé, vous avez la garantie que votre REPL est synchronisé avec votre code.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_arrêt_d_un_système&quot;&gt;Arrêt d&amp;#8217;un système&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;je parle beaucoup de stopper, ou recharger un système. Cela implique une chose: chaque composant stateful doit pouvoir être démarré et stoppé &lt;code&gt;proprement&lt;/code&gt;.&lt;br&gt;
Il arrive encore trop souvent de voir des programmes ne pouvant pas se stopper de manière propre. Cette approche n&amp;#8217;est pas possible si l&amp;#8217;on veut faire du REPL Driven Development.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est d&amp;#8217;ailleurs une difficulté, même en Clojure. &lt;a href=&quot;https://github.com/ztellman/aleph/issues/365&quot;&gt;Certains bugs&lt;/a&gt; peuvent vous empêcher de stopper proprement certains composants. Cela casse donc votre workflow de développement. La bonne chose, c&amp;#8217;est que cela nous force à faire des trucs propres pour que ça marche ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette façon de développer a été une des choses qui m&amp;#8217;a fait accrocher à Clojure. Cette architecture sous forme de composants, le fait de toujours pouvoir stopper un système gracieusement&amp;#8230;&amp;#8203; est quelque chose qu&amp;#8217;il est selon moi nécessaire d&amp;#8217;appliquer quel que soit le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si Clojure vous intéresse, allez donc faire un tour sur &lt;a href=&quot;https://tour.mcorbin.fr/&quot;&gt;https://tour.mcorbin.fr/&lt;/a&gt; :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 11 Jul 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-06-28-ansible-assemble-config/
</guid>
<link>
https://mcorbin.fr/posts/2019-06-28-ansible-assemble-config/
</link>
<title>
Ansible tip: configuration, assemble and idempotence
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il arrive parfois que vous ayez à configurer avec Ansible un logiciel n&amp;#8217;acceptant qu&amp;#8217;un fichier de configuration, et où il est impossible d&amp;#8217;inclure un autre fichier ou dossier depuis ce fichier.
Je présenterais ici une astuce pour gérer cela avec Ansible et le module &lt;code&gt;assemble&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_problème&quot;&gt;Le problème&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple &lt;code&gt;haproxy&lt;/code&gt;. &lt;span class=&quot;line-through&quot;&gt;Il est impossible d&amp;#8217;inclure depuis le fichier de configuration principal d&amp;#8217;autres fichiers ou dossiers (bien qu&amp;#8217;il soit possible de passer plusieurs fichiers de configuration en passant plusieurs fois le paramètre &lt;code&gt;-f`&lt;/code&gt; à la commande de lancement).&lt;/span&gt;&lt;br&gt;
&lt;strong&gt;EDIT&lt;/strong&gt;: faux ! Il est en fait possible de passer un répertoire à HAProxy. Mais nous utiliserons quand même HAProxy comme exemple dans cet article ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe une solution élégante avec Ansible permettant de découper cette configuration en plusieurs fichiers dans un dossier, tout en ayant un déploiemnt idempotent.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_solution&quot;&gt;La solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons créer plusieurs fichiers dans un dossier, puis les concaténer pour obtenir le fichier final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On commence par supprimer ledit dossier, par exemple &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: delete haproxy.d directory
  become: true
  file:
    path: /etc/haproxy/haproxy.d
    state: absent
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notez le &lt;code&gt;changed_when: false&lt;/code&gt;: Ansible ne considérera pas qu&amp;#8217;il y a eu un changement si le dossier est effectivement supprimé.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puis on recrée ce répertoire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: create haproxy.d directory
  become: true
  file:
    path: /etc/haproxy/haproxy.d
    state: directory
    owner: root
    group: root
    mode: 0755
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Là aussi, on a un &lt;code&gt;changed_when: false&lt;/code&gt;. A cette étape du rôle, on a donc la garantie d&amp;#8217;avoir un dossier &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt; vide.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, on utilise la directive &lt;code&gt;template&lt;/code&gt; pour déployer dans ce nouveau dossier nos fichiers de configuration. Attention, il faut que les fichiers soient ordonnés par ordre alphabétique. Par exemple, je pourrais préfixer chaque fichier par un numéro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_configuration_templates:
  - src: haproxy/haproxy.cfg.j2
    dest: 01_haproxy.cfg
  - src: haproxy/frontend.j2
    dest: 02_frontend.cfg
  - src: haproxy/blog.j2
    dest: 03_blog.cfg
  - src: haproxy/meuse.j2
    dest: 03_meuse.cfg
  - src: haproxy/tour.j2
    dest: 03_tour.cfg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, je template ces fichiers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: template haproxy configuration in haproxy.d
  become: true
  template:
    src: &quot;{{ item.src }}&quot;
    dest: &quot;/etc/haproxy/haproxy.d/{{ item.dest }}&quot;
    owner: root
    group: root
    mode: 0644
  with_items: &quot;{{ haproxy_configuration_templates }}&quot;
  changed_when: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici aussi on a un &lt;code&gt;changed_when: false&lt;/code&gt;, ce qui est très important. Cette tâche ne provoquera aucun changement lors de son exécution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, je concatène tous ces fichiers ensemble en utilisant &lt;code&gt;assemble&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- name: assemble haproxy.d configuration
  become: true
  assemble:
    src: /etc/haproxy/haproxy.d
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: 0644
  notify: haproxy | reload&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un handler me permet de reload HAProxy en cas de changement. &lt;code&gt;assemble&lt;/code&gt; ne provoquera un changement que si le résultat de l&amp;#8217;assemblage des fichiers est différent de l&amp;#8217;état existant.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et c&amp;#8217;est fini.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si une configuration identique est déployée, les &lt;code&gt;changed_when: false&lt;/code&gt; feront qu&amp;#8217;Ansible ne détectera pas de changement. Si une configuration différente est déployée, on aura un changement sur la tâche &lt;code&gt;assemble&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait de supprimer et recréer le dossier contenant les fichiers est obligatoire pour gérer le cas d&amp;#8217;un fichier template qui serait supprimé de la liste des fichiers à déployer. Dans ce cas, on ne veut pas avoir des fichiers non voulus dans &lt;code&gt;/etc/haproxy/haproxy.d&lt;/code&gt; venant d&amp;#8217;un ancien déploiement (d&amp;#8217;où le nettoyage).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 28 Jun 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-06-13-one-year-of-go/
</guid>
<link>
https://mcorbin.fr/posts/2019-06-13-one-year-of-go/
</link>
<title>
One year of Golang
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela fait maintenant plus d&amp;#8217;un an que j&amp;#8217;ai l&amp;#8217;occasion d&amp;#8217;utiliser Golang professionnellement (bien que j&amp;#8217;en faisais déjà un peu avant cela sur des projets Open Source). je décrirais dans cet article mon ressenti actuel sur le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_le_contexte&quot;&gt;Le contexte&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai rejoint en Mai 2018 &lt;a href=&quot;https://www.exoscale.com/&quot;&gt;Exoscale&lt;/a&gt;, où je travaille notamment sur le développement et la maintenance de certains produits.
Ce n&amp;#8217;est pas un secret, nous sommes à Exoscale de gros utilisateurs de &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;, mais nous avons aussi pas mal de Go pour des services orientés &quot;système&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, en tant que cloud provider, il est important de s&amp;#8217;intégrer dans l&amp;#8217;écosystème &quot;cloud&quot; existant. Aujourd&amp;#8217;hui, cet écosystème est en Go. Les outils comme Terraform, Packer, l&amp;#8217;écosystème conteneur et Kubernetes&amp;#8230;&amp;#8203; tout est écrit en Go. Les intégrations avec ces produits sont donc logiquement écrites en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je suis encore loin d&amp;#8217;être un expert sur Go (n&amp;#8217;hésitez pas à me contacter si vous n&amp;#8217;êtes pas d&amp;#8217;accord avec quelque chose dans cet article), mais je voulais partager mon expérience avec le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_trucs_cools&quot;&gt;Les trucs cools&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_l_écosystème_et_la_librairie_standard_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;L&amp;#8217;écosystème et la librairie standard&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le gros plus de Go selon moi est son écosystème. Comme dit précédemment, si vous voulez vous intégrer dans l&amp;#8217;écosystème &quot;cloud&quot;, vous n&amp;#8217;aurez pas vraiment le choix que de partir sur Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous avez besoin d&amp;#8217;écrire des daemons intéragissant avec le système et le réseau, là aussi vous y trouverez votre compte.&lt;br&gt;
Par exemple, des projets comme &lt;a href=&quot;https://github.com/vishvananda/netlink&quot;&gt;netlink&lt;/a&gt; ou &lt;a href=&quot;https://github.com/google/netstack&quot;&gt;netstack&lt;/a&gt; sont très utiles lorsque vous avez à intéragir avec le réseau. Vous pouvez également vous intégrer avec systemd avec &lt;a href=&quot;https://github.com/coreos/go-systemd&quot;&gt;go-systemd&lt;/a&gt;.&lt;br&gt;
Il est également simple d&amp;#8217;écrire de petits serveurs TCP, UDP ou HTTP en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De manière générale, l&amp;#8217;écosystème Go est assez complet. On n&amp;#8217;est plus aujourd&amp;#8217;hui sur un langage de niche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La librairie standard est également riche et complète.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_gofmt_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;gofmt&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://golang.org/cmd/gofmt/&quot;&gt;gofmt&lt;/a&gt; est le formatter de Go. J&amp;#8217;aime le fait de n&amp;#8217;avoir pas à me poser de questions sur le style à adopter (et l&amp;#8217;outil s&amp;#8217;intègre très bien avec les IDE). Pas grand chose d&amp;#8217;autres à dire sur ce sujet ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_temps_de_compilation_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Temps de compilation&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ça compile vite, c&amp;#8217;est toujours intéressant.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_performances_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Performances&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les performances du langage sont bonnes, et il est possible d&amp;#8217;écrire des services très peu gourmands. C&amp;#8217;est assez plaisant de pouvoir écrire de petits daemons consommant moins de 15MB de RAM.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_le_package_time_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;le package time&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime comment le temps est géré en Golang. C&amp;#8217;est généralement un point noir pour un certain nombre de langages, mais en Go c&amp;#8217;est facile et assez intuitif. Jetez un oeil à la &lt;a href=&quot;https://golang.org/pkg/time/&quot;&gt;documentation&lt;/a&gt; si ce sujet vous intéresse.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ok_mais_sans_plus&quot;&gt;OK mais sans plus&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_multithreading_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Multithreading&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On présente souvent Golang comme un langage &lt;code&gt;génial&lt;/code&gt; pour le multithreading. Je ne suis que moyennement d&amp;#8217;accord. Vous avez en gros à votre disposition les &lt;a href=&quot;https://tour.golang.org/concurrency/1&quot;&gt;goroutines&lt;/a&gt;, et c&amp;#8217;est tout.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons tout d&amp;#8217;abord de concurrence. En Go, vous n&amp;#8217;avez pas de structures de données concurrentes, pas de structures de données &lt;code&gt;compare and set&lt;/code&gt; (les &lt;code&gt;atom&lt;/code&gt; en Clojure), pas de software transactional memory&amp;#8230;&amp;#8203; Les programmes Go sont remplis de mutex.
Cela est assez fâcheux (pas la peine d&amp;#8217;expliquer les problèmes qu&amp;#8217;apportent les locks lors de l&amp;#8217;écriture de programmes conséquents et complexes), mais il n&amp;#8217;y a pas vraiment d&amp;#8217;autres solutions lorsque l&amp;#8217;on a besoin d&amp;#8217;avoir des structures de données partagées entre plusieurs threads en Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, tout Gopher digne de ce nom nous dira à se moment que nous ne respectons pas la philosophie de Golang et que nous devons réécrire notre programme pour utiliser des goroutines et des channels. Malheureusement ce n&amp;#8217;est pas simple, et je ne dois pas être le seul à le penser vu la quantité impressionnante de résultats lorsqu&amp;#8217;on recherche l&amp;#8217;utilisation de Mutex dans de gros projets open source Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons des goroutines et des channels. C&amp;#8217;est en effet un outil intéressant, mais il est &lt;code&gt;très&lt;/code&gt; facile en les utilisant de :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Leak des goroutines, c&amp;#8217;est à dire en démarrer mais d&amp;#8217;oublier de les stopper. On se retrouve donc avec de plus en plus de goroutines, jusqu&amp;#8217;au l&amp;#8217;éventuel explosion du programme.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;De se faire deadlock. Cela peut facilement arriver lorsque plusieurs goroutines attendent sur des channels. Si vous ratez votre coup, vous pouvez vous retrouver avec toutes les goroutines en attente, et votre programme est bloqué.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe des outils pour limiter en partie ces problèmes, comme le &lt;a href=&quot;https://blog.golang.org/race-detector&quot;&gt;race detector&lt;/a&gt; ou encore la librairie tomb, &lt;a href=&quot;https://mcorbin.fr/posts/2018-12-03-golang-tomb/index.html&quot;&gt;sur lequel j'ai déjà écrit un article&lt;/a&gt;. Mais malgré cela, les goroutines ne sont pas si simples que cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce qui me surprend toujours, c&amp;#8217;est que le concept de goroutines existe depuis longtemps et est disponible dans de nombreux langages, langages qui fournissent également généralement de nombreux autres moyens pour le multithreading. j&amp;#8217;ai du mal à voir la &quot;révolution&quot; que serait Go dans ce domaine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_courbe_d_apprentissage_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Courbe d&amp;#8217;apprentissage&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go est simple à apprendre. Le langage est pauvre et sa syntaxe réduite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Contrairement à beaucoup de monde, je ne vois pas vraiment ça comme une bonne chose: le langage est tellement réduit que ça en devient handicapant.
Je pense également qu&amp;#8217;il faut du temps pour s&amp;#8217;habituer aux bonnes pratiques et éviter certains pièges. (cf le reste de l&amp;#8217;article).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_défauts_du_langage&quot;&gt;Les défauts du langage&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_le_typesystem_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Le typesystem&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce sujet a déjà été débattu en long, en large et en travers, mais je vais en remettre une couche.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aime Clojure entre autre parce qu&amp;#8217;il est dynamiquement typé. Quand je code en Clojure, les types ne me manquent pas, et de manière générale je ne pense pas qu&amp;#8217;un typage fort soit nécessaire pour réaliser des programmes corrects (surtout si à côté vous avez l&amp;#8217;immutabilité, des structures de données géniales, la programmation fonctionnelle &amp;#8230;&amp;#8203; Bref, ce que fournit Clojure).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais je sais aussi apprécier les langages fortement typés, comme Ocaml ou Rust. Il y a une certaine beauté dans les types comme &lt;code&gt;Result&lt;/code&gt; ou &lt;code&gt;Option&lt;/code&gt;, les algebraic data types, le pattern matching&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Golang se trouve dans la pire catégorie possible: statiquement typé mais avec un typesystem moisi.
Les types ne seront pas là pour vous aider, vous lutterez contre le typesystem. Vous n&amp;#8217;aurez pas accès aux generics, pas d&amp;#8217;algebraic data type, pas de pattern matching, pas de type Result/Option&amp;#8230;&amp;#8203; Bref, les types ne vous aideront pas tant que ça. Un exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je veux définir un type contenant les jours de la semaine. En Rust (que je n&amp;#8217;ai pas pratiqué depuis longtemps d&amp;#8217;ailleurs), j&amp;#8217;écrirais:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;pub enum Weekday {
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
        Sunday
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pourrais ensuite utiliser par exemple du pattern matching sur une variable de ce type, et j&amp;#8217;aurais la garantie à la compilation que tous les jours possibles sont traités par mon programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go (solution venant de la doc officielle), voici comment faire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;type Weekday int

const (
	Sunday Weekday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Saturday
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;iota&lt;/code&gt; indique que ma valeur &lt;code&gt;Sunday&lt;/code&gt; est initialisée à 0, et que les jours suivant vaudront &lt;code&gt;jours précédents + 1&lt;/code&gt; (donc &lt;code&gt;Monday&lt;/code&gt; = 1, &lt;code&gt;Tuesday&lt;/code&gt; = 2&amp;#8230;&amp;#8203;). Bien sûr, il sera facile de se retrouver dans des cas comme ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	var day Weekday = 10
	fmt.Printf(&quot;It compiles ! %d&quot;, day)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y aura aucune vérification ici que toutes les valeurs possibles de votre type &lt;code&gt;Weekday&lt;/code&gt; (qui n&amp;#8217;est qu&amp;#8217;un alias pour &lt;code&gt;int&lt;/code&gt; finalement) soient traitées. Pour être franc, ma première réaction quand j&amp;#8217;ai vu le système de iota a été:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/one_year_go/wtf_is_this.jpg&quot; alt=&quot;wtf is this shit&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_les_valeurs_par_défaut_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Les valeurs par défaut&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go, chaque type a sa valeur par défaut, et combiné au typesystem décrit précédemment, c&amp;#8217;est horrible. Je vais expliquer cela par un exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mettons que je veuille écrire un client Go pour &lt;a href=&quot;https://riemann.io/&quot;&gt;Riemann&lt;/a&gt;. Un &lt;code&gt;event&lt;/code&gt; Riemann possède un certain nombre de champ, tous optionnels.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Rust, la définition d&amp;#8217;un event donnerait à peu près:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;#[derive(Debug)]
pub enum Metric {
    Int64(i64),
    Double(f64),
    Float(f32)
}

type State = String;
type Service = String;
type Host = String;
type Description = String;
type Tag = String;
type Tags = Vec&amp;lt;Tag&amp;gt;;
type Ttl = f32;
type AttrKey = String;
type AttrValue = String;
type Attributes = HashMap&amp;lt;AttrKey, AttrValue&amp;gt;;

#[derive(Debug)]
pub struct Event {
    pub time: Option&amp;lt;DateTime&amp;lt;Utc&amp;gt;&amp;gt;,
    pub state: Option&amp;lt;State&amp;gt;,
    pub service: Option&amp;lt;Service&amp;gt;,
    pub host: Option&amp;lt;Host&amp;gt;,
    pub description: Option&amp;lt;Description&amp;gt;,
    pub tags: Option&amp;lt;Tags&amp;gt;,
    pub ttl: Option&amp;lt;Ttl&amp;gt;,
    pub attributes: Option&amp;lt;Attributes&amp;gt;,
    pub metric: Option&amp;lt;Metric&amp;gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme on peut le voir, la struct &lt;code&gt;Event&lt;/code&gt; a tous ses champs optionnels. J&amp;#8217;utilise également des alias pour représenter chaque champ. Enfin, mon champ &lt;code&gt;Metric&lt;/code&gt; peut avoir différents formats via une enum; &lt;code&gt;Int64&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt; ou &lt;code&gt;Double&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comment réaliser cela en Go ? On aura probablement une struct &lt;code&gt;Event&lt;/code&gt; contenant des champs:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;type Event struct {
// ???
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons par exemple le champ &lt;code&gt;description&lt;/code&gt;. On aura probablement dans notre struct &lt;code&gt;Description string&lt;/code&gt;. Sauf que&amp;#8230;&amp;#8203; la valeur par défaut d&amp;#8217;une &lt;code&gt;string&lt;/code&gt; est une chaîne vide (&lt;code&gt;&quot;&quot;&lt;/code&gt;).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lorsque je vais sérialiser mon event (en ce que vous voulez: json, protobuf&amp;#8230;&amp;#8203;), comment puis-je faire la différence entre &lt;code&gt;l&amp;#8217;utilisateur veur que la valeur de la description soit une chaîne vide&lt;/code&gt; et &lt;code&gt;l&amp;#8217;utilisateur n&amp;#8217;a pas défini l&amp;#8217;attribut description, et donc ne veut pas l&amp;#8217;envoyer&lt;/code&gt; ? Et bah vous pouvez pas.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ceci est un &lt;code&gt;ENORME&lt;/code&gt; problème. La première fois que vous le rencontrez, je vous garantis que vous pétez un plomb. Tout ça car le type Option n&amp;#8217;existe pas en Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/one_year_go/flip_go.png&quot; alt=&quot;flip go&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai déjà rencontré plusieurs fois ce cas. Par exemple, un appel de mise à jour d&amp;#8217;une API acceptait une liste de valeurs, et cette liste pouvait être vide (et dans ce cas côté serveur la liste était vide aussi).
Sauf qu&amp;#8217;il était &lt;code&gt;impossible&lt;/code&gt; de faire la distinction côté Golang entre une liste vide assignée par l&amp;#8217;utilisateur, et la liste vide de la valeur par défaut du type liste de Golang.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais revenons à notre client Riemann. On voit dans le type Rust que le champ &lt;code&gt;Metric&lt;/code&gt; peut avoir plusieurs valeurs. La solution naive en Go serait:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;Metricf float3
Metricd float64
Metrici int64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sauf que là aussi, toutes ces valeurs auront &lt;code&gt;0&lt;/code&gt; par défaut, et là encore aucun moyen de faire la distinction entre ce que veux l&amp;#8217;utilisateur et la valeur par défaut de golang. Donc vous finissez par faire:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;Metricf interface{} // Could be Int, Float32, Float64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le type &lt;code&gt;interface{}&lt;/code&gt; étant &lt;code&gt;nil&lt;/code&gt; par défaut. Et puis tant qu&amp;#8217;à faire des trucs dégueulasses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;if event.Metric != nil {
	switch reflect.TypeOf(event.Metric).Kind() {
	case reflect.Int, reflect.Int32, reflect.Int64:
		e.MetricSint64 = pb.Int64(reflect.ValueOf(event.Metric).Int())
	case reflect.Float32:
		e.MetricD = pb.Float64(reflect.ValueOf(event.Metric).Float())
	case reflect.Float64:
		e.MetricD = pb.Float64(reflect.ValueOf(event.Metric).Float())
	case reflect.Uint, reflect.Uint32, reflect.Uint64:
		e.MetricSint64 = pb.Int64(int64(reflect.ValueOf(event.Metric).Uint()))
	default:
		return nil, fmt.Errorf(&quot;Metric of invalid type (type %v)&quot;,
			reflect.TypeOf(event.Metric).Kind())
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;interface{}&lt;/code&gt; est d&amp;#8217;ailleurs un type largement utilisé en Go (faites quelques recherches sur vos projets Go favoris&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, le typesystem combiné aux valeurs par défaut est un cauchemar. Une solution est parfois d&amp;#8217;utiliser des pointeurs (les pointeurs pouvant être &lt;code&gt;nil&lt;/code&gt;), mais ça fait un peu mal de pourrir sa struct avec des pointeurs juste parce que le langage a été mal pensé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_les_pointeurs_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Les pointeurs&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, parlons en des pointeurs. Je cherche encore l&amp;#8217;intérêt d&amp;#8217;avoir des pointeurs dans un langage ayant un garbage collector. Il aurait été selon moi beaucoup plus simple d&amp;#8217;avoir un comportement des struct &quot;à la Java&quot; (passage par référence), et un passage par valeur pour certains types primitifs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Combiné aux problèmes concernant les valeurs par défaut exprimés précédemment (les pointeurs pouvant etre &lt;code&gt;nil&lt;/code&gt;), cela rajoute une difficulté de plus au langage.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_gestion_des_erreurs_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La gestion des erreurs&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un programme Go ressemble généralement à ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;foo, err := doFoo()
if err != nil {
	return nil, err
}
bar, err := doBar(foo)
if err != nil {
	return nil, err
}
baz, err := doBaz(bar)
if err != nil {
	return nil, err
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code est littéralement pollué par la gestion des erreurs. Outre l&amp;#8217;aspect visuel, il est très facile d&amp;#8217;oublier de retourner une erreur, ou bien de se tromper et de retourner &lt;code&gt;nil&lt;/code&gt; où on aurait dû retourner &lt;code&gt;err&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela est dû au fait que Golang, comme dit précédemment, ne dispose pas de type &lt;code&gt;Result&lt;/code&gt; nous permettant de vérifier à la compilation que nous avons géré tous les cas d&amp;#8217;erreurs possibles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go n&amp;#8217;a pas non plus d&amp;#8217;exceptions (je ne parlerais pas de &lt;code&gt;panic&lt;/code&gt;&amp;#8230;&amp;#8203;.), même si finalement le package &lt;a href=&quot;https://godoc.org/github.com/pkg/errors&quot;&gt;errors&lt;/a&gt; amène plus ou moins le concept de &quot;stacktraces&quot; à construire manuellement.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_gestion_des_dépendances_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La gestion des dépendances&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après une période chaotique où différents outils se tiraient la bourre (&lt;code&gt;glide&lt;/code&gt;, &lt;code&gt;godep&lt;/code&gt;&amp;#8230;&amp;#8203;), on a maintenant les &lt;a href=&quot;https://blog.golang.org/using-go-modules&quot;&gt;modules&lt;/a&gt;.
Mais bon, le principe reste le même: on récupère du code depuis Github. Si vous êtes un mainteneur de librairie Go, ne supprimez pas trop vite votre repository Git ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai aussi eu des expériences complètement hallucinantes (avec explosion au runtime) en utilisant la directive &lt;code&gt;replace&lt;/code&gt; dans un &lt;code&gt;go.mod&lt;/code&gt; (cela permet de remplacer une dépendance par un fork par exemple), mais n&amp;#8217;ayant jamais trop réussi à reproduire je n&amp;#8217;irais pas plus loin sur le sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_la_surcharge_de_fonction_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;La surcharge de fonction&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;est pas possible de définir une fonction avec plusieurs implémentations, ce qui est assez frustrant (il n&amp;#8217;est par exemple pas possible de définir les fonctions &lt;code&gt;add(i int)&lt;/code&gt; et &lt;code&gt;add(i int, j int&lt;/code&gt;) dans le même programme).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est quelque chose que j&amp;#8217;utilise énormément dans d&amp;#8217;autres langages, et devoir nommer différement des fonctions faisant la même chose donne un code plus difficile à maintenir&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_programmation_fonctionnelle_immutabilité_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;programmation fonctionnelle, immutabilité&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus en plus de langages incorporent des éléments fonctionnnels. Mais pas Go.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pas de fonctions de type &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;&amp;#8230;&amp;#8203; on fait de bonnes vieilles loop &lt;code&gt;for&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pas d&amp;#8217;immutabilité, vous vivrez dans un monde d&amp;#8217;effet de bord.&lt;br&gt;
Une erreur classique que tout le monde fait une fois dans sa vie:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func main() {
	toto := []int{1, 2, 3, 4, 5}
	for _, value := range toto {
		go func() {
			time.Sleep(1 * time.Second)
			fmt.Println(value)
		}()
	}
	time.Sleep(3 * time.Second)
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le résultat de ce programme est:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;5
5
5
5
5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En effet, la variable &lt;code&gt;value&lt;/code&gt; est mise à jour à chaque itération de la boucle ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme vous le voyez, j&amp;#8217;ai eu du mal à trouver des choses à dire dans la première section de l&amp;#8217;article.
Go est loin d&amp;#8217;être mon langage favoris. Pourtant, malgré ces défauts, ses avantages (écosystème, performances&amp;#8230;&amp;#8203;) font que je comprends tout à fait son utilisation aujourd&amp;#8217;hui dans certains contextes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quid des alternatives ? Si je veux un langage:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compilant en binaire statique facilement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Garbage collecté (donc exit Rust, je peux me permettre un garbage collector dans mes projets et j&amp;#8217;ai moyennement envie de gérer des lifetimes et les whatmille types de pointeurs de Rust).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec un écosystème correct (malheureusement, exit Ocaml, bien que j&amp;#8217;espère qu&amp;#8217;un jour cela changera.).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avec des performances correctes et prédictives.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne reste pas grand chose à part Go. Mais bon, voyons ce qui arrivera pour Go 2.0, peut être qu&amp;#8217;on aura des surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 13 Jun 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-05-28-ansible-common/
</guid>
<link>
https://mcorbin.fr/posts/2019-05-28-ansible-common/
</link>
<title>
Ansible: common roles considered harmful
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/ansible-common/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
C&amp;#8217;est un classique des projets Ansible: un rôle appelé &lt;code&gt;common&lt;/code&gt; ou assimilé. Vous savez, ce genre de rôles où l&amp;#8217;angoisse vous saisit quand vous l&amp;#8217;ouvrez. Voyons ensemble les problèmes de ce type de rôle, et parlons de la granularité des rôles Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_rôles_poubelles&quot;&gt;Les rôles poubelles&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce rôle &lt;code&gt;common&lt;/code&gt; est généralement un rôle poubelle. Tout ce que les gens ne savent pas où mettre va dans common. J&amp;#8217;ai travaillé dans plusieurs entreprises faisant du Ansible, et toutes avaient un rôle &lt;code&gt;common&lt;/code&gt;. J&amp;#8217;ai moi même contribué à un rôle common pendant quelque temps lors de ma première mission Ansible avant de le détruire définiivement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela donne généralement un rôle inmaintenable, faisant des tâches diverses et variées mais sans rapport entre elles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Prenons un rôle &lt;code&gt;common&lt;/code&gt; fictif. Ce rôle ferait peut être&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;La mise à jour de la distribuction Linux (Debian par exemple).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration des clés SSH de la machine.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration de base de syslog.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La configuration de DHCP.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Avec le temps, ce rôle va grossir, de nouvelles choses finiront dedans, et le rôle finit par devenir du gloubi boulga.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_common/gloubi_boulga.png&quot; alt=&quot;gloubi boulga&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Vous ne voulez pas en manger du gloubi boulga ? Vraiment pas ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce genre de rôle doit être explosé en plusieurs rôles, cbaque rôle devant faire une action spécifique. Vous pourriez par exemple avoir à la place de ce rôle &lt;code&gt;common&lt;/code&gt; des rôles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;debian&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;syslog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dhcp&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce sera beaucoup plus lisible, testable et maintenable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_granularité_des_rôles&quot;&gt;La granularité des rôles&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finalement, tout est une question de granularité. Je suis partisan d&amp;#8217;un découpage fin des rôles Ansible, chaque rôle ayant une petite responsabilité (cette expérience vient de l&amp;#8217;écriture et de la maintenance de &lt;code&gt;centaines&lt;/code&gt; de rôles dans différents contextes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Beaucoup de gens essayent de faire trop de choses au sein des rôles. Prenons par exemple un rôle installant &lt;code&gt;Kafka&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Vous utilisez Collectd dans votre entreprise. Est ce que ce rôle doit également déployer la configuration Collectd nécessaire pour monitorer Kafka ? La réponse est non. Cela donnerait un rôle inutilisable dans un autre contexte où Collectd n&amp;#8217;est pas utilisé.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Est ce que la remontée des logs doit être gérée dans le rôle ? Là encore, je préfère externaliser (même si ça se discute pour logrotate/syslog), car peut être que j&amp;#8217;utilise syslog-ng, ou bien filebeat, ou logstash. Je ne veux pas lier ces technologies à ce rôle.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les rôles &lt;code&gt;doivent rester simple&lt;/code&gt;, faire une seule chose et la faire bien.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un autre exemple: Vous voulez déployer Kubernetes avec Ansible. A votre avis, c&amp;#8217;est quoi le plus maintenable et le plus réutilisable niveau rôle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;common&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;worker&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;ou bien:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;kubelet&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kube-proxy&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kube-dns&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ssh&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;etcd&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;calico&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le second cas, il sera beaucoup plus simple de maintenir de petits rôles. Cela simplifiera aussi les déploiements, et évitera les accidents de type &lt;code&gt;oups, j&amp;#8217;ai redéployé kube-dns mais en fait ça a aussi upgrade etcd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_playbooks_à_la_rescousse&quot;&gt;Les playbooks à la rescousse&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a tendance à oublier les playbooks, et à ne les utiliser que pour appeler des rôles. Mais les playbooks sont également un super moyen d&amp;#8217;écrire des scénarios de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un rolling-upgrade d&amp;#8217;un cluster doit vivre dans un playbook, et non dans le rôle de l&amp;#8217;application par exemple. De même, pour de petites tâches comme lancer un &lt;code&gt;dist-upgrade&lt;/code&gt;, les playbooks font sens (pas la peine d&amp;#8217;utiliser un rôle pour ça).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Gardez des rôles simples, et vous aurez un déploiement simple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Tue, 28 May 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-05-01-meuse-rust-registry/
</guid>
<link>
https://mcorbin.fr/posts/2019-05-01-meuse-rust-registry/
</link>
<title>
Meuse, a free Rust private Registry
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/meuse-rust-registry/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Je m&amp;#8217;étais intéressé à Rust à sa sortie en version 1.0. Après avoir pas mal joué avec, j&amp;#8217;ai un peu mis de côté ce langage pour me consacrer à d&amp;#8217;autres choses. Mais une phrase de la &lt;a href=&quot;https://github.com/rust-lang/rust/blob/master/RELEASES.md#version-1340-2019-04-11&quot;&gt;release note&lt;/a&gt; de la version 1.34 m&amp;#8217;a interpellé: &lt;code&gt;You can now use alternative registries to crates.io.&lt;/code&gt; J&amp;#8217;avais trouvé mon prochain projet: écrire un registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_meuse_un_registry_pour_vos_crates&quot;&gt;Meuse, un registry pour vos crates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Meuse&lt;/code&gt; est un registry écrit en &lt;a href=&quot;https://clojure.org/&quot;&gt;Clojure&lt;/a&gt;. Mon objectif est de fournir un registry simple à déployer et à administrer. Le code est disponible &lt;a href=&quot;https://github.com/mcorbin/meuse&quot;&gt;sur Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le statut du projet est actuellement &lt;code&gt;ça marche sur ma machine&lt;/code&gt;. il reste &lt;code&gt;beaucoup&lt;/code&gt; de travail à faire, le code doit être remanié et beaucoup mieux testé. Toute la partie concernant l&amp;#8217;authentification et la gestion des tokens est manquante.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mon premier objectif était de poser les bases du projet de voir un peu les difficultés que j&amp;#8217;allais rencontrer. Mais j&amp;#8217;ai déjà quelque chose d&amp;#8217;intéressant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cargo publish --allow-dirty --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
warning: manifest has no license, license-file, documentation, homepage or repository.
See &amp;lt;http://doc.crates.io/manifest.html#package-metadata&amp;gt; for more info.
   Packaging testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish)
   Verifying testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish)
   Compiling testpublish v0.1.13 (/home/mathieu/prog/rust/testpublish/target/package/testpublish-0.1.13)

cargo yank --vers 0.1.13 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
        Yank testpublish:0.1.13

cargo yank --undo --vers 0.1.13 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
      Unyank testpublish:0.1.13

cargo owner --add user1 --registry custom    Updating `https://github.com/mcorbin/testregistry.git` index
       Owner added user(s) user1 as owner(s) of crate testpublish

cargo owner --list --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
user1 (user1)

cargo owner --remove user1 --registry custom
    Updating `https://github.com/mcorbin/testregistry.git` index
       Owner removing [&quot;user1&quot;] from crate testpublish

cargo search --registry custom &quot;project&quot; -v
testpublish = &quot;0.1.13&quot;    # This is a description of my project&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je peux aussi récupérer des dépendances depuis le registry ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_fonctionnement&quot;&gt;Fonctionnement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Meuse&lt;/code&gt; utilise &lt;code&gt;PostgreSQL&lt;/code&gt; comme base de données (crates et versions, categories, utilisateurs&amp;#8230;&amp;#8203;). La recherche (très basique pour l&amp;#8217;instant) est également implémentée grâce au type &lt;code&gt;TSVECTOR&lt;/code&gt; de PostgreSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les registries Rust utilisent également un repository Git pour stocker les metadata des crates (versions, est ce qu&amp;#8217;une crate est &lt;code&gt;yanked&lt;/code&gt; ou non&amp;#8230;&amp;#8203; cf la &lt;a href=&quot;https://doc.rust-lang.org/nightly/cargo/reference/registries.html&quot;&gt;documentation&lt;/a&gt;). &lt;code&gt;Meuse&lt;/code&gt; va donc également intéragir avec un repository Git quand une crate est publiée ou &quot;yankée&quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, les fichiers crates contenant le code source sont également gérés par &lt;code&gt;Meuse&lt;/code&gt; qui se charge de les sauvegarder sur disque et de les exposer via HTTP (mais je prévois quelques fonctionnalités de ce côté là, comme par exemple le fait de pouvoir pousser les crates sur un object store compatible S3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Donc si vous avez une instance &lt;code&gt;PostgreSQL&lt;/code&gt;, déployer votre registry ne sera que lancer un &lt;code&gt;java -jar&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_la_suite&quot;&gt;La suite&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le prochain mois sera consacré à stabiliser le projet, réécrire ce qui doit être réécrit, et ajouter la gestion des tokens,&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En plus de l&amp;#8217;API &lt;code&gt;crate&lt;/code&gt; utilisée par cargo, une autre API (que j&amp;#8217;ai déjà commencé) permettra de gérer les catégories de vos crates, les utilisateurs etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense également que j&amp;#8217;écrirais une CLI pour intéragir avec le projet. Par contre, je ne ferais pas d&amp;#8217;interface graphique (je suis trop mauvais en front et cela ne m&amp;#8217;intéresse pas vraiment), libre à vous de faire ça de votre côté si vous êtes motivés ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère pouvoir sortir une version à peu près fonctionnel avec un peu de documentation pour la fin du mois.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_appendice_pourquoi_clojure&quot;&gt;Appendice: pourquoi Clojure ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédement, &lt;code&gt;Meuse&lt;/code&gt; est écrit en Clojure. Parmis tous les langages que j&amp;#8217;ai utilisé Clojure est celui où je suis le plus productif.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;écosystème est très riche, avec des librairies de grandes qualitées (comme &lt;a href=&quot;https://github.com/ztellman/aleph&quot;&gt;Aleph&lt;/a&gt; ou &lt;a href=&quot;https://github.com/jkk/honeysql&quot;&gt;HoneySQL&lt;/a&gt;), et la façon de travailler avec le REPL (un &lt;code&gt;reloaded workflow&lt;/code&gt; avec &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;Mount&lt;/a&gt; dans mon cas, qui fera d&amp;#8217;ailleurs l&amp;#8217;objet d&amp;#8217;un article un jour ou l&amp;#8217;autre) est géniale.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On rajoute à ça un langage extrêmement bien designé, l&amp;#8217;immutabilité, il y a de quoi être heureux (et non, le typage statique ne me manque pas).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 01 May 2019 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-03-03-ebpf-xdp-introduction/
</guid>
<link>
https://mcorbin.fr/posts/2019-03-03-ebpf-xdp-introduction/
</link>
<title>
Introduction to eBPF and XDP
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/xdp-introduction/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Cela fait un moment que j&amp;#8217;entends parler de eBPF et de XDP (eXpress Data Path) mais je n&amp;#8217;avais pas vraiment eu l&amp;#8217;occasion de jouer avec. J&amp;#8217;ai donc décidé comme projet de week-end d&amp;#8217;écrire un programme XDP le plus simple possible permettant de filtrer les paquets pour une addresse IP donnée. Je présenterais comment ce programme fonctionne, comment le compiler et l&amp;#8217;exécuter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ebpf_et_xdp&quot;&gt;eBPF et XDP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne connais pas encore dans le détail ces technologies, donc n&amp;#8217;hésitez pas à me remonter mes eventuelles erreurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;eBPF est une technologie du kernel Linux permettant d&amp;#8217;écrire des programmes qui seront compilés en bytecode BPF. Ce bytecode est ensuite vérifié (certaines erreurs comme une lecture sans vérifier si la valeur lue est &lt;code&gt;null&lt;/code&gt; ne sont pas possibles empêchent la compilation) et exécuté dans une machine virtuelle présente dans le kernel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;eBPF peut être utilisé pour écrire des outils de monitoring (en attachant le programme pour réagir à des événements comme des appels systèmes par exemple). Ici, l&amp;#8217;intêret de eBPF est son faible impact sur les performances du système que l&amp;#8217;on instrumente.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais eBPF permet aussi d&amp;#8217;intéragir avec le réseau avec XDP (comme par exemple pour écrire un load balancer ou un firewall). Ici aussi, l&amp;#8217;intêret de XDP est qu&amp;#8217;il s&amp;#8217;exécute au plus prêt du hardware et permet donc d&amp;#8217;atteindre de très bonnes performances.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici une collection de liens avec plus d&amp;#8217;informations sur ces sujets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/ebpf.html&quot; class=&quot;bare&quot;&gt;http://www.brendangregg.com/ebpf.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html&quot; class=&quot;bare&quot;&gt;http://www.brendangregg.com/blog/2019-01-01/learn-ebpf-tracing.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.iovisor.org/technology/xdp&quot; class=&quot;bare&quot;&gt;https://www.iovisor.org/technology/xdp&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne sais pas pour vous, mais pour moi eBPF et XDP sont clairement le genre de technologies où même après lecture de 20 articles sur le sujet, je ne suis pas vraiment sûr de bien comprendre ce qu&amp;#8217;il se passe vraiment. J&amp;#8217;ai donc décidé de pratiquer un maximum pour mieux comprendre tout cela, et cet article sera (j&amp;#8217;espère !) le premier d&amp;#8217;une longue série.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour compiler un programme BPF, le plus simple semble de compiler directement le programme dans l&amp;#8217;arborescence du kernel Linux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On commence donc par cloner le kernel avec un &lt;code&gt;git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai également dû installer sur ma machine (Debian) un certain nombre de paquets. Peut être que vous en aurez d&amp;#8217;autres à installer (vous le saurez à la compilation): &lt;code&gt;apt-get install bison clang flex libelf-dev llvm&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allez maintenant à la racine du projet Linux, et exécutez &lt;code&gt;make headers_install&lt;/code&gt; puis &lt;code&gt;make menuconfig&lt;/code&gt; (pour cette phase, j&amp;#8217;ai tout simplement laissé la configuration par défaut).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous devriez maintenant pouvoir compiler les programmes BPF inclus dans le kernel avec &lt;code&gt;make samples/bpf/&lt;/code&gt; (attention, le &lt;code&gt;/&lt;/code&gt; est important à la fin) sans erreurs.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_mise_en_place_du_projet&quot;&gt;Mise en place du projet.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comme dit précédemment, mon but est d&amp;#8217;écrire un programme permettant de filtrer tous les paquets venant d&amp;#8217;une addresse IP donnée sur l&amp;#8217;interface localhost. Le nom de mon programme sera &lt;code&gt;xdp_ip_filter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_makefile&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Makefile&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons tout d&amp;#8217;abord rajouter dans le fichier &lt;code&gt;samples/bpf/Makefile&lt;/code&gt; les instructions pour compiler notre futur programme. Vous verrez dans ce fichier de multiples déclarations commençant par &lt;code&gt;hostprogs-y&lt;/code&gt;, rajouter la ligne &lt;code&gt;hostprogs-y += xdp_ip_filter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la même façon, rajoutez la ligne &lt;code&gt;xdp_ip_filter-objs := bpf_load.o xdp_ip_filter_user.o&lt;/code&gt; à l&amp;#8217;endroit où se trouve les déclarations commençant par &lt;code&gt;xdp_&lt;/code&gt;, puis &lt;code&gt;always += xdp_ip_filter_kern.o&lt;/code&gt; un peu plus loin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le Makefile est maintenant prêt.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_fichiers_du_projet&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Les fichiers du projet&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous allons travailler dans deux fichiers &lt;code&gt;samples/bpf/xdp_ip_filter_kern.c&lt;/code&gt; et &lt;code&gt;samples/bpf/xdp_ip_filter_user.c&lt;/code&gt;. Le fichier &lt;code&gt;kern&lt;/code&gt; contiendra le code qui sera compilé en bytecode BPF, le fichier &lt;code&gt;user&lt;/code&gt; sera notre point d&amp;#8217;entrée pour démarrer ce dernier. Je me référerais souvent à ces fichiers par les noms abrégés &lt;code&gt;user&lt;/code&gt; ou &lt;code&gt;kern&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le code de ces fichiers est disponible à ces deux emplacements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sur Github, avec la coloration syntaxique &lt;a href=&quot;https://github.com/mcorbin/blog/tree/master/resources/templates/static/ebpf_xdp&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sur ce site aux url suivantes: &lt;a href=&quot;../../static/ebpf_xdp/xdp_ip_filter_kern.c&quot;&gt;xdp_ip_filter_kern.c&lt;/a&gt; et &lt;a href=&quot;../../static/ebpf_xdp/xdp_ip_filter_user.c&quot;&gt;xdp_ip_filter_user.c&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut savoir que je n&amp;#8217;ai pas fait de C depuis &lt;strong&gt;très&lt;/strong&gt; longtemps (et j&amp;#8217;ai jamais pratiqué le C à haut niveau), donc mon code est assez moche (mais ce n&amp;#8217;est pas très grave pour cet exemple &lt;code&gt;¯_(ツ)_/¯&lt;/code&gt;).&lt;br&gt;
Je vous conseille également de lire cet article en ayant ouvert dans votre éditeur favoris les deux fichiers.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_xdp_ip_filter_kern_c&quot;&gt;xdp_ip_filter_kern.c&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après la déclaration des headers (que vous pouvez retrouver dans les liens mis au dessus), nous avons une première macro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#define bpf_printk(fmt, ...)                    \
({                              \
           char ____fmt[] = fmt;                \
           bpf_trace_printk(____fmt, sizeof(____fmt),   \
                ##__VA_ARGS__);         \
})&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette macro sera utilisée comme logger. Son fonctionnement n&amp;#8217;est pas important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_les_maps&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Les maps&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a maintenant une partie plus intéressante:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;struct bpf_map_def SEC(&quot;maps&quot;) ip_map = {
	.type        = BPF_MAP_TYPE_HASH,
	.key_size    = sizeof(__u32),
	.value_size  = sizeof(__u32),
	.max_entries = 1,
};

struct bpf_map_def SEC(&quot;maps&quot;) counter_map = {
	.type        = BPF_MAP_TYPE_PERCPU_ARRAY,
	.key_size    = sizeof(__u32),
	.value_size  = sizeof(__u64),
	.max_entries = 1,
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On définit ici deux &lt;code&gt;maps&lt;/code&gt;. Ces maps sont donc des associations clé/valeurs, et c&amp;#8217;est ces maps qui sont utilisées pour intéragir avec l&amp;#8217;extérieur (notre fichier &lt;code&gt;user&lt;/code&gt; que je présenterais tout à l&amp;#8217;heure). Le programme &lt;code&gt;user&lt;/code&gt; pourra lire et écrire dans ces maps, même chose pour le programme &lt;code&gt;kern&lt;/code&gt;. Vous pouvez donc voir les maps comme de la mémoire partagée entre les deux programmes, et c&amp;#8217;est d&amp;#8217;ailleurs à ma connaissance la seule façon de faire communiquer ces programmes entre eux.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première map &lt;code&gt;ip_map&lt;/code&gt; est une map de type &lt;code&gt;BPF_MAP_TYPE_HASH&lt;/code&gt; (voyez ça comme une map classique), dont les clés et valeurs sont des &lt;code&gt;u32&lt;/code&gt; (en effet, une addresse IP v4 peut être représentée sous forme d&amp;#8217;un simple integer). Cette map ne peut contenir qu&amp;#8217;une entrée (cf &lt;code&gt;max_entries&lt;/code&gt;).&lt;br&gt;
Cette map servira au programme &lt;code&gt;user&lt;/code&gt; à transmettre au programme &lt;code&gt;kern&lt;/code&gt; l&amp;#8217;adresse IP à filtrer (et ici, on ne filtre qu&amp;#8217;une IP donc la map n&amp;#8217;aura qu&amp;#8217;une entrée).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La seconde map nommée &lt;code&gt;counter_map&lt;/code&gt; est une map de type &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt;. Ce type indique que l&amp;#8217;on aura en fait une map par core de notre CPU (si vous avez 8 cores, vous aurez 8 maps). Ces map serviront à compter par core combien de paquets ont été filtrés. Le type &lt;code&gt;ARRAY&lt;/code&gt; indique également que la clé de notre map sera entre &lt;code&gt;0&lt;/code&gt; et &lt;code&gt;max_entries -1&lt;/code&gt; (donc dans notre cas nous n&amp;#8217;aurons qu&amp;#8217;une entrée pour la clé &lt;code&gt;0&lt;/code&gt;). On aura donc pour chaque core une map dont la valeur pour la clé &lt;code&gt;0&lt;/code&gt; contiendra le nombre de paquets filtrés par ce core.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_1.png&quot; alt=&quot;maps xdm et abpf&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_le_code&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Le code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Récupération de l&amp;#8217;IP à filtrer&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, nous avons une fonction prenant en paramètre une struct &lt;code&gt;xdp_md&lt;/code&gt;. Cette struct contiendra le paquet réseau avec lequel nous allong intéragir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;SEC(&quot;xdp_ip_filter&quot;)
int _xdp_ip_filter(struct xdp_md *ctx) {
  // key of the maps
  u32 key = 0;
  // the ip to filter
  u32 *ip;

  bpf_printk(&quot;starting xdp ip filter\n&quot;);

  // get the ip to filter from the ip_filtered map
  ip = bpf_map_lookup_elem(&amp;amp;ip_map, &amp;amp;key);
  if (!ip){
    return XDP_PASS;
  }
  bpf_printk(&quot;the ip address to filter is %u\n&quot;, ip);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La première chose à faire est de récupérer dans la map &lt;code&gt;ip_map&lt;/code&gt; l&amp;#8217;ip addresse que nous voulons filtrer. Pour cela, nous utilisons &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; sur &lt;code&gt;ip_map&lt;/code&gt; avec comme clé &lt;code&gt;0&lt;/code&gt; (rappelez vous, notre map n&amp;#8217;a qu&amp;#8217;un élément). Comme dit précédemment, l&amp;#8217;IP retournée par &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; est sous format &lt;code&gt;u32&lt;/code&gt; en &lt;code&gt;little endian&lt;/code&gt; (par exemple 192.168.1.78 &amp;#8658; 0xC0A8014E en hexadécimal &amp;#8658; on lit à l&amp;#8217;envers &amp;#8658; 0x4E0180C0 &amp;#8658; 1308721344 en base 10).&lt;br&gt;
Vous pouvez voir également que j&amp;#8217;utilise &lt;code&gt;bpf_printk&lt;/code&gt; comme un logger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_2.png&quot; alt=&quot;lookup map ebpf&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Récupération de l&amp;#8217;IP source du paquet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Maintenant, nous voulons récupérer l&amp;#8217;adresse IP source du paquet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  void *data_end = (void *)(long)ctx-&amp;gt;data_end;
  void *data     = (void *)(long)ctx-&amp;gt;data;
  struct ethhdr *eth = data;

  // check packet size
  if (eth + 1 &amp;gt; data_end) {
    return XDP_PASS;
  }

  // check if the packet is an IP packet
  if(ntohs(eth-&amp;gt;h_proto) != ETH_P_IP) {
    return XDP_PASS;
  }

  // get the source address of the packet
  struct iphdr *iph = data + sizeof(struct ethhdr);
  if (iph + 1 &amp;gt; data_end) {
    return XDP_PASS;
  }
  u32 ip_src = iph-&amp;gt;saddr;
  bpf_printk(&quot;source ip address is %u\n&quot;, ip_src);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous commençons par récupérer la donnée contenue dans &lt;code&gt;ctx&lt;/code&gt; grâce à &lt;code&gt;ctx&amp;#8594;data&lt;/code&gt;, et un pointer sur la fin du paquet via &lt;code&gt;(void *)(long)ctx&amp;#8594;data_end&lt;/code&gt;. Ensuite, on assigne &lt;code&gt;data&lt;/code&gt; à une struct de type &lt;code&gt;ethhdr&lt;/code&gt; (représentant une trame Ethernet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On doit ensuite vérifier que &lt;code&gt;eth + 1&lt;/code&gt; ne dépasse pas &lt;code&gt;data_end&lt;/code&gt; en mémoire. Ce check est obligatoire (sans cela, le programme refuse de compiler). Si la taille est supérieuse, on ne fait rien (on laisse passer le paquet en retournant &lt;code&gt;XDP_PASS&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On vérifie ensuite que le paquet est un paquet IP via &lt;code&gt;if(ntohs(eth&amp;#8594;h_proto) != ETH_P_IP)&lt;/code&gt;. Si le paquet n&amp;#8217;est pas un paquet IP, il ne nous intéresse pas, donc là aussi on retourne &lt;code&gt;XDP_PASS&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous créons maintenant une nouvelle struct de type &lt;code&gt;iphdr&lt;/code&gt; à partir de la struct ethernet, nous refaisons également une vérification (obligatoire) sur &lt;code&gt;data_end&lt;/code&gt;, puis nous récupérons enfin l&amp;#8217;IP source du paquet via &lt;code&gt;iph&amp;#8594;saddr&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Filtrer le paquet&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a maintenant l&amp;#8217;IP source, nous allons la comparer avec l&amp;#8217;IP que nous avons récupérée dans la map en début de programme:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  // drop the packet if the ip source address is equal to ip
  if (ip_src == *ip) {
    u64 *filtered_count;
    u64 *counter;
    counter = bpf_map_lookup_elem(&amp;amp;counter_map, &amp;amp;key);
    if (counter) {
      *counter += 1;
    }
    return XDP_DROP;
  }
  return XDP_PASS;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on compare &lt;code&gt;ip_src&lt;/code&gt; avec &lt;code&gt;ip&lt;/code&gt;. Si le paquet source doit être filtré, on incrémente dans la map &lt;code&gt;counter_map&lt;/code&gt; le compteur de paquet filtré (en utilisant encore la clé &lt;code&gt;0&lt;/code&gt;) via &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; (qui retourne un pointeur dont on peut donc incrémenter la valeur), et on filtre le paquet en retournant &lt;code&gt;XDP_DROP&lt;/code&gt;. Sinon, on retourne &lt;code&gt;XDP_PASS&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est tout pour le programme &lt;code&gt;kern&lt;/code&gt; !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_xdp_ip_filter_user_c&quot;&gt;xdp_ip_filter_user.c&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_le_code_2&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Le code&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce fichier commence comme l&amp;#8217;autre par l&amp;#8217;inclusion de nombreux fichiers headers, puis de:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;static int ifindex = 1; // localhost interface ifindex
static __u32 xdp_flags = 0;

// unlink the xdp program and exit
static void int_exit(int sig) {
  printf(&quot;stopping\n&quot;);
  bpf_set_link_xdp_fd(ifindex, -1, xdp_flags);
  exit(0);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On définit ici une variable &lt;code&gt;ifindex&lt;/code&gt; qui est l&amp;#8217;index de l&amp;#8217;interface &lt;code&gt;localhost&lt;/code&gt; (je parlerais plus en détail de cela plus loin), puis &lt;code&gt;xdp_flags&lt;/code&gt; qui vaut zéro.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La fonction &lt;code&gt;int_exit&lt;/code&gt; est une fonction servant à stopper le programme &lt;code&gt;kern&lt;/code&gt; en cas de signal, via &lt;code&gt;bpf_set_link_xdp_fd&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;La fonction main, récupération de l&amp;#8217;IP&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici maintenant la fonction &lt;code&gt;main&lt;/code&gt; qui sera exécutée pour démarrer notre programme BPF:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int main(int argc, char **argv) {
  const char *optstr = &quot;i:&quot;;
  char *filename=&quot;xdp_ip_filter_kern.o&quot;;
  char *ip_param = &quot;127.0.0.1&quot;;
  int opt;
  // maps key
  __u32 key = 0;

  while ((opt = getopt(argc, argv, optstr)) != -1) {
    switch(opt)
      {
      case 'i':
        ip_param=optarg;
      break;
    }
  }

  // convert the ip string to __u32
  struct sockaddr_in sa_param;
  inet_pton(AF_INET, ip_param, &amp;amp;(sa_param.sin_addr));
  __u32 ip = sa_param.sin_addr.s_addr;
  printf(&quot;the ip to filter is %s/%u\n&quot;, ip_param, ip);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on définit quelques variables comme les paramètres attendues à &lt;code&gt;main&lt;/code&gt;, le nom du fichier &lt;code&gt;.o&lt;/code&gt; (xdp_ip_filter_kern.o) qui devra être lancé, et une valeur par défaut pour l&amp;#8217;IP à filtrer (&lt;code&gt;127.0.0.1&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On récupère l&amp;#8217;IP à filtrer (qui sera passé via l&amp;#8217;option &lt;code&gt;-i&lt;/code&gt; au programme), et on la convertit en un u32 (par exemple &quot;192.168.1.78&quot; &amp;#8658; 0xC0A8014E &amp;#8658; on lit à l&amp;#8217;envers &amp;#8658; 0x4E0180C0 &amp;#8658; 1308721344 en base 10).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Changements de limits&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit dans beaucoup de programmes eBPF que les limites du système sont augmentées, j&amp;#8217;ai laissé ce comportement:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// change limits
  struct rlimit r = {RLIM_INFINITY, RLIM_INFINITY};
  if (setrlimit(RLIMIT_MEMLOCK, &amp;amp;r)) {
    perror(&quot;setrlimit(RLIMIT_MEMLOCK, RLIM_INFINITY)&quot;);
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Chargement du programme eBPF&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;// load the bpf kern file
  if (load_bpf_file(filename)) {
    printf(&quot;error %s&quot;, bpf_log_buf);
    return 1;
  }

  if (!prog_fd[0]) {
    printf(&quot;load_bpf_file: %s\n&quot;, strerror(errno));
    return 1;
  }

  // add sig handlers
  signal(SIGINT, int_exit);
  signal(SIGTERM, int_exit);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on charge le fichier  &lt;code&gt;xdp_ip_filter_kern.o&lt;/code&gt; (qui contient notre fichier précédent compilé), et on ajoute le handler &lt;code&gt;int_exit&lt;/code&gt; sur les signaux &lt;code&gt;SIGINT&lt;/code&gt; et &lt;code&gt;SIGTERM&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ajout de l&amp;#8217;IP à filtrer dans la map&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut maintenant ajouter l&amp;#8217;IP que nous voulons filtrer dans la map nommée &lt;code&gt;ip_map&lt;/code&gt; que nous avons utilisée dans le fichier &lt;code&gt;xdp_ip_filter_kern.c&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  // set the first element of the first map to the ip passed as a parameter
  int result = bpf_map_update_elem(map_fd[0], &amp;amp;key, &amp;amp;ip, BPF_ANY);
  if (result != 0) {
    fprintf(stderr, &quot;bpf_map_update_elem error %d %s \n&quot;, errno, strerror(errno));
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on met à jour la map avec la fonction &lt;code&gt;bpf_map_update_elem&lt;/code&gt;. &lt;code&gt;map_fd[0]&lt;/code&gt; retourne la première map définie dans le fichier &lt;code&gt;kern&lt;/code&gt;, qui est bien notre map &lt;code&gt;ip_map&lt;/code&gt; (l&amp;#8217;ordre de déclaration des maps a donc de l&amp;#8217;importance !). La map contiendra donc maintenant pour la clé &lt;code&gt;0&lt;/code&gt; l&amp;#8217;IP à filtrer (et donc le programme &lt;code&gt;kern&lt;/code&gt; pourra la récupérer comme vu précédemment).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_3.png&quot; alt=&quot;ebpf update map&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ajout du programme XDP sur une interface&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans la fonction &lt;code&gt;int_exit&lt;/code&gt; vue précédemment, nous appelions &lt;code&gt;bpf_set_link_xdp_fd&lt;/code&gt; pour stopper le programme XDP, en utilisant notamment la variable &lt;code&gt;ifindex&lt;/code&gt;. En fait, un programme XDP est lié à une interface (et dans &lt;code&gt;int_exit&lt;/code&gt;, nous le détachions donc de l&amp;#8217;interface).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut donc dans notre &lt;code&gt;main&lt;/code&gt; l&amp;#8217;attacher à l&amp;#8217;interface dont nous voulons filtrer les paquets:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;// link the xdp program to the interface
  if (bpf_set_link_xdp_fd(ifindex, prog_fd[0], xdp_flags) &amp;lt; 0) {
    printf(&quot;link set xdp fd failed\n&quot;);
    return 1;
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, on attachons à l&amp;#8217;interface &lt;code&gt;localhost&lt;/code&gt; notre programme XDP.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Collecte des statistiques&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A partir de ce moment, notre programme XDP est démarré, et commence à filtrer des paquets. Nous voulons savoir combien de paquets ont été filtrés, en récupérant pour chaque core de notre CPU la valeur dans la map &lt;code&gt;counter_map&lt;/code&gt; vue précédemment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  int i, j;

  // get the number of cpus
  unsigned int nr_cpus = bpf_num_possible_cpus();
  __u64 values[nr_cpus];

  // &quot;infinite&quot; loop
  for (i=0; i&amp;lt; 1000; i++) {
    // get the values of the second map into values.
    assert(bpf_map_lookup_elem(map_fd[1], &amp;amp;key, values) == 0);
    printf(&quot;%d\n&quot;, i);
    for (j=0; j &amp;lt; nr_cpus; j++) {
      printf(&quot;cpu %d, value = %llu\n&quot;, j, values[j]);
    }
    printf(&quot;\n\n&quot;);
    sleep(2);
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rappelez vous, la map &lt;code&gt;counter_map&lt;/code&gt; est par core (type &lt;code&gt;BPF_MAP_TYPE_PERCPU_ARRAY&lt;/code&gt;). Nous récupérons notre nombre de core via &lt;code&gt;bpf_num_possible_cpus&lt;/code&gt;, puis nous créons deux boucles:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Une pour périodiquement récupérer les valeurs de la map, toutes les 2 secondes. &lt;code&gt;bpf_map_lookup_elem&lt;/code&gt; est appelé sur la map numéro 2 (&lt;code&gt;map_fd[1]&lt;/code&gt;, donc &lt;code&gt;counter_map&lt;/code&gt;), pour la clé &lt;code&gt;0&lt;/code&gt; pour réaliser cela. Les valeurs sont stockées dans le tableau &lt;code&gt;values&lt;/code&gt; (car il y a une valeur par core).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une qui va intérer sur le tableau &lt;code&gt;values&lt;/code&gt; pour afficher à l&amp;#8217;écran les statistiques pour chaque core.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ebpf_xdp/ebpf_maps_4.png&quot; alt=&quot;ebpf update map&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ici, on voit que bpf_map_lookup_elem récupère pour chaque map &quot;counter_map&quot; de chaque core la valeur à l&amp;#8217;index 0 et la stocke dans un tableau nommé values, où l&amp;#8217;index du tableau est le numéro du core.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Fin du programme&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A la fin du programme, on détache le programme de l&amp;#8217;interface localhost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;  printf(&quot;end\n&quot;);
  // unlink the xdp program
  bpf_set_link_xdp_fd(ifindex, -1, xdp_flags);
  return 0;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est maintenant terminé, place à la compilation et aux tests !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tester_le_programme&quot;&gt;Tester le programme&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lancer &lt;code&gt;make samples/bpf/&lt;/code&gt;, cela devrait compiler sans erreurs votre programme. Vous pouvez maintenant le tester. Par exemple, filtrons tous les paquets venant de l&amp;#8217;IP &lt;code&gt;192.168.1.78&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cd samples/bpf/
sudo ./xdp_ip_filter -i &quot;192.168.1.78&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;output devrait être le suivant:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;the ip to filter is 192.168.1.78/1308731584
0
cpu 0, value = 0
cpu 1, value = 0
cpu 2, value = 0
cpu 3, value = 0
cpu 4, value = 0
cpu 5, value = 0
cpu 6, value = 0
cpu 7, value = 0
cpu 8, value = 0
cpu 9, value = 0
cpu 10, value = 0
cpu 11, value = 0
cpu 12, value = 0
cpu 13, value = 0
cpu 14, value = 0
cpu 15, value = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez vérifier que votre programme &lt;code&gt;kern&lt;/code&gt; est bien attaché à l&amp;#8217;interface localhost en appelant &lt;code&gt;ip link list&lt;/code&gt;. une ligne &lt;code&gt;prog/xdp&lt;/code&gt; devrait être rajoutée sur l&amp;#8217;interface:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ip link list
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 xdpgeneric qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    prog/xdp id 69 tag 1ddc7360e5987edf&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez d&amp;#8217;ailleurs à tout moment détacher les programmes XDP de votre interface via la commande &lt;code&gt;ip link set dev lo xdp off&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Testons maintenant si notre programme marche. Pour cela, j&amp;#8217;utilise &lt;a href=&quot;https://scapy.net/&quot;&gt;scapy&lt;/a&gt; pour crafter des paquets réseaux. Installez le (via &lt;code&gt;pip&lt;/code&gt; ou via le gestionnaire de paquet de votre distribution). Puis en root, ouvrez un interpréteur python avec &lt;code&gt;python&lt;/code&gt; et envoyez un paquet ICMP ayant comme source &lt;code&gt;192.168.1.78&lt;/code&gt; vers &lt;code&gt;localhost&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from scapy.all import  *
conf.L3socket=L3RawSocket
sr1(IP(src=&quot;192.168.1.78&quot;, dst=&quot;127.0.0.1&quot;)/ICMP())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La réponse n&amp;#8217;arrivera jamais, car le paquet a été filtré par notre programme ! D&amp;#8217;ailleurs, l&amp;#8217;output de votre programme devrait être:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cpu 0, value = 0
cpu 1, value = 0
cpu 2, value = 0
cpu 3, value = 0
cpu 4, value = 0
cpu 5, value = 0
cpu 6, value = 0
cpu 7, value = 0
cpu 8, value = 0
cpu 9, value = 1
cpu 10, value = 0
cpu 11, value = 0
cpu 12, value = 0
cpu 13, value = 0
cpu 14, value = 0
cpu 15, value = 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, mon core numéro 9 a filtré le paquet. Réessayez, et vous verrez les compteurs s&amp;#8217;incrémenter !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pouvez également consulter les logs du program &lt;code&gt;kern&lt;/code&gt; (l&amp;#8217;output de &lt;code&gt;bpf_printk&lt;/code&gt;) en allant lire le fichier &lt;code&gt;/sys/kernel/debug/tracing/trace&lt;/code&gt;, n&amp;#8217;hésitez pas à rajouter plus de logs si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;ai appris beaucoup de choses sur eBPF et XDP en écrivant ce programme. C&amp;#8217;est définitivement une technologie puissante, très intéressante, mais pas forcément évidente à utiliser (surtout pour quelqu&amp;#8217;un n&amp;#8217;ayant pas d&amp;#8217;expérience en développement kernel).
Certains projets comme &lt;a href=&quot;https://github.com/iovisor/bcc&quot;&gt;bcc&lt;/a&gt; ou &lt;a href=&quot;https://github.com/iovisor/bpftrace&quot;&gt;bpftrace&lt;/a&gt; ont l&amp;#8217;air plus accessibles, mais écrire un peu de C permet de rentrer rapidement dans le vif du sujet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce ne sera sûrement pas mon seul article sur le sujet, mon prochain projet sera peut être d&amp;#8217;écrire un petit outil pour collecter une métrique quelconque de mon système par exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 03 Mar 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2019-02-15-kubernetes-overdose/
</guid>
<link>
https://mcorbin.fr/posts/2019-02-15-kubernetes-overdose/
</link>
<title>
Kubernetes overdose
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sur le net, en conférence, en entreprise, tout le monde en parle: Kubernetes est sur toutes les lèvres. Il permet de résoudre tous nos problèmes, réchauffement climatique et faim dans le monde inclus (surtout couplé à une architecture microservice !). Quand est-il vraiment en réalité ? Existe-il des alternatives ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_docker&quot;&gt;Docker&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La route vers Kubernetes commence généralement par Docker. Les entreprises veulent absolument packager leurs applications avec Docker, pour différentes raisons. Parfois, elles pensent que cela simplifiera le packaging de leurs applications (pas de dépendances système, image immutable&amp;#8230;&amp;#8203;), parfois le déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je trouve que Docker est une technologie intéressante, mais comme toute technologie ce n&amp;#8217;est pas la solution à tout. J&amp;#8217;aimerais que les gens ayant un existant et voulant se tourner vers Docker se posent déjà ces questions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avez vous une plateforme d&amp;#8217;intégration continu ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvez vous mettre en production vos applications à tout moment ? Changer rapidement la version d&amp;#8217;une application sur un environnement ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etes vous capable de reconstruire rapidement un environnement semblable à la prod &quot;from scratch&quot; ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pouvez vous facilement provisioner de nouveaux serveurs ? Votre infrastructure est-elle totalement automatisée ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Etes vous tolérant aux pannes ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitorez-vous vos applications et serveurs (logs, metriques, alertes en cas d&amp;#8217;incidents&amp;#8230;&amp;#8203;) ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous répondez &quot;non&quot; à ces questions, vous n&amp;#8217;avez probablement pas la maturité suffisante pour faire des conteneurs en production. Pensez vous vraiment que rajouter Docker à une architecture bancale réglera vos soucis ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour l&amp;#8217;anecdote personnelle, j&amp;#8217;ai connu une entreprise qui voulait se mettre à Docker, par contre les outils d&amp;#8217;automatisations comme Ansible étaient interdit car &lt;code&gt;trop avancés/compliqués&lt;/code&gt;. Et ça, c&amp;#8217;est le problème numéro un de Docker: la technologie est souvent utilisée car &quot;aujourd&amp;#8217;hui il faut tout passer sur Docker&quot;, sans vraiment de justifications.&lt;br&gt;
En passant, c&amp;#8217;est la même chose pour les architectures microservices que l&amp;#8217;on voit fleurir un peu partout on ne sait trop pourquoi (et qui d&amp;#8217;ailleurs viennent souvent avec Kubernetes).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_orchestrateurs&quot;&gt;Orchestrateurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ca y est, l&amp;#8217;entreprise commence à build ses premiers conteneurs, il faut maintenant les déployer. Pas question de lancer des &lt;code&gt;docker run&lt;/code&gt; à la main (ou avec Ansible ou autre) sur les machines, il faut un orchestrateur pour les gérer !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Premier problème: aujourd&amp;#8217;hui, Kubernetes a littéralement cannibalisé l&amp;#8217;écosystème conteneur: Rancher s&amp;#8217;est tourné vers Kubernetes, Docker Swarm se rend compatible Kubernetes, on entend plus trop parler non plus de Mesos/Marathon, le seul orchestrateur faisant un peu de résistance étant &lt;code&gt;Nomad&lt;/code&gt; de &lt;code&gt;Hashicorp&lt;/code&gt; (mais qui reste largement moins populaire que Kubernetes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère que d&amp;#8217;autres solutions arriveront à tirer leurs épingles du jeu. Je ne veux personnellement pas être forcé à utiliser Kubernetes pour l&amp;#8217;unique raison que c&amp;#8217;est la seule solution sur le marché.
De plus, comme je le montrerais ensuite, Kubernetes est une solution complexe à mettre en oeuvre.&lt;br&gt;
Je suis persuadé qu&amp;#8217;il existe un marché pour un orchestrateur simple, permettant de déployer des conteneurs sur quelques dizaines ou centaines de noeuds (ce qui couvrirait le besoin de 99 % des entreprises).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_intégration_de_kubernetes_dans_un_existant&quot;&gt;L&amp;#8217;intégration de Kubernetes dans un existant&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, vous décidez de partir sur Kubernetes. Un grand nombre de gens arrêtent leur analyse ici quand il s&amp;#8217;agit de déployer Kubernetes en production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pourtant, Kubernetes va amener plein de nouvelles problématiques, par exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Comment je monitore les composants de mon cluster ainsi que les conteneurs tournant dessus ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère les logs de mes conteneurs ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment le gère le cycle de vie de mon Cluster Kubernetes (déploiement, montée de version, ajout/suppression de noeuds&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère mes manifests et le déploiement de ces manifests sur le cluster ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je construis mes images Docker ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Comment je gère le réseau de mon cluster/route vers mes pods/m&amp;#8217;intègre avec les services qui sont hors du cluster ?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/pelote.png&quot; alt=&quot;etes vous prêt à dérouler la pelote de laine Kubernetes ?&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Etes vous prêt à dérouler la pelote Kubernetes jusqu&amp;#8217;au bout ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous n&amp;#8217;utilisiez pas Prometheus pour le monitoring de vos applications ? Pas de chance, c&amp;#8217;est plus ou moins l&amp;#8217;unique solution aujourd&amp;#8217;hui pour monitorer Kubernetes. Votre solution de collecte de logs a du mal à travailler avec Kubernetes ? Là aussi, on vous dira de passer sur fluentd, outil conseillé par la Cloud Native Computing Foundation (CNCF).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sans trop vous en rendre compte, vous commencez à refondre l&amp;#8217;intégralité de votre SI pour intégrer &lt;strong&gt;une&lt;/strong&gt; techno. Ce n&amp;#8217;est pas Kubernetes qui s&amp;#8217;adaptera à vous, c&amp;#8217;est à vous de vous adapter à Kubernetes, et ce coût d&amp;#8217;adaptation est généralement élevé.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_du_cluster&quot;&gt;Gestion du cluster&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et ensuite, il vous restera à trouver comment déployer et mettre à jour le cluster. Je ne crois pas du tout aux solutions comme &lt;code&gt;kops&lt;/code&gt; ou &lt;code&gt;kubespray&lt;/code&gt;. Ces solutions sont le meilleur moyen de se retrouver avec un cluster configuré de la mauvaise façon: en gros, c&amp;#8217;est comme ça qu&amp;#8217;on finit avec son cluster ouvert sur Internet.&lt;br&gt;
Ce &lt;a href=&quot;https://stripe.com/blog/operating-kubernetes&quot;&gt;super article&lt;/a&gt; de Julia Evans me confirme dans mon opinion que ces solutions de déploiement de cluster ne sont pas faites pour de la production. C&amp;#8217;est seulement en déployant vous même Kubernetes que vous comprendrez comment tous ses composants s&amp;#8217;assemblent et se paramètrent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ensuite, amusez vous bien avec la gestion des permissions (RBAC). J&amp;#8217;espère aussi que vous avez un bon ingénieur réseau sous la main (Calico, Flannel, BGP, VXLAN &amp;#8230;&amp;#8203; ça vous parle ?).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais c&amp;#8217;est pas fini ! Il faut aussi que vous passiez sur Istio/Envoy comme Ingress (c&amp;#8217;est votre archi revenant de $CONFERENCE qui vous l&amp;#8217;a dit), que vous ajoutiez un outil de tracing (bah oui, sinon comment vous allez analyser performances dans tout ce machin) etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_buzzword_driven_development&quot;&gt;Buzzword driven development&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La communauté est responsable de cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Jamais on ne parle aux conférences de la difficulté de maintenir un cluster Kubernetes en production, des problématiques de monitoring, des problèmes réseaux ou même des problèmes qu&amp;#8217;apportent les systèmes distribués de façon générale&amp;#8230;&amp;#8203;&lt;br&gt;
Non, on veut faire du &quot;Wahoo&quot;, on montre que nous on peut &quot;scaler&quot;, on présente de beaux dashboards&amp;#8230;&amp;#8203; Peut être aussi parce que pas mal de gens présentant Kubernetes ne l&amp;#8217;utilisent en fait pas en production ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On parle également rarement du &lt;code&gt;pourquoi Kubernetes&lt;/code&gt;. Ou alors on l&amp;#8217;évoque en disant &lt;code&gt;comme ça je peux déployer facilement plusieurs instances de mon application&lt;/code&gt;. Très bien, mais on sait faire cela depuis très longtemps. Qu&amp;#8217;apporte vraiment Kubernetes ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Quand je vais à une conférence et que les talks sur Kubernetes s&amp;#8217;enchainent toute la journée, je comprends également que les gens aient l&amp;#8217;impression d&amp;#8217;être &quot;à la traine&quot; si ils ne font pas eux même du Kubernetes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est le problème avec le buzzword driven dévelopment: ça s&amp;#8217;auto alimente. On a des gens qui vont faire du Kubernetes car c&amp;#8217;est la techno du moment, et ces gens là parleront ensuite de Kubernetes à des gens qui se diront &lt;code&gt;ah mais moi j&amp;#8217;en fais pas, faut que je m&amp;#8217;y mette aussi !&lt;/code&gt;.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Puis les entreprises s&amp;#8217;y mêlent (rien ne me fait plus marrer que les boites qui se vendent en disant &lt;code&gt;&lt;strong&gt;nous&lt;/strong&gt;, on fait du Kubernetes et du microservice&lt;/code&gt; comme si c&amp;#8217;était un gage de qualité). On commence à voir des offres d&amp;#8217;emplois demandant de l&amp;#8217;expérience en Kubernetes, les nouveaux projets partent directement sur Kubernetes pour attirer le chaland, et la boucle est bouclée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On ne parle également jamais des solutions alternatives qui ont fait leurs preuves. Pourquoi cette course en avant sur Docker et Kubernetes alors qu&amp;#8217;il est tout à fait possible d&amp;#8217;avoir des architectures robustes (et beaucoup plus simples) sans tout cela ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je pense également qu&amp;#8217;une partie du problème est que ces technologies sont généralement poussées voir mises en place par des développeurs. Quand j&amp;#8217;étais en société de service, il était rare de voir de vrais profils &lt;code&gt;ops&lt;/code&gt; sur les projets. On avait donc les devs n&amp;#8217;ayant jamais gêré un serveur de leur vie qui poussaient allègrement Kubernetes en production.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/dev_prod.jpg&quot; alt=&quot;Enfin, les développeurs ont pris le contrôle de la production&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Enfin, les développeurs ont pris le contrôle de la production !&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela se voit aussi aux conférences &quot;mainstream&quot; (du moins en France): généralement pas d&amp;#8217;ops dans les speakers ni dans le public. Le devops en 2019, c&amp;#8217;est un développeur Java faisant vite fait du Docker, du Jenkins et qui sait écrire un playbook Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_commencer_par_le_commencement&quot;&gt;Commencer par le commencement&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Essayez déjà de répondre aux questions que je pose en début d&amp;#8217;article. Mettez en place une plateforme de continuous delivery, gérez vos logs et métriques correctement, automatisez le provisioning de votre infrastructure et vos déploiements&amp;#8230;&amp;#8203;&lt;br&gt;
Cela est 100 % réalisable sans conteneurs et sans Kubernetes (ce sera probablement l&amp;#8217;occasion d&amp;#8217;un prochain article de ma part).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, faire tourner Kubernetes ne vous dispensera pas de provisioner votre infrastructure de façon automatisée, d&amp;#8217;avoir du monitoring solide, une plateforme d&amp;#8217;intégration continue efficace&amp;#8230;&amp;#8203; Kubernetes viendra &lt;code&gt;en plus&lt;/code&gt; de tout cela.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce que vous ferez ne sera pas perdu. Vous aurez également &lt;code&gt;toujours&lt;/code&gt; des applications qui tourneront en dehors du cluster, qui elles aussi devront être correctement déployées.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_kubernetes_as_a_service&quot;&gt;Kubernetes as a service&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La majorité des entreprises n&amp;#8217;ont selon moi pas le besoin (et souvent pas les compétences) de déployer du Kubernetes par elles même. L&amp;#8217;avenir est-il sur les solutions de Kubernetes as a service que l&amp;#8217;on rencontre de plus en plus ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peut être, mais je ne crois pas au &lt;code&gt;tout Kubernetes&lt;/code&gt; Il y aura toujours des services et applications en dehors du cluster (car certains trucs n&amp;#8217;ont pas d&amp;#8217;intêret à être &quot;Dockerisés&quot;). Vouloir partir sur du Kubernetes trop vite est clairement une erreur selon moi.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Kubernetes est une technologie intéressante, et je suis sûr qu&amp;#8217;elle résout de nombreux problêmes dans de nombreuses entreprises.
Sauf que tout le monde n&amp;#8217;a pas les mêmes besoins que Netflix, et ce n&amp;#8217;est pas une solution miracle.&lt;br&gt;
Il est également de notre responsabilité de proposer à nos entreprises et clients les technologies permettant de mener à bien un projet, et non de se construire un CV (pratique malheureusement courante).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;les grands gagnants de tout cela ? Les sociétés de service. Entre la réécriture des applications monolithiques en microservice, les passages sur Kubernetes, le déploiement et maintien de tout ça en production, c&amp;#8217;est le jackpot. Il y a quelques années, la vache à lait était le Big Data et le NoSQL, on peut maintenant rajouter Kubernetes et les microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le projet avec une architecture simple et efficace qui devrait demander 5 personnes en demande 50 aujourd&amp;#8217;hui, pour un truc souvent compliqué à maintenir en prod.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/k8s_overdose/money.jpg&quot; alt=&quot;personnes dormant sur un lit de billet&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Les commerciaux de votre société de service quand le client accepte la refonte de son application legacy en microservice.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;la mode dans pas mal de groupes étant de ne plus recruter de profils technique en interne et de tout déléguer aux sociétés de service n&amp;#8217;arrange rien: les entreprises ne sont même plus capables de juger si ce qu&amp;#8217;on leur vend est pertinent ou pas. Ce sujet mériterait d&amp;#8217;ailleurs un article à lui tout seul&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, ne sautez pas trop vite dans le train Kubernetes. Choisissez vos technologies pour de bonnes raisons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A suivre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 15 Feb 2019 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-12-03-golang-tomb/
</guid>
<link>
https://mcorbin.fr/posts/2018-12-03-golang-tomb/
</link>
<title>
Golang: gérez l'arrêt de vos systèmes avec Tomb
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On cite souvent Go comme un langage de programmation facilitant la programmation concurrente et parallèle via les goroutines. Les goroutines ne sont pourtant pas si faciles que ça à utiliser correctement. Voyons comment utiliser la bibliothèque &lt;code&gt;tomb&lt;/code&gt; pour les contrôler.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_une_goroutine_réalisant_des_requêtes_http&quot;&gt;Une goroutine réalisant des requêtes HTTP&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici un simple programme réalisant plusieurs choses:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Un channel nommé &lt;code&gt;stop&lt;/code&gt; est initialisé.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une goroutine est démarrée. Cette goroutine va réaliser une requête HTTP sur &lt;code&gt;&lt;a href=&quot;https://mcorbin.fr&quot; class=&quot;bare&quot;&gt;https://mcorbin.fr&lt;/a&gt;&lt;/code&gt; toutes les 2 secondes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Une deuxième goroutine est démarrée. Cette goroutine écoute les signaux &lt;code&gt;SIGTERM&lt;/code&gt; envoyés à l&amp;#8217;application et poussera une valeur dans le channel &lt;code&gt;stop&lt;/code&gt; lors de la réception d&amp;#8217;un signal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&amp;#8592;stop&lt;/code&gt; bloquera tant qu&amp;#8217;une valeur n&amp;#8217;aura pas été poussée dans ce channel (ce qui ne se produit qu&amp;#8217;en cas de réception d&amp;#8217;un &lt;code&gt;SIGTERM&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;
)

func main() {
	stop := make(chan string)
	go func() {
		for {
			time.Sleep(2 * time.Second)

			r, err := http.Get(&quot;https://mcorbin.fr&quot;)
			if err != nil {
				fmt.Println(err)
			}
			fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
		}
	}()
	go func() {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		stop &amp;lt;- &quot;done&quot;
	}()
	&amp;lt;-stop
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous compilez et lancez ce programme, vous devrez avoir cet output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./example
200
200
200
200
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En récupérant le PID du processus (avec &lt;code&gt;ps aux&lt;/code&gt; par exemple), vous pouvez envoyer un signal &lt;code&gt;SIGTERM&lt;/code&gt; avec la commande &lt;code&gt;kill PID&lt;/code&gt;. L&amp;#8217;output de votre programme devrait être:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
200
received signal terminated&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce programme semble fonctionner comme attendu mais présente un défaut majeur. Ici, la goroutine réalisant les requêtes HTTP sera terminée brutalement lors de l&amp;#8217;arrêt du programme. Ce n&amp;#8217;est pas très grave, mais imaginons que votre goroutine fasse des choses plus importantes. Peut être aimeriez-vous la terminer proprement ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela serait par exemple possible en utilisant un autre channel qui lui contrôlera l&amp;#8217;arrêt de la goroutine. Le programme suivant réalise cela:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;
)

func main() {
	stop := make(chan string)
	done := make(chan string)
	go func() {
		for {
			time.Sleep(2 * time.Second)
			select {
			case &amp;lt;-done:
				fmt.Println(&quot;terminate the goroutine&quot;)
				stop &amp;lt;- &quot;done&quot;
				return
			default:
				r, err := http.Get(&quot;https://mcorbin.fr&quot;)
				if err != nil {
					fmt.Println(err)
				}
				fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
			}
		}
	}()
	go func() {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		done &amp;lt;- &quot;done&quot;
	}()
	&amp;lt;-stop
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, la goroutine gérant les signaux poussera une valeur dans le channel &lt;code&gt;done&lt;/code&gt; en cas de &lt;code&gt;SIGTERM&lt;/code&gt;. Ce channel est ensuite utilisé dans la première goroutine, qui captera cette valeur, poussera une nouvelle valeur dans le channel &lt;code&gt;stop&lt;/code&gt; ce qui terminera le programme.
De cette façon, vous avez la garantie que le traitement dans la clause &lt;code&gt;default&lt;/code&gt; du &lt;code&gt;select&lt;/code&gt; se terminera avant l&amp;#8217;arrêt du programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;inconvénient de ce genre de système est la multiplication des channels, et le manque de gestion d&amp;#8217;erreurs (la goroutine ne peut pas informer si elle s&amp;#8217;est correctement terminée ou non).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tomb&quot;&gt;Tomb&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://godoc.org/gopkg.in/tomb.v2&quot;&gt;Tomb&lt;/a&gt; est une petite bibliothèque permettant de gérer de façon efficace l&amp;#8217;arrêt de vos goroutines. Voici le programme précédent réécrit en utilisant &lt;code&gt;tomb&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-golang&quot; data-lang=&quot;golang&quot;&gt;package main

import (
	&quot;fmt&quot;
	&quot;net/http&quot;
	&quot;os&quot;
	&quot;os/signal&quot;
	&quot;syscall&quot;
	&quot;time&quot;

	&quot;gopkg.in/tomb.v2&quot;
)

func main() {
	var t tomb.Tomb
	t.Go(func() error {
		for {
			time.Sleep(2 * time.Second)
			select {
			case &amp;lt;-t.Dying():
				fmt.Println(&quot;terminate the goroutine&quot;)
				return nil
			default:
				r, err := http.Get(&quot;https://mcorbin.fr&quot;)
				if err != nil {
					fmt.Println(err)
				}
				fmt.Printf(&quot;%d\n&quot;, r.StatusCode)
			}
		}
	})
	t.Go(func() error {
		sig := make(chan os.Signal, 1)
		signal.Notify(sig, syscall.SIGTERM)
		s := &amp;lt;-sig
		fmt.Printf(&quot;received signal %s\n&quot;, s)
		t.Kill(nil)
		return nil
	})
	err := t.Wait()
	if err != nil {
		fmt.Println(err)
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, une variable &lt;code&gt;t tomb.Tomb&lt;/code&gt; est déclarée. Pas besoin de plus pour initialiser une tomb, les valeurs par défaut suffisent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ensuite que les goroutines sont démarrées via &lt;code&gt;t.Go(&amp;#8230;&amp;#8203;)&lt;/code&gt;. Cette fonction est semblable à la fonction &lt;code&gt;go&lt;/code&gt; de Golang, sauf qu&amp;#8217;ici la tomb &quot;controlera&quot; la goroutine. De plus, l&amp;#8217;argument de &lt;code&gt;t.Go(&amp;#8230;&amp;#8203;)&lt;/code&gt; doit forcément être une fonction retournant une erreur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Autre changement, nous vérifions si notre goroutine se termine en consommant le channel &lt;code&gt;t.Dying()&lt;/code&gt;.&lt;br&gt;
Ensuite, dans notre goroutine gérant les signaux, la fonction &lt;code&gt;t.Kill(nil)&lt;/code&gt; est appelé en cas de &lt;code&gt;SIGTERM&lt;/code&gt;. Cette fonction placera la tomb dans l&amp;#8217;état &lt;code&gt;dying&lt;/code&gt;, et fermera le channel &lt;code&gt;t.Dying()&lt;/code&gt; (ce qui terminera donc notre première goroutine).&lt;br&gt;
Le paramètre de la fonction &lt;code&gt;Kill&lt;/code&gt; est la raison de l&amp;#8217;état de l&amp;#8217;arrêt de la goroutine, et doit être une &lt;code&gt;error&lt;/code&gt; ou &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_gestion_des_erreurs&quot;&gt;Gestion des erreurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La fonction passée en paramètre de &lt;code&gt;t.Go&lt;/code&gt; doi, comme dit précédemment, forcément retourner une erreur. D&amp;#8217;ailleurs, voici ce que la documentation de &lt;code&gt;tomb&lt;/code&gt; indique à son sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;If f returns a non-nil error, t.Kill is called with that error as the death reason parameter.&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est donc possible de terminer une tomb en retournant une erreur depuis la goroutine, la fonction &lt;code&gt;Kill&lt;/code&gt; n&amp;#8217;a donc pas pas être appelée explicitement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La raison (e.g l&amp;#8217;erreur) de la mort de la goroutine peut donc avoir deux sources: l&amp;#8217;appel manuel à &lt;code&gt;t.Kill&lt;/code&gt; en passant une valeur non &lt;code&gt;nil&lt;/code&gt;, ou bien via une goroutine retournant une erreur.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans mon code précédent, j&amp;#8217;appelle également &lt;code&gt;err := t.Wait()&lt;/code&gt;. La fonction &lt;code&gt;Wait()&lt;/code&gt; va bloquer jusqu&amp;#8217;à ce que la tomb meurt, et que &lt;code&gt;toutes les goroutines&lt;/code&gt; gérées par la tomb soient terminées. La fonction retourne ensuite la raison de la mort de la goroutine.&lt;br&gt;
Cette fonction a l&amp;#8217;avantage de nous garantir que les goroutines sont bien terminées lorsqu&amp;#8217;elle se &quot;débloque&quot; (mais attention aux deadlocks !).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;autres fonctions existent, comme &lt;code&gt;Alive&lt;/code&gt; ou &lt;code&gt;Dead&lt;/code&gt;, et sont très bien expliquées dans la  &lt;a href=&quot;https://godoc.org/gopkg.in/tomb.v2&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Petite précision sur &lt;code&gt;Wait()&lt;/code&gt;: la fonction bloquera pour toujours si aucune goroutine n&amp;#8217;est managée par la tomb (cf &lt;a href=&quot;https://github.com/go-tomb/tomb/issues/17&quot;&gt;cette issue&lt;/a&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_context&quot;&gt;Context !&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Go, on utilise généralement les &lt;a href=&quot;https://golang.org/pkg/context/&quot;&gt;context&lt;/a&gt; pour annuler/arrêter une requêtes, gérer des timeouts etc&amp;#8230;&amp;#8203; Cet article n&amp;#8217;a pas vocation à présenter les context en détail, mais il est à noter que &lt;code&gt;tomb&lt;/code&gt; supporte les context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le bloc &lt;code&gt;default&lt;/code&gt; de notre première goroutine pourrait par exemple ressembler à ça:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;ctx := t.Context(nil)
timeoutCtx, cancel := context.WithTimeout(ctx, 3*time.Second)
defer cancel()
req, err := http.NewRequest(&quot;GET&quot;, &quot;https://mcorbin.fr&quot;, nil)
if err != nil {
	return err
}
req = req.WithContext(timeoutCtx)
client := http.DefaultClient
r, err := client.Do(req)
if err != nil {
	return err
}
fmt.Printf(&quot;%d\n&quot;, r.StatusCode)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, nous créons un premier context depuis la tomb, puis un second context (gérant le timeout) depuis le premier context.&lt;br&gt;
Lorsque la tomb sera tuée, le context sera automatiquement terminé également, ce qui peut s&amp;#8217;avérer utile pour être sûr que certains appels (ici notre appel HTTP) soient terminés le plus vite possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pourrez par exemple voir ce genre de messages lorsque vous envoyez un &lt;code&gt;SIGTERM&lt;/code&gt; à l&amp;#8217;application:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./example
200
received signal terminated
Get https://mcorbin.fr: context canceled&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;tomb&lt;/code&gt; est une bibliothèque extrêmement pratique, et est une brique de base pour mes projets Go. N&amp;#8217;hésitez pas à utiliser plusieurs tomb dans vos programmes, rien de nous force à contrôler toutes vos goroutines avec la même tomb (ce qui peut s&amp;#8217;avérer dangereux).&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;espère vous avoir convaincu de l&amp;#8217;utilité de cette bibliothèque ;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 03 Dec 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-05-12-ansible-naming/
</guid>
<link>
https://mcorbin.fr/posts/2018-05-12-ansible-naming/
</link>
<title>
Ansible naming conventions
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When using Ansible, it&amp;#8217;s important to define naming conventions and to apply them for all your roles and playbooks. Here are mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_all_variables_should_be_snake_case&quot;&gt;All variables should be snake_case&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest rule:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;myappBindIp: &quot;127.0.0.1&quot; # not good
myapp_bin_Ip: &quot;127.0.0.1&quot; # not good
myapp_bind_ip: &quot;127.0.0.1&quot; # good&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_roles_and_groups_names&quot;&gt;Roles and groups names&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use kebab-case for my roles and groups names (&lt;code&gt;haproxy&lt;/code&gt;, &lt;code&gt;kafka-manager&lt;/code&gt;&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_variables_defined_in_a_role&quot;&gt;Variables defined in a role&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All variables defined in a role (&lt;code&gt;defaults/main.yml&lt;/code&gt;, &lt;code&gt;vars/main.yml&lt;/code&gt;) should be prefixed with the role name. It prevents collisions between variables and also allows to instantly know at what role a variable belongs to. For example, a role installing HAProxy will probably need a variable specifying the version in &lt;code&gt;defaults/main.yml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;version: &quot;1.8&quot; # not good
haproxy_version: &quot;1.8&quot; # good&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Sometimes, it&amp;#8217;s tempting to use the same variable name in two roles if the variables should always have the same value (because being overrided somewhere). I think it&amp;#8217;s better to create one variable per role no matter what. For example, if we have &lt;code&gt;role-a&lt;/code&gt; and &lt;code&gt;role-b&lt;/code&gt;, and each one need to know a (common) database name, we could do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;role-a/defaults/main.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_a_database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;role-b/defaults/main.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_b_database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/app.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;database_name: &quot;foo&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/role-a.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_a_database_name: &quot;{{ database_name }}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;group_vars/role-b.yml&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;role_b_database_name: &quot;{{ database_name }}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;&lt;code&gt;inventories/hosts&lt;/code&gt;&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;[app:children]
role-a
role-b

[role-a]
host1

[role-b]
host2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, each role has a specific variable defined for the database name. If the database name should always be the same, i can define a parent group (&lt;code&gt;app&lt;/code&gt;) and two child groups (one for each role, &lt;code&gt;role-a&lt;/code&gt; and &lt;code&gt;role-b&lt;/code&gt;). I can now share a variable between groups in the &lt;code&gt;group_vars&lt;/code&gt; files.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This approach avoids side effects between roles, and simplifies future refactoring.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_registered_variables&quot;&gt;Registered variables&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I usually prefix registered variables by &lt;code&gt;_&amp;lt;rolename&amp;gt;&lt;/code&gt;, to differentiate them from defaults variables.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_handlers_names&quot;&gt;Handlers names&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s also important to name correctly your handlers. My convention is: &lt;code&gt;&amp;lt;target&amp;gt; | &amp;lt;action&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;- name: haproxy | reload
  become: true
  service:
    name: haproxy
    state: reloaded

- name: apt | update cache
  become: true
  apt:
    update_cache: yes&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naming is super important. This will greatly simplify the maintenance of your Ansible projects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sat, 12 May 2018 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-02-08-spring-generateur/
</guid>
<link>
https://mcorbin.fr/posts/2018-02-08-spring-generateur/
</link>
<title>
Spring, générateurs, des amis qui vous veulent du bien
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, j&amp;#8217;ai vu passer un tweet qui fut la goutte d&amp;#8217;eau après des mois de frustrations avec Spring. Il faut que je vous parle de Spring. Spring ? C&amp;#8217;est LE framework web Java. Il faut dire que c&amp;#8217;est tellement simple, surtout avec Spring Boot et un générateur du type JHipster. Simple, rly ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_simple_rly&quot;&gt;Simple, rly ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On le sait tous au fond de nous, Spring n&amp;#8217;est pas simple. Sous le capot, ça fait beaucoup, beaucoup de choses.&lt;br&gt;
Des états mutables partout, rapidement des dizaine de classes dans le projet (surtout quand on rajoute bonne vieille archi N tiers resources services repository DAO DTO VO WTF, et les mappers entre chaque classe), un arbre de dépendance chaotique avec des conflits permanents entre dépendances (merci les spring boot starter pour rajouter un peu plus de chaos dans l&amp;#8217;arbre de dépendance), toujours 10 façons de faire les choses, des montées de versions compliquées, des surcouches de surcouches, l&amp;#8217;injection de dépendance qui devient vite un bordel sans nom&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Même les experts sur la techno passeront de longues heures de debugging dans les tréfonds du framework et de Stackoverflow, car au fond personne ne sait vraiment pourquoi son bean est à null.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/spring/fine.jpg&quot; alt=&quot;everything is fine&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt; Cette image de Kyle Kingsbury tirée d&amp;#8217;un talk sur &lt;a href=&quot;http://jepsen.io/&quot;&gt;jepsen&lt;/a&gt; résume bien la situation &lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rajoutez à tout ça du Spring Security, du Spring Data, un Spring Cloud, des abstractions louches du type Spring Kafka, un peu d&amp;#8217;AspectJ ou encore un bon vieux Hibernate des familles, et bienvenue en enfer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bon, au moins, vous aurez le temps de prendre votre café le temps que votre microservice démarre.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_générateurs&quot;&gt;Les générateurs&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais heureusement, les générateurs type JHipster sont là pour nous sauver. En un clic, j&amp;#8217;ai un projet qui démarre.&lt;br&gt;
Un projet qui démarre, mais avec une archi prédifinie probablement non adaptée à votre use case et difficilement modifiable sans tout péter. Un projet qui utilise vous ne savez quoi comme librairie, configuré vous ne savez comment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Votre pom fait également maintenant plus de 1000 lignes, vous tirez des dizaines de dépendances, un gros tas de plugins Maven. Vous ne maitrisez plus votre projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La slide suivante, tirée du célèbre &lt;a href=&quot;https://www.infoq.com/presentations/Simple-Made-Easy&quot;&gt;Simple Made Easy&lt;/a&gt; de Rich Hickey résume là encore parfaitement la situation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/spring/simple.jpg&quot; alt=&quot;simple made easy&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring et les générateurs sont faciles. Vous avez une appli qui boot en 2 minutes, mais je reste persuadé que sur le long terme, vous êtes perdant (du vécu sur un gros projet).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, une autre citation du talk est parfaitement dans le sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the word in this case is about being familiar.&lt;br&gt;
&lt;br&gt;
I think that, collectively, we are infatuated with these two notions of easy. We are just so self-involved in these two aspects; it&amp;#8217;s hurting us tremendously. Right? All we care about is, you know, can I get this instantly and start running it in five seconds? It could be this giant hairball that you got, but all you care is, you know, can you get it.
 [&amp;#8230;&amp;#8203;]&lt;br&gt;
&lt;br&gt;
In particular, if you want everything to be familiar, you will never learn anything new because it can&amp;#8217;t be significantly different from what you already know and not drift away from the familiarity.
[&amp;#8230;&amp;#8203;]&lt;br&gt;
&lt;br&gt;
And it is, and I think you really have to ask yourself, you know, are you programming with a loom? You know, you&amp;#8217;re having a great time. You&amp;#8217;re throwing that shuttle back and forth. And what&amp;#8217;s coming out the other side is this knotted, you know, mess. I mean it may look pretty, but you have this problem. Right? What is the problem? The problem is the knitted castle problem. Right?&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bon je vais m&amp;#8217;arrêter là avec les citations du talk car en fait je me rend compte que je pourrais mettre ici tout le transcript.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un projet informatique, c&amp;#8217;est pas une conférence où je montre que je peux boot une appli en 30 minutes sous les applaudissements de la salle.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_lock_in&quot;&gt;Lock in&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous avez commencé votre projet avec Spring, et maintenant vous voulez changer sans tout péter car Spring ne vous convient plus.&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On entre dans le fameux débat framework vs librairie. Un framework comme Spring conditionnera votre façon de coder, posera un cadre extrêmement rigide sur ce que vous pouvez faire, et il sera très dur de sortir de ce cadre. C&amp;#8217;est généralement à ce moment que les gros hacks pour contourner le framework apparaissent dans le projet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous êtes malheureusement condamné à utiliser Spring jusqu&amp;#8217;à la mort du projet, deal with it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_spring_5&quot;&gt;Spring 5&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Bob, revenant du DevoxxFR&lt;/strong&gt;: Mais Spring 5 arrive, c&amp;#8217;est reactive !&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt;: Oui mais peut être que ce paradigme-&lt;br&gt;
&lt;strong&gt;Bob&lt;/strong&gt;: Non mais mon programme sera reactive ! Spring en reactive c&amp;#8217;est génial ! En plus je peux le faire en Kotlin !&lt;br&gt;
&lt;strong&gt;Alice&lt;/strong&gt;: &amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Oui, j&amp;#8217;aurais pû mettre des balises &amp;lt;rant&amp;gt;&amp;lt;/rant&amp;gt; autour de ce post, et c&amp;#8217;est peut être légèrement (?) exagéré. Vous ne serez probablement pas d&amp;#8217;accord avec moi.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pas grave, suis un sysadmin au quotidien, donc Spring ou pas Spring finalement&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/gif/dontcare.gif&quot; alt=&quot;i don&amp;#8217;t care&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 08 Feb 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2018-01-26-ansible-templating/
</guid>
<link>
https://mcorbin.fr/posts/2018-01-26-ansible-templating/
</link>
<title>
Ansible role configuration: best practice
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s take for example HAProxy. This wonderful piece of software can be configured with hundreds of options. How to write an Ansible role to handle this, AND share this role accross multiple projects/teams/companies ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_naive_solution_the_boss_template&quot;&gt;The naive solution: the boss template&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you use Ansible, you may have met the boss template: a big template, with dozens of variables (frequently nested) to handle all available configuration options, {% if %} and {% for %} jinja2 everywhere&amp;#8230;&amp;#8203; And when someone needs a new option, a new variable is added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Theses roles are nightmares to maintain. For &lt;a href=&quot;https://www.haproxy.org/download/1.8/doc/configuration.txt&quot;&gt;HAproxy&lt;/a&gt;, your template will be huge. Same thing for other softwares (softwares like Kafka, Elasticsearch&amp;#8230;&amp;#8203; also have a lot of configuration options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, these roles are impossible to share between teams/open source, because they are often designed for a specific company use case, with a specific configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_move_configuration_outside_of_the_role&quot;&gt;Move configuration outside of the role.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s continue with HAProxy. Just write a simple HAProxy role: installing HAProxy, templating a default configuration, and dealing with restart/reload on configuration change. But let the person using the role override the default configuration files.&lt;br&gt;
You can see my HAProxy role &lt;a href=&quot;https://github.com/mcorbin/haproxy-ansible-role&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;code&gt;defaults/main.yml&lt;/code&gt;, define a variable containing a list of templates (HAProxy does not support loading configuration from a directory, so these files will be assembled together by the role):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_templates:
  - src: haproxy.config.j2
    dest: 01_haproxy_config&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;haproxy.config.j2&lt;/code&gt; contains the default HAProxy configuration (the same you have when you install HAProxy using &lt;code&gt;apt-get&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, in &lt;code&gt;playbook_dir&lt;/code&gt; you will probably have this arborescence:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;playbook.yml
group_vars/
    haproxy.yml
templates/
    haproxy/
         my-config.j2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can now provide his own configuration for HAProxy, by overriding &lt;code&gt;haproxy_templates&lt;/code&gt; in &lt;code&gt;group_vars/haproxy.yml&lt;/code&gt; for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;haproxy_templates:
  - src: haproxy/my-config.j2
    dest: 01_my_config&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The user can put everything he wants in &lt;code&gt;my-config.j2&lt;/code&gt;, use his own configuration variables in the file without polluting the role.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The role stay simple and the user can do everything he wants.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Moving the configuration out of a role is often the right thing to do. Just let the user override the whole role templates, and don&amp;#8217;t over conplexify the role itself. Simplicity is the key.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 26 Jan 2018 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-12-03-velocity-1/
</guid>
<link>
https://mcorbin.fr/posts/2017-12-03-velocity-1/
</link>
<title>
Velocity Londres 2017: jour 1
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;étais à O&amp;#8217;Reilly Velocity Londres les 19 et 20 Octobre 2017, et cet article résumera ma première journée de conférence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je ne parlerais pas forcément de tous les talks ou keynotes que j&amp;#8217;ai vu, mais ceux qui furent selon moi les plus intéressants.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_l_organisation_de_la_conférence&quot;&gt;L&amp;#8217;organisation de la conférence&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, bravo aux organisateurs !
La conférence est parfaitement organisée.
Elle se déroulait à l&amp;#8217;hôtel Hilton Métropole, et on sent le professionnalisme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y a de l&amp;#8217;espace, les salles sont grandes, bien équipées, l&amp;#8217;image et le son sont parfaits. Il y avait en tout 6 salles de conférences (donc 6 talks en parallèle), et les keynotes étaient réalisées dans une énorme salle (en fait 2 salles classiques rassemblées).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il y avait également un grande salle contenant l&amp;#8217;espace sponsor avec des stands. C&amp;#8217;est aussi dans cette salle que l&amp;#8217;on prenait le repas du midi notamment.
J&amp;#8217;ai d&amp;#8217;ailleurs trouvé ce repas assez moyen, mais bon ce n&amp;#8217;est pas le plus important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant les sujets des talks et keynotes, c&amp;#8217;est technique, assez spécialisé, et pile dans mon domaine. En même temps, une conférence qui titre &lt;code&gt;Build &amp;amp; maintain complex distributed systems&lt;/code&gt;, ça ne pouvait que m&amp;#8217;intéresser :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_keynotes&quot;&gt;Keynotes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Après être arrivé assez tôt, avoir pris mon petit déjeuner (gratuit chaque matin de conférence) et participé à un speed networking (histoire de faire connaissance avec d&amp;#8217;autres participants et de parler un peu anglais), je m&amp;#8217;installe confortablement pour les keynotes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cloud_native_security_threat_or_opportunity&quot;&gt;Cloud native: Security threat or opportunity?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une Keynote intéressante fut celle de Liz Rice sur la sécurité des architectures dites &lt;strong&gt;Cloud natives&lt;/strong&gt;: les vm, conteneurs, orchestrateurs, et tout ce qui va avec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout d&amp;#8217;abord, Liz Rice nous explique qu&amp;#8217;aujourd&amp;#8217;hui, on le sait pas forcément où le code tourne.
On a des centaines de VM/serveurs, certaines applications sont composées de dizaines de microservices, et les containers et orchestrateurs rajoutent une couche de complexité au dessus de tout ça.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker expliquait aussi la différence entre &lt;strong&gt;l&amp;#8217;ancien temps&lt;/strong&gt; (ou le présent si vous travaillez pour un grand groupe Français ^^) où les serveurs étaient patchés (à la main ?) et maintenus en vie sur de longues périodes, là ou aujourd&amp;#8217;hui on va plutôt essayer de mettre en place des infrastructures immuables (en gros on pète et on reconstruit).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais quid de la sécurité dans ces nouvelles architectures ? Vu la multiplicité des briques logicielles et la complexité des architectures, elle doit être intégrée directement dans le pipeline de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, on peut scanner nos containers avant et après le build pour rechercher des vulnérabilités: voir les versions des produits déployés, vérifier que l&amp;#8217;utilisateur lançant un process n&amp;#8217;est pas root, vérifier l&amp;#8217;isolation du container par rapport à l&amp;#8217;host&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant l&amp;#8217;host, des OS spécialisés pour faire tourner des containers (CoreOS, RancherOS&amp;#8230;&amp;#8203;) peuvent également être une solution. Je n&amp;#8217;ai personnellement pas d&amp;#8217;avis sur ces OS, ne les ayant jamais utilisés.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bien sûr, les IDS traditionnels peuvent toujours être utilisés si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Concernant le réseau, là aussi il faut sécuriser les communications, que ce soit au niveau chiffrement, authentification, ou restrictions (j&amp;#8217;évite que des services qui n&amp;#8217;ont pas à discuter entre eux puissent le faire).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Enfin, des protections &quot;au runtime&quot; comme SELinux ou AppArmor ont été évoquées.
La présentation s&amp;#8217;est finie sur une petite démo de la faille Shellshock où un serveur httpd pouvait exécuter du code arbitraire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, une keynote intéressante, mais un détail méritait d&amp;#8217;être évoqué et ne l&amp;#8217;a pas été selon moi. La meilleure sécurité, c&amp;#8217;est quand même d&amp;#8217;essayer d&amp;#8217;avoir une architecture la plus simple et comprehensible possible avec les contraintes de scalabilité/tolérance aux pannes de notre produit. Restez simple !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_why_an_interactive_picture_is_worth_a_thousand_numbers&quot;&gt;Why an interactive picture is worth a thousand numbers ?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Peut être ma keynote préférée des deux jours, ça envoyait du lourd ! Sara-Jane Dunn travaille pour Microsoft Research, et nous expliquait ici l&amp;#8217;importance des visualisations par rapport notamment à des chiffres bruts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, on a de plus en plus de données, de logs&amp;#8230;&amp;#8203; On calcule souvent des statistiques sur ces données, mais ces statistiques sont parfois trompeuses !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deux jeux de données peuvent produire des statistiques (moyennes, médianes&amp;#8230;&amp;#8203;) semblables alors que les données n&amp;#8217;ont rien à voir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, on doit parfois partager ces données avec des collègues, pas forcément de notre domaine (par exemple avec des scientifiques en biologie alors que nous on est informaticien).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;C&amp;#8217;est là que les visualisations interviennent.
Pouvoir représenter et explorer des données de façon graphique est devenu indispensable aujourd&amp;#8217;hui.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker, à l&amp;#8217;aide de nombreux exemples, nous montrait comment des visualisations aident à résoudre des problèmes parfois très complexes. Les exemples venaient du monde de la biologie, où un chercheur a même avoué que sans l&amp;#8217;outil de visualisation développé par la speaker, ces recherches n&amp;#8217;auraient probablement pas abouties.
Les visualisations lui avaient permis de voir son problème sous un angle totalement différent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/visu1.jpg&quot; alt=&quot;Exemples de deux visualisations représentant les mêmes données mais où une est meilleure.&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ici, on voit clairement que la visualisation 2 (avec les courbes) est plus parlante que la première (avec les couleurs).&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speaker présentait ensuite quelques techniques pour créer des visualisations pertinentes. Cette slide montre bien par exemple qu&amp;#8217;une visualisation à base de formes/graphes est largement plus pertinente qu&amp;#8217;une visualisation à base de couleurs.
L&amp;#8217;intéractivité est aussi aujourd&amp;#8217;hui la clé de visualisations pertinentes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, investissez du temps pour créer les outils permettant de visualiser vos données !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_talks&quot;&gt;Talks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_consumer_driven_contract_testing_with_pact_and_docker&quot;&gt;Consumer-driven contract testing with Pact and Docker&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk, donné par Harry Winser, expliquait les stratégies et les outils et process développés pour valider des API HTTP dans une architecture microservice.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les problèmes pour les API HTTP sont toujours les mêmes. Comment gérer la montée de version d&amp;#8217;un service ? Comment je m&amp;#8217;assure que les clients d&amp;#8217;une version antérieure sont toujours compatibles avec la nouvelle version ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une solution peut être les &lt;strong&gt;consumer driven contracts&lt;/strong&gt;. On définit un contrat d&amp;#8217;interface pour notre API. Cela permet aux équipes de travailler de manière indépendantes, et d&amp;#8217;écrire des tests pour valider nos contrats.
Une phrase prononcée intéressante était &lt;strong&gt;write your consumer first&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention, ces contrats ne concernent que la partie API, et ne permet donc pas de vérifier la logique métier des applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speakeur utilisait dans son entreprise un format appelé Pact, Ce format permet de décrire une requête HTTP, et s&amp;#8217;intègre facilement dans des pipelines de déploiements grâce à une intégration avec de nombreux langages/plateformes (comme par exemple la JVM).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les contrats Pact sont stockés dans une base appelée &lt;strong&gt;Pact broker&lt;/strong&gt;. Quand une application est build, son artifact (comme par exemple son .jar pour une application Java) est poussée dans un Nexus ou autre, et les contrats Pact de cette application (et pour cette version) dans le broker.
Il est aussi important de stocker des stubs/mock de l&amp;#8217;API de l&amp;#8217;application, qui seront ensuite utilisés par la suite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans l&amp;#8217;intégration continue des consumers d&amp;#8217;une API, on utilise les stubs de l&amp;#8217;API générés précédemment et les fichiers Pact présent dans le broker pour vérifier que l&amp;#8217;API correspond bien à un ou des contrats Pact et si les clients peuvent communiquer avec.&lt;br&gt;
Par exemple, un client communiquant avec 3 API pourra tester si il valide le contrat Pact pour ces 3 services.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est aussi possible de tester différentes versions de l&amp;#8217;API, pour voir si on garde une rétrocompatibilité en cas d&amp;#8217;une montée de version par exemple.
Ensuite, le résultat de ces tests sont publiés pour être exploités.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk était intéressant. Je n&amp;#8217;avais jamais entendu parler de Pact, le format et l&amp;#8217;écosystème autour semblent prometteurs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/pact_docker.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_real_world_consistency_explained&quot;&gt;Real-world consistency explained&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention, on passe au meilleur talk des deux jours !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk, donné par Uwe Friedrichsen, parlait de systèmes distribués, de consensus, de niveaux d&amp;#8217;isolations dans les base de données&amp;#8230;&amp;#8203; Bref, d&amp;#8217;un sujet super important mais que l&amp;#8217;on ne croise pas souvent.&lt;br&gt;
je consacrerais d&amp;#8217;ailleurs un article sur ces sujets prochainement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_le_passé&quot;&gt;Le &quot;passé&quot;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speaker commence tout d&amp;#8217;abord à parler du &quot;passé&quot; (les guillemets sont importante).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a donc depuis longtemps des bases de données relationnelles, avec des propriétés ACID (Atomicité, Cohérence, Isolation, Durabilité), Ces base de données fonctionnent très bien, il est facile de raisonner avec (ACID apporte sur le papier des propriétés fortes intéressantes).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais (car il y a toujours un mais), ACID != Serializability (en résumé que les transactions sont exécutées sans se marcher dessus) ! Des anomalies peuvent apparaîtres, et les transactions ne sont pas si isolées qu&amp;#8217;on ne le pense (d&amp;#8217;où les différents niveaux d&amp;#8217;isolations dans les bases de données: read commited, snapshot isolation, serializability&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/write_skew.jpg&quot; alt=&quot;exemple de write skew&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Exemple de write skew tiré de l&amp;#8217;excellent &lt;a href=&quot;https://dataintensive.net/&quot;&gt;Designing Data-Intensive Applications&lt;/a&gt; de Martin Kleppmann. Ici, deux transactions se chevauchent et provoquent un bug dans le système (plus aucun médecin n&amp;#8217;est d&amp;#8217;asteinte). Cette erreur peut se produire en snapshot isolation.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;le problème du mode serializable dans une base de donnée est la grande perte de performance associée (il faut par exemple parfois locker complètement les tables pour avoir ce niveau d&amp;#8217;isolation, ce qui diminue fortement les performances).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De plus, les configurations par défaut des bases de données n&amp;#8217;activent pas la sérialization.&lt;br&gt;
Ces configurations par défaut, couplées à une méconnaissance des différents niveaux d&amp;#8217;isolations des bases de données, peuvent causer de sérieux soucis (et difficilement détectables) en production.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, les bases de données ACID sont très utiles, fournissent un certain nombre de garanties, mais il faut faire attention car des problèmes de cohérences peuvent toujours se produire.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/consistencyfull.jpg&quot; alt=&quot;Les différents niveaux d isolations des transactions dans une base de données&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Vous croyez le monde des transactions facile ?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_le_présent&quot;&gt;Le &quot;présent&quot;&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cloud, NoSQL, microservices&amp;#8230;&amp;#8203; On a maintenant des architectures distribués. Et cela &lt;strong&gt;doit&lt;/strong&gt; vous inquiéter ! Notamment les architectures microservices, où un mauvais découpage peut avoir des conséquences désastreuses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Parlons maintenant un peu de NoSQL. On avait avant les propriétés ACID pour les bases de données traditionnelles, on parle parfois de BASE (Basically Available, Soft state, Eventual consistency) pour les base de données NoSQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais en dehors de l&amp;#8217;aspect technologique, un gros problème de ces base de données est le marketing et le buzz qui font que les gens l&amp;#8217;utilisent sans n&amp;#8217;avoir aucune connaissance sur la technologie ou des systèmes distribués en général.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les choix de base de données se font donc pour des raisons non techniques, ce qui conduit inévitablement à la catastrophe.
Anecdote personnelle, mais j&amp;#8217;ai déjà vu des décideurs hésiter entre entre Couchbase et Cassandra (wtf) ou entre Cassandra et Redis (wtf^10000), sans même vraiment connaître ni le besoin ni ces technos !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un grand nombre de projets n&amp;#8217;ont pas besoin de bases NoSQL. Le speaker donnait l&amp;#8217;exemple de MySQL qui peut très bien traiter plusieurs milliards d&amp;#8217;enregistrements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les base de données NoSQL ont des use cases, mais il est limité ! Il faut également très bien comprendre les garanties (et l&amp;#8217;absence de garanties) qu&amp;#8217;offrent les base de données NoSQL, notamment les garanties de cohérences des données et de disponibilité de la base.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le speaker a ensuite présenté différents problèmes pouvant se produire dans une base de données distribuée, comme par exemple le fameux &lt;strong&gt;read your own write&lt;/strong&gt;, ou alors que contrairement à une croyance populaire, définir un quorum en lecture ne veut pas dire avoir un état cohérent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Etait également présenté quelques techniques pour gérer ces problèmes de cohérences, comme par exemple le &lt;strong&gt;read repair&lt;/strong&gt;. Etait évoqué également les difficultés à travailler côté développement avec une base de données BASE, où l&amp;#8217;absence de transactions et les joies des systèmes distribués peuvent causer des surprises.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_en_conclusion&quot;&gt;En conclusion&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il existe aujourd&amp;#8217;hui une multitude d&amp;#8217;outils, ces derniers étant quelque part  entre ACID et BASE niveau cohérence des données, le choix des technologies doit donc se faire de manière intelligence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attention au marketing et aux promesses des vendeurs qui viennent vous vendre du rêve.
Attention aux base de données NoSQL et aux architectures distribuées en général, et toujours se poser la question &lt;strong&gt;&quot;est ce que j&amp;#8217;ai vraiment besoin de ça ?&quot;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il faut également comprendre son système, et les différents incidents qui peuvent se produire.
Même les personnes d&amp;#8217;administrant pas mais utilisant les outils doivent le comprendre, comme par exemple les développeurs.
Ces derniers doivent connaître les potentiels problèmes pouvant se produire avec des bases de données NoSQL (ou même SQL avec un niveau d&amp;#8217;isolation faible) pour pouvoir les requêter correctement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et surtout, surtout, &lt;strong&gt;pas&lt;/strong&gt; de transactions entre différents services/outils de storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Encore merci au speaker pour ce talk génial, que l&amp;#8217;on devrait diffuser à chaque personne prononçant les mots &lt;strong&gt;NoSQL&lt;/strong&gt; et &lt;strong&gt;microservice&lt;/strong&gt; en entreprise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/real_world_consistency.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_surviving_failure_in_rabbitmq&quot;&gt;Surviving failure in RabbitMQ&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk donné par  Lorna Mitchell traitait des queues de messages et plus particulièrement de RabbitMQ.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speakeur commençait par décrire l&amp;#8217;utilité d&amp;#8217;une queue de message: asynchronisme/communication entre applications, mise en place assez facile, nombre de workers ajustables en fonction de la charge&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais comme d&amp;#8217;habitude, on peut avoir des erreurs. Un message peut ne pas être traité. Il faut donc se poser la question les garanties de traitement de notre système (at least once, at most once&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ces garanties de traitements nous forcent donc à réaliser du code défensif (par exemple avec une garantie &lt;strong&gt;at least once&lt;/strong&gt; au niveau du broker, il est possible d&amp;#8217;éviter de traiter deux fois le même message en faisant le travail côté application).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il est également possible d&amp;#8217;essayer de récupérer des erreurs en poussant un message traité comme erreur dans un exchange particulier du broker (dead letter dans RabbitMQ), pour éventuellement le traiter ultérieurement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La speakeur insistait également sur l&amp;#8217;obligation de monitorer les queues de messages, comme par exemple en reportant le nombre de messages dans les différentes queues, ou encore le temps de traitement des messages par les workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Configurer une taille de queue maximale et un TTL sur les messages pour éviter qu&amp;#8217;une queue grandisse pour toujours peut également être intéressant. De plus, les messages rejetés peuvent éventuellement être injectés dans l&amp;#8217;exchange &lt;strong&gt;dead letter&lt;/strong&gt; et traités ensuite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, un talk intéressant sur les queues de messages, avec RabbitMQ comme exemple.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_traefik_make_load_balancing_great_again&quot;&gt;Traefik: Make load balancing great again&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce talk donné par Emile Vauge nous présentait Traefik. Tout d&amp;#8217;abord, ça fait du bien d&amp;#8217;enfin voir un speaker Français ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Emile nous expliquait donc ce qu&amp;#8217;est &lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik&lt;/a&gt;, que je connaissais déjà très bien pour connaître l&amp;#8217;équipe autour et avoir déjà utilisé Traefik.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image right&quot;&gt;&lt;img src=&quot;/img/velocity/traefik.png&quot; alt=&quot;logo de Traefik&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik est donc un reverse proxy conçu pour les infrastructures d&amp;#8217;aujourd&amp;#8217;hui, c&amp;#8217;est à dire où les serveurs et applications vont et viennent.
Les solutions de load balancing traditionnelles ne sont pas vraiment prévues pour ce genre d&amp;#8217;infrastructures (bien que beaucoup d&amp;#8217;efforts sont actuellement fait sur des produits comme HAproxy pour que ce soit le cas).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik peut donc se brancher sur un backend (un orchestrateur comme Kubernetes ou Mesos, Docker Swarm, Consul, Etcd&amp;#8230;&amp;#8203;) et générer sa configuration à partir de celà. En cas de changement sur le backend (par exemple, un nouveau pod démarre sur votre cluster Kubernetes), Traefik mettra automatiquement à jour sa configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Traefik supporte également nativement &lt;a href=&quot;https://letsencrypt.org&quot;&gt;Let&amp;#8217;s Encrypt&lt;/a&gt; pour générer des certificats.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Plusieurs slides étaient consacrés aux dernières releases de Traefik, et la quantité de nouveautés à chaque release est impressionnante: Custom headers, statd/datadog integration, proxy protocol, HTTP2, Websockets&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On a également eu droit à une démo où on pouvait voir la réactivité de Traefik lorsque la configuration du backend change, et des stickers ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bravo à Emile et à toute la team de &lt;a href=&quot;https://containo.us/&quot;&gt;Containous&lt;/a&gt; pour le travail accompli. Je suis sûr que Traefik est un produit que l&amp;#8217;on rencontrera de plus en plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;../../pdf/velocity_2017/traefik.pdf&quot;&gt;Slides&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette première journée s&amp;#8217;est ensuite terminée dans un bar/restaurant privatisé pour l&amp;#8217;occasion avec pizza/bières gratuites ;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;j&amp;#8217;ai aussi découvert ce superbe nom de restaurant sur le chemin du retour vers mon Airbnb:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/velocity/chien.jpg&quot; alt=&quot;Un restaurant nommé les couilles du chien&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;aimerais conclure par la chose qui m&amp;#8217;a le plus plût durant cette conférence: les gens (speaker comme spectateurs) savaient de quoi ils parlaient et connaissaient les tradeoff des différentes technologies qu&amp;#8217;ils ou elles utilisent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Personne ne vendait de solutions miracles, et beaucoup de gens étaient très critiques envers le &lt;strong&gt;buzzword driven development&lt;/strong&gt;. Et ça, ça fait plaisir !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 03 Dec 2017 00:00:00 +0100
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-08-09-coalesce/
</guid>
<link>
https://mcorbin.fr/posts/2017-08-09-coalesce/
</link>
<title>
A tour of Riemann : Coalesce
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A small article about the Riemann coalesce stream.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_how_it_works&quot;&gt;How it works ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://riemann.io/api/riemann.streams.html#var-coalesce&quot;&gt;API doc&lt;/a&gt; is pretty clear. Coalesce remembers the most recent event for each host/service, and send every N seconds a vector containing the most recent states.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(streams
  (with :ttl 60
    (coalesce 10
     #(info %))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 1&lt;/strong&gt;  : Riemann receives `&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 10 :time 1}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce instantly emits :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;bar&quot; :metric 20 :time 1}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce will always emit the first event it receives.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 4&lt;/strong&gt;  : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 7&lt;/strong&gt;  : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 30 :time 7}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 11&lt;/strong&gt; : Coalesce emits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4} {:host &quot;foo&quot; :service &quot;bar&quot; :metric 30 :time 7}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, coalesce emits the last event seen for each host/service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 13&lt;/strong&gt; : Riemann receives&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;foo&quot; :service &quot;bar&quot; :metric 40 :time 13}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;At time &lt;strong&gt;t = 21&lt;/strong&gt; : Coalesce emits&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;[{:host &quot;foo&quot; :service &quot;foobar&quot; :metric 12 :time 4} {:host &quot;foo&quot; :service &quot;bar&quot; :metric 40 :time 13}]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again, coalesce emits the last states for each host and service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, an example.
I want to monitor a Cassandra cluster, and fire an email if the &lt;code&gt;cpu mean&lt;/code&gt; of the cluster is greater than 60.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_code&quot;&gt;The code&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, create a &lt;code&gt;mycorp/system/cpu.clj&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.cpu
  &quot;check cpu&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [riemann.folds :as folds]
            [mycorp.output.email :as email]
            [clojure.tools.logging :refer :all]))

(def cpu-mean-alert-cassandra
  &quot;A stream checking if the cpu mean for all hosts with service = `cpu` and tagged `cassandra` is &amp;gt; to 60&quot;
  ;; filter by services and tags
  (where (and (tagged &quot;cassandra&quot;) (service &quot;cpu&quot;))
  ;; every 10 seconds, send the last state for each host/service
  ;; :service will always be &quot;cpu&quot; so we only have differents hosts on events
    (coalesce 10
      ;; apply mean using smap to compute the cpu mean
      (smap folds/mean
        ;; update the event, remove :host and update the description
        (with {:host nil :service &quot;cassandra-cpu-mean&quot;}
          ;; check if mean &amp;gt; 60
          (where (&amp;gt; (:metric event) 60)
            ;; send email
            (io (email/email &quot;foo@mcorbin.fr&quot;))
            ;; tap for tests
            (tap :cpu-mean-alert-tap)))))))

(tests
  (deftest cpu-mean-alert-test
    (let [result (inject! [mycorp.system.cpu/cpu-mean-alert-cassandra]
                          [{:host &quot;foo&quot;
                            :service &quot;cpu&quot;
                            :metric 65
                            :tags [&quot;cassandra&quot;]
                            :ttl 60
                            :time 1}
                           {:host &quot;bar&quot;
                            :service &quot;cpu&quot;
                            :metric 50
                            :tags [&quot;cassandra&quot;]
                            :ttl 50
                            :time 2}
                           ;; not tagged
                           {:host &quot;baz&quot;
                            :service &quot;cpu&quot;
                            :metric 99
                            :tags []
                            :ttl 60
                            :time 3}
                           {:host &quot;foobar&quot;
                            :service &quot;cpu&quot;
                            :metric 95
                            :tags [&quot;cassandra&quot;]
                            :ttl 60
                            :time 12}
                           {:host &quot;foobar&quot;
                            :service &quot;riemann&quot;
                            :metric 95
                            :tags []
                            :ttl 60
                            :time 22}])]
      (is (= (:cpu-mean-alert-tap result)
            [{:service &quot;cassandra-cpu-mean&quot;
              :metric 65
              :tags [&quot;cassandra&quot;]
              :ttl 60
              :time 1}
             {:service &quot;cassandra-cpu-mean&quot;
              :metric 70
              :tags [&quot;cassandra&quot;]
              :ttl 60
              :time 12}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;(Don&amp;#8217;t forget to add &lt;code&gt;cpu.clj&lt;/code&gt; file in your riemann.config file ;))&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the &lt;code&gt;cpu-mean-alert-cassandra&lt;/code&gt; stream, i first filter Cassandra/cpu events with &lt;code&gt;where&lt;/code&gt;, and use &lt;code&gt;coalesce 10&lt;/code&gt; (so coalesce will emit a vector of events every 10 seconds).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After that, i use &lt;code&gt;smap&lt;/code&gt; to apply &lt;code&gt;folds/mean&lt;/code&gt; on the vector of events emitted by coalesce. I now have an event representing the &lt;code&gt;cpu mean&lt;/code&gt; of the cluster.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;code&gt;with&lt;/code&gt; to update the event, and &lt;code&gt;where&lt;/code&gt; again to check the mean value against a threshold.
If the mean is &amp;gt; to 60, i fire an email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Easy !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_more_use_cases&quot;&gt;More use cases&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Use coalesce when you want to aggregate common events from multiple hosts.
In the previous example, i used &lt;code&gt;folds/mean&lt;/code&gt; to calculate the mean, but i could do anything i want, for example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Get max, min etc&amp;#8230;&amp;#8203; values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check for unbalanced values between hosts, for example : why do i have 10 nodes at 30 % CPU but one constantly at 95 % ? I used coalesce to detects unbalanced partitions in Kafka topics (caused by a bad partition key) for example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_event_expiration&quot;&gt;Event expiration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Coalesce takes care to expire events. From the &lt;a href=&quot;http://riemann.io/api/riemann.streams.html#var-coalesce&quot;&gt;API&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;When events expire, they are included in the emitted sequence of events once, and removed from the state table thereafter.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This stream is perfect for monitoring distributed systems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 09 Aug 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-05-21-riemann-by-stream/
</guid>
<link>
https://mcorbin.fr/posts/2017-05-21-riemann-by-stream/
</link>
<title>
A tour of Riemann : check disk, by, throttle, email
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How tu use the (by) stream in Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_the_problem&quot;&gt;The problem&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I now want to monitor disk usage.
If a filesystem is 80 % full, fire an email.
But i don&amp;#8217;t want to be spammed , so i want at most 2 mails every hours &lt;strong&gt;for each distinct full filesystem&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will receive events in Riemann like this one :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;{:host &quot;debian-mathieu.corbin&quot;
 :service &quot;df-root/percent_bytes-used&quot;
 :state nil
 :description nil
 :metric 73.04872131347656
 :tags []
 :time 1495380355
 :ttl 20.0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, the &lt;code&gt;root&lt;/code&gt; fs is 73 % full for host &lt;code&gt;debian-mathieu.corbin&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_email&quot;&gt;Email&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can &lt;a href=&quot;http://riemann.io/howto.html#send-email&quot;&gt;send email&lt;/a&gt; using Riemann.
Let&amp;#8217;s define a stream to send email.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a file &lt;code&gt;mycorp/output/email.clj&lt;/code&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.output.email
  &quot;send email&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            ;; we should import riemann.email
            [riemann.email :refer :all]
            [clojure.tools.logging :refer :all]))

;; this stream can be used to send email
(def email (mailer {:from &quot;me@mcorbin.fr&quot;
                    :host &quot;mail.foo.com&quot;
                    :user &quot;foo&quot;
                    :password &quot;bar&quot;}))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, we use &lt;code&gt;def&lt;/code&gt; to define a new stream named email.
We will use it to send emails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_throttle&quot;&gt;Throttle&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will use &lt;code&gt;throttle&lt;/code&gt; to limit the number of email.
Take a look at &lt;a href=&quot;http://riemann.io/howto.html#roll-up-and-throttle-events&quot;&gt;the Riemann howto&lt;/a&gt; for more informations about throttle&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solution&quot;&gt;Solution&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_tests&quot;&gt;Tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s create a file &lt;code&gt;mycorp/system/disk.clj&lt;/code&gt; and write the tests for our use case:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.disk
  &quot;Check disk&quot;
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [mycorp.output.email :as email]
            [clojure.tools.logging :refer :all]))

(def disk-stream)

(tests
 (deftest disk-stream-test
   ;; i inject test events only in disk-stream
   (let [result (inject! [mycorp.system.disk/disk-stream]
                         [;; ok
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 73
                           :tags []
                           :time 1
                           :ttl 20.0}
                          ;; random event
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;random_service&quot;
                           :state nil
                           :description nil
                           :metric 100
                           :tags []
                           :time 1
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 3
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/var-log full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-var-log/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 91
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; guixsd-mathieu.corbin/root full
                          {:host &quot;guixsd-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 90
                           :tags []
                           :time 4
                           :ttl 20.0}
                          ;; debian-mathieu.corbin/root full
                          {:host &quot;debian-mathieu.corbin&quot;
                           :service &quot;df-root/percent_bytes-used&quot;
                           :state nil
                           :description nil
                           :metric 93
                           :tags []
                           :time 3605
                           :ttl 20.0}])]
     ;; :disk-stream-tap-1 should contains all events indicating a full fs
     (is (= (:disk-stream-tap-1 result)
            [{:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 3
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-var-log/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 91
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;guixsd-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 93
              :tags []
              :time 3605
              :ttl 20.0}]))
     ;; :disk-stream-tap-2 should contains all events passed to the email stream.
     ;; for each host/service, we want maximum 2 mails every 3600 seconds
     (is (= (:disk-stream-tap-2 result)
            [ ;; first debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 3
              :ttl 20.0}
             ;; first debian-mathieu/var-log
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-var-log/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; second debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; first debian-mathieu/guixsd
             {:host &quot;guixsd-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 90
              :tags []
              :time 4
              :ttl 20.0}
             ;; next window (time = 3605), first debian-mathieu/root
             {:host &quot;debian-mathieu.corbin&quot;
              :service &quot;df-root/percent_bytes-used&quot;
              :state nil
              :description nil
              :metric 93
              :tags []
              :time 3605
              :ttl 20.0}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this test suite, we have 2 &lt;code&gt;:tap&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first one, &lt;code&gt;:disk-stream-tap-1&lt;/code&gt;, will contain all events representing a fs &amp;gt; to 80 %.
The second, &lt;code&gt;:disk-stream-tap-2&lt;/code&gt;, all events actually send by email.
The distinction is important.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, we only want 2 email per hour for &lt;strong&gt;each distinct full filesystem&lt;/strong&gt; to not be spammed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Look at the &lt;code&gt;:disk-stream-tap-2&lt;/code&gt; tests.
We injected 3 events commented &lt;code&gt;debian-mathieu.corbin/root full&lt;/code&gt;, but in &lt;code&gt;:disk-stream-tap-2&lt;/code&gt; we only had 3, because of &lt;code&gt;throttle&lt;/code&gt; (2 in the first 3600 seconds, 1 after).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Don&amp;#8217;t forget to add in riemann.config the new files :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(include &quot;mycorp/output/email.clj&quot;)
(include &quot;mycorp/system/ram.clj&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_first_incorrect_solution&quot;&gt;First (incorrect) solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We saw in a previous article how to perform a simple check. Why not reuse it with &lt;code&gt;throttle&lt;/code&gt; and &lt;code&gt;email&lt;/code&gt; ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def disk-stream
  &quot;Check if disk if &amp;gt; to 80 %, email if it is. Send only 2 email for each alert type.&quot;
  ;; #&quot;percent_bytes-used$&quot; is a regex, we only want events where :service match the regex
  (where (and (service #&quot;percent_bytes-used$&quot;)
              ;; Test if disk is 80 % full
              (&amp;gt; (:metric event) 80))
    (tap :disk-stream-tap-1)
    ;; 2 events max every 3600 secondes using throttle
    (throttle 2 3600
      (tap :disk-stream-tap-2)
      ;; send email using the email stream defined in mycorp.output.email
      (io (email/email &quot;foo@mcorbin.fr&quot;)))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch &lt;code&gt;riemann test riemann.config&lt;/code&gt;. It fails in the second test (&lt;code&gt;:disk-stream-tap-2&lt;/code&gt;).
Why ? because in this solution, we only send 2 email &lt;strong&gt;regardless the host/service fields&lt;/strong&gt;.
If we have 10 alerts for 10 differents filesystem, with this solution we will send &lt;strong&gt;only&lt;/strong&gt; 2 emails for the 2 first alerts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We want to have independant &lt;code&gt;throttle&lt;/code&gt; for each host/filesystem.
And for this, we will use &lt;a href=&quot;http://riemann.io/howto.html#distinct-streams-for-each-host-service-etc&quot;&gt;the by stream&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_solution&quot;&gt;Final solution&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We just need to add &lt;code&gt;(by)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def disk-stream
  &quot;Check if disk if &amp;gt; to 80 %, email if it is. Send only 2 email for each alert type.&quot;
  ;; #&quot;percent_bytes-used$&quot; is a regex, we only want events where :service match the regex
  (where (and (service #&quot;percent_bytes-used$&quot;)
              ;; Test if disk is 80 % full
              (&amp;gt; (:metric event) 80))
    (tap :disk-stream-tap-1)
    ;; use (by) to have independant streams for each host/service couple
    (by [:host :service]
      ;; 2 events max every 3600 secondes using throttle
      (throttle 2 3600
        (tap :disk-stream-tap-2)
        ;; send email using the email stream defined in mycorp.output.email
        (io (email/email &quot;foo@mcorbin.fr&quot;))))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;riemann test riemann.config&lt;/code&gt; is now passing !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You now know how to send email, and how to use &lt;code&gt;by&lt;/code&gt; and &lt;code&gt;throttle&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 21 May 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-05-04-simple-check/
</guid>
<link>
https://mcorbin.fr/posts/2017-05-04-simple-check/
</link>
<title>
A tour of Riemann : A simple check
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to create a simple check with Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_a_basic_riemann_configuration&quot;&gt;A basic Riemann configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is a basic &lt;code&gt;riemann.config&lt;/code&gt; file (it should be in &lt;code&gt;/etc/riemann/riemann.config&lt;/code&gt; if you have installed Riemann using rpm/deb).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(logging/init {:file &quot;/var/log/riemann/riemann.log&quot;})

(let [host &quot;0.0.0.0&quot;]
  (tcp-server {:host host})
  (udp-server {:host host}))

(periodically-expire 10)

(streams)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here, i initialize logging, start a tcp and a udp server, and configure index expiration every 10 seconds.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;(streams)&lt;/code&gt; do nothing actually.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_check_if_metric_to_a_threshold&quot;&gt;Check if metric &amp;gt; to a threshold&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a file named &lt;code&gt;mycorp/system/ram.clj&lt;/code&gt;.
We want a stream which:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Filter all events excepts events about RAM.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Write the event in the log file if the RAM is &amp;gt; to 90 %.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We will simulate these events using Riemann test API:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/tour/ramperc.png&quot; alt=&quot;ram graph&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s define a basic &lt;code&gt;mycorp/system/ram.clj&lt;/code&gt; (doing nothing):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(ns mycorp.system.ram
  (:require [riemann.config :refer :all]
            [riemann.streams :refer :all]
            [riemann.test :refer :all]
            [clojure.tools.logging :refer :all]))

(def threshold 90)

(def ram-stream)

(tests
  (deftest ram-stream-test))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have imported Riemann essentials namespaces, defined a threshold variable, a ram-stream variable (which will contain our stream), and a test.
Let&amp;#8217;s complete the test part:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(tests
 (deftest ram-stream-test
   (let [result (inject! [mycorp.system.ram/ram-stream]
                         [{:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 60
                           :time 1}
                          {:host &quot;foo&quot;
                           :service &quot;ramdom-event&quot;
                           :metric 4000
                           :time 3}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 95
                           :time 11}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 80
                           :time 21}
                           {:host &quot;foo&quot;
                           :service &quot;foobar&quot;
                           :metric 3100
                           :time 24}
                          {:host &quot;foo&quot;
                           :service &quot;memory/percent-used&quot;
                           :metric 92
                           :time 31}])]
     (is (= (:ram-stream-tap result)
            [{:host &quot;foo&quot;
              :service &quot;memory/percent-used&quot;
              :metric 95
              :time 11}
             {:host &quot;foo&quot;
              :service &quot;memory/percent-used&quot;
              :metric 92
              :time 31}])))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, i will inject into &lt;code&gt;mycorp.system.ram/ram-stream&lt;/code&gt; a serie of events. Some are RAM events (and are represented by the previous graph), and some random events.
I store the &lt;code&gt;inject!&lt;/code&gt; result into &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;tap&lt;/code&gt; is a point where you can observe events. Take a look at the &lt;a href=&quot;http://riemann.io/howto.html#writing-tests&quot;&gt;writing tests&lt;/a&gt; section in the Riemann howto to learn more about tap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In my test, i get the value of the tap named &lt;code&gt;:ram-stream-tap&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Obviously, my test will fail because &lt;code&gt;ram-stream&lt;/code&gt; is not defined.
Let&amp;#8217;s define it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(def ram-stream
  (where (service &quot;memory/percent-used&quot;)
    (where (&amp;gt; (:metric event) threshold)
      (io #(info %))
      (tap :ram-stream-tap))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I use &lt;code&gt;where&lt;/code&gt; to filter events whose name is not &quot;ram-used&quot; and &lt;code&gt;where&lt;/code&gt; again to filter events with a &lt;code&gt;:metric&lt;/code&gt; &amp;lt; to threshold. I print remaining events in the log file using &lt;code&gt;info&lt;/code&gt; and push them into a tap for testing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I could also use only one &lt;code&gt;where&lt;/code&gt; stream:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(def ram-stream
  (where (and (service &quot;memory/percent-used&quot;)
              (&amp;gt; (:metric event) threshold))
    (io #(info %))
    (tap :ram-stream-tap)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, import your &lt;code&gt;ram.clj&lt;/code&gt; file in riemann.config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(include &quot;mycorp/system/ram.clj&quot;)

(require '[riemann.test :refer :all]
         '[mycorp.system.ram :as ram])

;; rest of the file&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Launch your tests:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;riemann test /etc/riemann/riemann.config

Ran 1 tests containing 1 assertions.
0 failures, 0 errors.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Good job ! You can now use this stream in your configuration. Add it in riemann.config:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(streams
 ram/ram-stream)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And that&amp;#8217;s it. You have a stream checking the ram.
Not very useful (just a threshold), but it&amp;#8217;s something :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the next article, things will be more interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Thu, 04 May 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-10-installing-riemann/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-10-installing-riemann/
</link>
<title>
A tour of Riemann : Installing
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How to install Riemann ?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_installing_riemann&quot;&gt;Installing Riemann&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Go to &lt;a href=&quot;http://riemann.io/&quot; class=&quot;bare&quot;&gt;http://riemann.io/&lt;/a&gt; and download Riemann for your platform.
You will also need a JDK (OpenJDK 8 for example).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_configuring_riemann_jvm&quot;&gt;Configuring Riemann JVM&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On &lt;code&gt;Debian&lt;/code&gt;, takes a look at &lt;code&gt;/etc/default/riemann&lt;/code&gt;.
On RHEL, it should be on &lt;code&gt;/etc/sysconfig/riemann&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this tutorial, you don&amp;#8217;t need to modify this file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann is just a jar, so that&amp;#8217;s it, you have installed Riemann :)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Mon, 10 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-09-a-tour-of-riemann/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-09-a-tour-of-riemann/
</link>
<title>
A tour of Riemann
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog posts serie, i will present Riemann, an amazing monitoring tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do you know  &lt;a href=&quot;http://riemann.io/&quot;&gt;Riemann&lt;/a&gt; ?
It&amp;#8217;s an &lt;strong&gt;amazing&lt;/strong&gt; tool, a stream processing engine to monitor your infrastucture.
Flexible, powerful, it can detects complex problems on your infrastructure, calculate statistics and fire alerts.
It integrates with many tools (InfluxDB, Kafka, Elasticsearch, Pagerduty&amp;#8230;&amp;#8203;) and is highly costumizable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Riemann configuration is code (real code, it&amp;#8217;s &lt;a href=&quot;https://clojure.org&quot;&gt;Clojure&lt;/a&gt;).
You will quickly understand why Clojure is Riemann strength compared to a DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will not present Clojure, i advice you to get Clojure basics using these tutorials:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://riemann.io/clojure.html&quot;&gt;Just enough Clojure to work with Riemann&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Clojure-from-the-ground-up&quot;&gt;Clojure from the ground up&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.braveclojure.com/clojure-for-the-brave-and-true/&quot;&gt;Clojure for the brave and true&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some useful links to work with Riemann. I will mostly show use cases on my tutorials,
it&amp;#8217;s a complement of the Riemann howto and not a replacement.
I will write unit tests for each use cases.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The official &lt;a href=&quot;http://riemann.io/howto.html&quot;&gt;howto&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;a href=&quot;http://riemann.io/api.html&quot;&gt;Riemann API&lt;/a&gt;, especially the &lt;code&gt;streams&lt;/code&gt; and &lt;code&gt;folds&lt;/code&gt; sections.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I will use &lt;a href=&quot;https://collectd.org/&quot;&gt;collectd&lt;/a&gt; with the &lt;code&gt;write_riemann&lt;/code&gt; plugin to gather system metrics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go !&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Code &lt;a href=&quot;https://github.com/mcorbin/riemann-configuration-example&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
<pubDate>
Sun, 09 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2017-04-05-a-propos-clojure/
</guid>
<link>
https://mcorbin.fr/posts/2017-04-05-a-propos-clojure/
</link>
<title>
A propos de Clojure
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ça fait maintenant plus de 2 ans que je me suis mis à &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt;.
Bien m&amp;#8217;en a pris.
C&amp;#8217;est aujourd&amp;#8217;hui le langage où je suis le plus à l&amp;#8217;aise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je tâcherais dans cet article d&amp;#8217;expliquer pourquoi Clojure est un langage à la fois simple, puissant, et extrêmement fun.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_histoire&quot;&gt;Histoire&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La version 1.0 de Clojure est sortie en 2009.
Le langage fonctionne sur la JVM (sa cible initiale) mais compile également en Javascript (via le projet ClojureScript).
Un port de Clojure sur CLR existe également, mais moins populaire que les version Java/JS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La force de Clojure est qu&amp;#8217;il s&amp;#8217;interface parfaitement avec sa plateforme cible, c&amp;#8217;est à dire qu&amp;#8217;il est très facile d&amp;#8217;utiliser l&amp;#8217;énorme écosystème (libraries, frameworks, outils&amp;#8230;&amp;#8203;) de ces plateformes depuis Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_syntaxe&quot;&gt;Syntaxe&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure est inspiré de LISP.
Pour un développeur habitué à C, Java, Python&amp;#8230;&amp;#8203; cela peut faire peur.
Pourtant la syntaxe de Clojure (et de LISP en général) est une de ses plus grandes forces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Voici une explication simple de la syntaxe de Clojure :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;1 + 1

foo(bar)

foo(bar, baz)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(+ 1 1)

(foo bar)

(foo bar baz)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On se rend compte facilement qu&amp;#8217;en Clojure, l&amp;#8217;opérateur (ou la fonction, le mot clé&amp;#8230;&amp;#8203;) se trouve en premier (après une parenthèse) suivi de ses arguments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Allons un peu plus loin :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;public int addFive(int number) {
    return number + 5;
}

public int addFiveIfOdd(int number) {
    if (number % 2 == 0) {
        return number + 5;
    }
    return number;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(defn add-five
  [number]
  (+ number 5))

(defn add-five-if-odd
  [number]
  (if (odd? number)
    (+ 5 number)
    number))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit ici que la syntaxe de Clojure respecte toujours le même format.
Une ouverture de parenthèse, un mot clé, et une suite d&amp;#8217;arguments.
Quelle que soit l&amp;#8217;action à réaliser (un if, une définition de fonction, un appel de fonction&amp;#8230;&amp;#8203;), la syntaxe reste la même.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je trouve personnellement cela très intéressant, et une fois l&amp;#8217;habitude prise, lire du Clojure est très agréable (je vous promets que les parenthèses, vous ne les verrez plus ;)).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;D&amp;#8217;ailleurs, en parlant de parenthèses, comparez les deux codes suivants :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;List&amp;lt;Integer&amp;gt; mylist =
    Arrays.asList(1, 2, 3, 4);
myList.stream()
   .map( x -&amp;gt; x + 1)
   .mapToInt(x -&amp;gt; x)
   .sum();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;(reduce + (map inc [1 2 3 4]))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Comptez le nombre de symboles différents dans le code Java.
On a &lt;code&gt;(){}&amp;lt;&amp;gt;,&amp;#8594;;.&lt;/code&gt;, et beaucoup plus de parenthèses que dans la version Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_immutabilité&quot;&gt;Immutabilité&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En Clojure, (presque) tout est immutable.
Cela se voit dès que l&amp;#8217;on touche au langage :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (def foo [1 2])
#'riemann.bin/foo
riemann.bin&amp;gt; (conj foo 3)
[1 2 3]
riemann.bin&amp;gt; (conj foo 4)
[1 2 4]
riemann.bin&amp;gt; foo
[1 2]
riemann.bin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La même chose s&amp;#8217;applique lors de passage de paramètre à des fonctions :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (defn my-fn [my-vec] (conj my-vec 10))
#'riemann.bin/my-fn
riemann.bin&amp;gt; (my-fn foo)
[1 2 10]
riemann.bin&amp;gt; (my-fn foo)
[1 2 10]
riemann.bin&amp;gt; (my-fn [1 2 3])
[1 2 3 10]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il n&amp;#8217;y a plus à s&amp;#8217;inquiéter des effets de bords, toutes les structures de données de Clojure sont immutables.
Attention par contre si vous utilisez des objets Java (en utilisant l&amp;#8217;intéropérabilité Clojure/Java), le code perdra cette propriété.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_repl_développement_intéractif&quot;&gt;REPL, développement intéractif&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;adore Clojure car la façon de coder en Clojure correspond bien à ma façon de réfléchir.
Lorsque je code en Clojure, j&amp;#8217;ai toujours le REPL (l&amp;#8217;interpréteur Clojure) ouvert. Je peux comme cela coder dans mon fichier .clj, le charger dans le REPL et le &quot;tester&quot; en live.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cela est très intéressant et permet d&amp;#8217;avoir très rapidement un retour sur ce qu&amp;#8217;on écrit.
C&amp;#8217;est vraiment la technique ultime pour expérimenter, tester rapidement plusieurs solutions à un problème.
C&amp;#8217;est aussi très bien pour apprendre le langage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour résumer, mon workflow quand je code en Clojure c&amp;#8217;est :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Explorer les solutions à un problème avec le REPL. En faisant cela, je comprends mieux mon problème, les différentes solutions qui s&amp;#8217;offrent à moi, comment je peux découper le code&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ecrire des tests&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refactorer ma solution (qui est souvent bancale et ne passe pas mes tests).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les aficionados du TDD ne seraient pas forcément d&amp;#8217;accord avec moi, mais je trouve que manipuler un peu le problème avant d&amp;#8217;écrire des tests apporte une énorme plus value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le REPL est également agréable à utiliser grâce à la syntaxe simple et expressive de Clojure. Parait que Java 9 aura également un REPL, cool, mais je me vois mal taper dans un REPL à longueur de journée :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;ArrayList&amp;lt;String&amp;gt; foolist = new ArrayList&amp;lt;String&amp;gt;();
list.add(&quot;foo&quot;);
list.add(&quot;bar&quot;);
list.add(&quot;baz&quot;);
Map&amp;lt;Integer, &amp;lt;List&amp;lt;String&amp;gt;&amp;gt; foomap = new HashMap&amp;lt;&amp;gt;();
foomap.put(20, foolist)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Et vous ? Pour information, l&amp;#8217;équivalent Clojure est &lt;code&gt;&lt;code&gt;{20 [&quot;foo&quot; &quot;bar&quot; &quot;baz&quot;]}&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le fait que les fonctions prennent et retournent généralement des structures de données immutables aide aussi.
Pour tout ce qui est état (connexions aux base de données, web servers&amp;#8230;&amp;#8203;)
des outils comme &lt;a href=&quot;https://github.com/tolitius/mount&quot;&gt;mount&lt;/a&gt; permettent de définir et recharger en une commande l&amp;#8217;intégralité du programme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le REPL est probablement ce qui me manque le plus dans d&amp;#8217;autres langages.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_programmation_concurrente&quot;&gt;Programmation concurrente&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure fournit plusieurs outils permettant de partager facilement des ressources entre threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un &lt;a href=&quot;https://clojure.org/reference/atoms&quot;&gt;atom&lt;/a&gt; permet de définir une variable où chaque opération sera atomique. Exemple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;riemann.bin&amp;gt; (def foo (atom [1 2]))
#'riemann.bin/foo
riemann.bin&amp;gt; foo
#atom[[1 2] 0x58749e6e]
riemann.bin&amp;gt; @foo
[1 2]
riemann.bin&amp;gt; (swap! foo conj 3)
[1 2 3]
riemann.bin&amp;gt; @foo
[1 2 3]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je définis un atom foo. &lt;code&gt;@foo&lt;/code&gt; permet de déférencer l&amp;#8217;atom, c&amp;#8217;est à dire récupérer sa valeur. &lt;code&gt;swap!&lt;/code&gt; permet d&amp;#8217;appliquer une opération sur un atom (ici en y ajoutant la valeur 3).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les atom ont donc un état (et ne sont pas immutables). L&amp;#8217;intêret des atom est qu&amp;#8217;ils sont thread safe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que 2 threads appellent &lt;code&gt;swap!&lt;/code&gt; simultanément sur un atom, par exemple &lt;code&gt;(swap! foo conj 3)&lt;/code&gt; sur le thread 1 puis &lt;code&gt;(swap! foo conj 4)&lt;/code&gt; sur le thread 2.
Si l&amp;#8217;atom valait initialement &lt;code&gt;[1 2]&lt;/code&gt;, les &quot;bonnes&quot; réponses possibles sont &lt;code&gt;[1 2 3 4]&lt;/code&gt;
 ou &lt;code&gt;[1 2 4 3]&lt;/code&gt; une fois l&amp;#8217;opération exécutée.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Imaginons que l&amp;#8217;opération 1 se termine. L&amp;#8217;atom vaudra donc &lt;code&gt;[1 2 3]&lt;/code&gt;.
Pas de chance, pendant ce temps là sur le thread 2, l&amp;#8217;opération swap! produit &lt;code&gt;[1 2 4]&lt;/code&gt; (les deux opérations ayant été lancés au même moment, l&amp;#8217;état de l&amp;#8217;atom en entrée était le même pour les deux).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Nous ne voulons surtout pas que le résultat final soit &lt;code&gt;[1 2 4]&lt;/code&gt;.
Heureusement, &lt;code&gt;swap!&lt;/code&gt; détectera que l&amp;#8217;atom a changé pendant qu&amp;#8217;il réalisait l&amp;#8217;opération, et va donc re-réaliser l&amp;#8217;opération en prenant le nouveau état comme paramètre d&amp;#8217;entrée.
On obtiendra donc comme résultat final &lt;code&gt;[1 2 3 4]&lt;/code&gt;. Le tout sans lock :)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un peu de la même façon, les &lt;a href=&quot;https://clojure.org/reference/refs&quot;&gt;refs&lt;/a&gt; permettent de définir des opérations entre plusieurs variables mutables partagées entre plusieurs threads de manière safe, grâce à un système de transaction.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les atom et les ref viennent en plus avec des fonctionnalités intéressantes, comme le fait de pouvoir définir des fonctions qui seront appelées (avec en paramètre l&amp;#8217;ancien et le nouveau état de l&amp;#8217;atom ou de la ref) une fois une action réalisée.
Des fonctions de validations peuvent également être liées aux refs ou atom pour refuser certains états.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure implémente également d&amp;#8217;autres mécanismes pour la gestion de la concurrence (comme les &lt;a href=&quot;https://clojure.org/reference/agents&quot;&gt;agents&lt;/a&gt;, ou bien &lt;a href=&quot;https://github.com/clojure/core.async&quot;&gt;core.async&lt;/a&gt; qui permet de créer plusieurs processes qui communiqueront avec des channels (un peu à la Go)).
Et évidemment, tout ce qui tourne sur la JVM (donc java.util.concurrent par exemple) est également disponible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_macros&quot;&gt;Macros&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une liste se définit de cette façon en Clojure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; '(1 2 3)
(1 2 3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Définissons une nouvelle liste (rappel: de part sa nature dynamique, une liste en Clojure peut contenir tout et n&amp;#8217;importe quoi) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; '(defn my-fn [my-vec] (conj my-vec 10))
(defn my-fn [my-vec] (conj my-vec 10))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ma liste contient ici la définition de la fonction &lt;code&gt;my-fn&lt;/code&gt; !
En clojure (et en LISP de façon plus générale), le code est une structure de données manipulable via un mécanisme appelé macros.
Par exemple, &lt;code&gt;defn&lt;/code&gt; lui même est une macro:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;riemann.bin&amp;gt; (macroexpand '(defn my-fn2 [my-vec] (conj my-vec 10)))
(def my-fn2 (clojure.core/fn ([my-vec] (conj my-vec 10))))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;macroexpand&lt;/code&gt; retourne la forme &quot;réelle&quot; d&amp;#8217;une expression Clojure.
On voit ici que defn est en fait un assemblage des mots-clés &lt;code&gt;def&lt;/code&gt; et &lt;code&gt;fn&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les macros sont un outil très puissant (mais à utiliser avec modération), permettant de définir par exemple des DSL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Clojure n&amp;#8217;est pas parfait.
Il reste beaucoup à faire, comme par exemple les messages d&amp;#8217;erreurs (qui sont des stacktrace Java peu expressives) qui ont tendances à faire fuir les nouveaux venus dans le langage.
La façon de travailler avec le REPL n&amp;#8217;est pas également facile à acquérir seul.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mais le langage est solide, cohérent, et a complètement changé ma façon de programmer (en bien).
La philosophie du langage (immutabilité, manipulation facile de structures de données, REPL, fonctions/librairies versus frameworks&amp;#8230;&amp;#8203;) correspond parfaitement à ma façon de développer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Si vous ne l&amp;#8217;avez pas encore fait, vous DEVEZ jeter un oeil à Clojure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_ressources&quot;&gt;Ressources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://aphyr.com/tags/Clojure-from-the-ground-up&quot;&gt;Clojure from the group up&lt;/a&gt; de Aphyr : une série de tutoriel sur le langage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.braveclojure.com/clojure-for-the-brave-and-true/&quot;&gt;Brave Clojure&lt;/a&gt; : Un tutoriel complet existant également au format livre.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 05 Apr 2017 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2016-08-10-logs-ansible/
</guid>
<link>
https://mcorbin.fr/posts/2016-08-10-logs-ansible/
</link>
<title>
Use your Ansible logs ! / Exploitez vos logs Ansible !
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/logs-ansible-en/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
J&amp;#8217;utilise Ansible au quotidien. Tous les jours, mes collègues et moi même l&amp;#8217;utilisons pour configurer nos serveurs et déployer nos applications, sur de nombreux environnements. Nous utilisons Jenkins pour piloter Ansible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tout cela génère une &lt;strong&gt;énorme&lt;/strong&gt; quantité de logs, dont nous ne faisons pas grand chose à part une consultation après un déploiement via l&amp;#8217;interface de Jenkins.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;J&amp;#8217;expliquerais dans cet article une façon d&amp;#8217;exploiter ces logs, en s&amp;#8217;appuyant sur les plugins callback d&amp;#8217;Ansible. Grâce à ces plugins, il est possible d&amp;#8217;obtenir des logs beaucoup plus détaillés que les logs Ansible de base, ainsi que de facilement les manipuler pour en tirer un maximum d&amp;#8217;informations et de statistiques.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_les_callbacks_plugins_d_ansible&quot;&gt;Les callbacks plugins d&amp;#8217;Ansible&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_présentation_générale_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Présentation générale&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ansible peut être &quot;étendu&quot; avec des plugins. Je vais présenter ici les plugins de type callback &lt;a href=&quot;http://docs.ansible.com/ansible/developing_plugins.html=callbacks&quot;&gt;(documentation)&lt;/a&gt;. Les examples ici concernent Ansible 1.X, mais le fonctionnement est quasiment identique en version 2 et plus.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ce plugin permet de définir un objet dont les fonctions seront appelées à différents moments lors de l&amp;#8217;exécution d&amp;#8217;Ansible. Exemple:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class CallbackModule(object):

    def on_any(self, *args, *kwargs):
        pass

    def runner_on_failed(self, host, res, ignore_errors=False):
        pass

    def runner_on_ok(self, host, res):
        pass

    def runner_on_skipped(self, host, item=None):
        pass

    def playbook_on_start(self):
        pass

    def playbook_on_task_start(self, name, is_conditional):
        pass

    = etc...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Un callback plugin est donc juste une classe implémentant un certain nombre de méthodes. J&amp;#8217;en ai mis quelques unes dans cet exemple, mais il en existe beaucoup plus pour tout type d&amp;#8217;événements (vous pouvez retrouver ces fonctions dans la doc d&amp;#8217;Ansible ou dans les plugins callbacks fournis avec Ansible).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_fonctionnement_détaillé_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;Fonctionnement détaillé&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Par exemple, la fonction &lt;strong&gt;runner_on_failed&lt;/strong&gt; sera appelé quand une task Ansible échouera. De la même façon, &lt;strong&gt;runner_on_ok&lt;/strong&gt; sera appelé lorsque qu&amp;#8217;une tâche sera en succès, &lt;strong&gt;runner_on_skipped&lt;/strong&gt; lors d&amp;#8217;une tâche ignorée etc&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les fonctions de type &lt;strong&gt;playbook_on_&lt;/strong&gt; seront elles exécutées lors d&amp;#8217;évènements liés aux playbooks (&lt;strong&gt;playbook_on_start&lt;/strong&gt; lors du démarrage du playbook etc&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Toutes ces fonctions recoivent des paramètres. C&amp;#8217;est là que ça devient intéressant. Par exemple, nous disposons dans &lt;strong&gt;runner_on_ok&lt;/strong&gt; des variables &lt;strong&gt;self&lt;/strong&gt;, &lt;strong&gt;host&lt;/strong&gt;, et &lt;strong&gt;res&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Commençons par la variable &lt;strong&gt;host&lt;/strong&gt;. Comme son nom l&amp;#8217;indique, cette variable contient l&amp;#8217;host sur lequel s&amp;#8217;applique la task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;La variable &lt;strong&gt;res&lt;/strong&gt; contient les différentes informations sur la machine comme par exemple les variables de type &lt;strong&gt;fact&lt;/strong&gt;, ainsi que quelques informations sur la task (état &lt;strong&gt;changed&lt;/strong&gt;, module appelé&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L&amp;#8217;objet callback &lt;strong&gt;self&lt;/strong&gt; contient un grand nombre d&amp;#8217;informations sur l&amp;#8217;exécution en cours. Rajoutons par exemple &lt;strong&gt;import pdb; pdb.set_trace();&lt;/strong&gt; dans la fonction &lt;strong&gt;runner_on_ok&lt;/strong&gt; (pour utiliser le débugger Python) et lançons un déploiement. Un &lt;strong&gt;pp dir(self)&lt;/strong&gt; pour lister les champs de l&amp;#8217;objet donne:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(Pdb) pp dir(self)
['__class__',
 '__delattr__',
 '__dict__',
 '__doc__',
 '__format__',
 '__getattribute__',
 '__hash__',
 '__init__',
 '__module__',
 '__new__',
 '__reduce__',
 '__reduce_ex__',
 '__repr__',
 '__setattr__',
 '__sizeof__',
 '__str__',
 '__subclasshook__',
 '__weakref__',
 'on_any',
 'play',
 'playbook',
 'playbook_on_import_for_host',
 'playbook_on_no_hosts_matched',
 'playbook_on_no_hosts_remaining',
 'playbook_on_not_import_for_host',
 'playbook_on_notify',
 'playbook_on_play_start',
 'playbook_on_setup',
 'playbook_on_start',
 'playbook_on_stats',
 'playbook_on_task_start',
 'playbook_on_vars_prompt',
 'runner_on_async_failed',
 'runner_on_async_ok',
 'runner_on_async_poll',
 'runner_on_failed',
 'runner_on_no_hosts',
 'runner_on_ok',
 'runner_on_skipped',
 'runner_on_unreachable',
 'state',
 'task']&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;L&amp;#8217;objet &lt;strong&gt;self&lt;/strong&gt; est une vraie mine d&amp;#8217;or ! A coup de pdb (&lt;code&gt;pp dir(self.task)&lt;/code&gt;, &lt;code&gt;pp dir(self.play)&lt;/code&gt; etc&amp;#8230;&amp;#8203;) on se rend compte que l&amp;#8217;on a accès à une énorme quantité d&amp;#8217;informations sur notre déploiement. Détail de la tâche en cours (nom, rôle associé&amp;#8230;&amp;#8203;), variables, informations sur le playbook&amp;#8230;&amp;#8203; Il ne reste plus qu&amp;#8217;à piocher dans ce qui nous intéresse ! Bien sûr, chaque fonction du plugin callback aura des paramètres différents (même si l&amp;#8217;on retrouve des similarités, comme par exemple entre &lt;strong&gt;runner_on_failed&lt;/strong&gt; et &lt;strong&gt;runner_on_ok&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_playbook_on_start_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;playbook on start&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La méthode &lt;strong&gt;playbook_on_start&lt;/strong&gt; s&amp;#8217;exécute, comme son nom l&amp;#8217;indique, au lancement d&amp;#8217;un playbook. Je voulais initialiser quelques variables à partir d&amp;#8217;extra_vars, j&amp;#8217;ai donc utilisé cette fonction pour le faire. Voici un exemple basique (je considère qu&amp;#8217;une fonction &lt;strong&gt;get_timestamp&lt;/strong&gt; me retourne le timestamp actuel) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def playbook_on_start(self):
        extra_vars = self.playbook.extra_vars
        self.project = extra_vars[&quot;project&quot;]
        self.version = extra_vars[&quot;version&quot;]
        self.environment = extra_vars[&quot;environment&quot;]
        self.start_timestamp = get_timestamp()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ici, je récupère trois variables que je sais présentes en extra_vars. Une variable &lt;strong&gt;projet&lt;/strong&gt; (le projet à déployer), une variable &lt;strong&gt;version&lt;/strong&gt; (la version à déployer), une variable &lt;strong&gt;environment&lt;/strong&gt; (dev, préprod, prod&amp;#8230;&amp;#8203;), et le timestamp du démarrage du déploiement. J&amp;#8217;utilise ces quatres informations pour identifier précisément un déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Bref, il est très facile de pouvoir rendre accessibles certaines variables en enrichissant &lt;strong&gt;self&lt;/strong&gt; lors de l&amp;#8217;exécution des fonctions (l&amp;#8217;objet callback étant toujours le même dans un déploiement). Les autres variables de &lt;strong&gt;self&lt;/strong&gt; sont bien sûr également accessibles si besoin.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_strong_playbook_on_stats_strong&quot;&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;strong&gt;playbook on stats&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Une autre fonction intéressante est &lt;strong&gt;playbook_on_stats&lt;/strong&gt;. Cette fonction est appelée à la fin du déploiement, et contient le résumé du déploiement. Voici par exemple la façon de récupérer le résumé (contenant les tasks unreachable, skipped, changed&amp;#8230;&amp;#8203;) du déploiement par host :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def playbook_on_stats(self, stats):
    hosts = stats.processed.keys()
    for h in hosts:
        summary = stats.summarize(h)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Je récupère personnellement le résumé du déploiement par host, mais aussi un résumé global en additionnant chaque type de task (ok, skipped&amp;#8230;&amp;#8203;) de chaque host.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_la_génération_des_logs_strong&quot;&gt;&lt;strong&gt;La génération des logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne vous reste plus qu&amp;#8217;à compléter les différentes fonctions du plugin callback pour générer des logs au format souhaité. Voici par exemple un exemple tout bête qui envoie (via http en utilisant le package &lt;strong&gt;requests&lt;/strong&gt;) un log à un web server lorsqu&amp;#8217;une task échoue:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def runner_on_failed(self, host, res, ignore_errors=False):
    task = self.task
    result = {
        &quot;timestamp&quot;: get_timestamp(),
        &quot;host&quot;: host,
        &quot;type&quot;: &quot;task_failed&quot;,
        &quot;task&quot;: task.name,
        &quot;role&quot;: task.role_name,
        &quot;result&quot;: json.dumps(res),
        &quot;version&quot;: self.version,  # Cette variable et les suivantes sont initialisées comme précédemment
        &quot;environment&quot;: self.environment,
        &quot;project&quot;: self.project,
        &quot;start_timestamp&quot;: self.start_timestamp
    }
    requests.post(url_web_server, data=json.dumps(result))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On aura ici accès au timestamp, à l&amp;#8217;host, au type d&amp;#8217;évènement (task_failed), au nom de la task, au rôle associé à la task si il existe, au résultat détaillé de l&amp;#8217;exécution de la task, et enfin aux variables définies plus tôt dans &lt;strong&gt;playbook_on_start&lt;/strong&gt; (ces variables sont communes à tous les logs d&amp;#8217;un même déploiement et permettent ensuite d&amp;#8217;identifier les logs pour un déploiement donné).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Il ne reste plus qu&amp;#8217;à écrire un code similaire dans les autres fonctions du plugin callback (en l&amp;#8217;adaptant à chaque fois), et on arrive déjà sans grand effort à collecter des logs très intéressants !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_collectez_et_stockez_vos_logs_strong&quot;&gt;&lt;strong&gt;Collectez et stockez vos logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les possibilités avec les plugins Ansible sont infinies. J&amp;#8217;ai choisi de les envoyer comme dans l&amp;#8217;exemple précédent dans un service web (9 lignes de Python avec Flask + kafka-python). Ce service ne réalise qu&amp;#8217;une seule chose : après réception d&amp;#8217;un log, il l&amp;#8217;envoie dans Kafka. Un Logstash collecte ensuite les logs de Kafka pour les indexer dans Elasticsearch. J&amp;#8217;ai essayé d&amp;#8217;envoyer directement du plugin dans kafka, mais Ansible semble gérer bizarrement le cycle de vie de ses objets, ce qui posait quelques soucis avec kafka-python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_log.png&quot; alt=&quot;logs ansible&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Vous pourriez très bien écrire les logs sur disque, ou les envoyer dans une base de données&amp;#8230;&amp;#8203; Tout dépend de ce que voulez en faire. L&amp;#8217;avantage d&amp;#8217;Elasticsearch est qu&amp;#8217;il est très facile ensuite de réaliser des requêtes complexes/des graphes sur les logs via Kibana/Grafana.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_exploitation_des_logs_strong&quot;&gt;&lt;strong&gt;Exploitation des logs&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Rien qu&amp;#8217;avec les informations fournies précédemment par le plugin callback, je peux :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Réaliser des recherches complexes dans Kibana (exemple : récupérer les tasks en échec pour le rôle HAproxy d&amp;#8217;un projet donné ces 90 derniers jours sur la préprod). De plus, tous les logs sont centralisés au même endroit, ça évite d&amp;#8217;avoir à se balader de jobs Jenkins en jobs Jenkins pour visualiser les logs (qui sont souvent illisibles avec l&amp;#8217;option &lt;strong&gt;-vvvv&lt;/strong&gt; d&amp;#8217;Ansible)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dans Grafana, par projet:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Résumé des derniers déploiements (heure de début, environnement, succès ou non, nombre de tasks skipped/changed/unreachable etc&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Liste des déploiements lancés (ceux en cours sont donc lancés mais non terminés).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de déploiements terminés sur une période de temps&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de déploiements lancés sur une période de temps (permet de comparer avec le nombre de déploiements terminés).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de task pour chaque rôle sur une période de temps en fonction du type de la task (skipped, changed&amp;#8230;&amp;#8203;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nombre de fois qu&amp;#8217;un rôle a été en échec.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rôles les moins fiables (le plus souvent en échec).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Temps d&amp;#8217;exécution de chaque rôle rôle (minimum, maximum, moyenne&amp;#8230;&amp;#8203;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dans Grafana, tous les graphes cités précédemment mais de façon globale (donc sans la notion de projet).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_grafana1.png&quot; alt=&quot;Exemple de graphes avec Grafana&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;span class=&quot;image&quot;&gt;&lt;img src=&quot;/img/ansible_grafana2.png&quot; alt=&quot;Exemple de graphes avec Grafana&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph text-center&quot;&gt;
&lt;p&gt;&lt;em&gt;Ces deux images présentent quelques graphes Grafana (anonymisées) générés via les statistiques récoltées par le plugin. Liens vers les images en tailles réelles &lt;a href=&quot;/img/ansible_grafana1.png&quot;&gt;ici&lt;/a&gt; et &lt;a href=&quot;/img/ansible_grafana2.png)&quot;&gt;ici&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le temps par rôle peut être calculé assez simplement. Lors de l&amp;#8217;exécution d&amp;#8217;une task, on a accès dans le plugin au rôle associé à la task. J&amp;#8217;initialise un dictionnaire où la clé est le nom du rôle, et la valeur un tableau de deux élements. Le premier élément est le timestamp de la première task du rôle. Je mets ensuite à jour le second élément (la date de fin du rôle) à chaque nouvelle task.
J&amp;#8217;envoie ensuite ces statistiques pour chaque rôle (si il n&amp;#8217;y a pas eu de plantage pouvant causer de fausses durées) en fin de déploiement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pensez également à pré-traiter certains logs, comme par exemple les paramètres &lt;strong&gt;res&lt;/strong&gt; des fonctions. Ces paramètres peuvent être trèèèèès longs (des dizaines de milliers de caractères), notamment lors de téléchargements volumineux avec Ansible en mode &lt;strong&gt;-vvvv&lt;/strong&gt;. Je remplace généralement les résultats trop longs par un message de type &lt;strong&gt;résultat trop long&lt;/strong&gt; (ce sont généralement des données inexploitables).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_ansible_2_strong&quot;&gt;&lt;strong&gt;Ansible 2&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le &lt;a href=&quot;https://docs.ansible.com/ansible/porting_guide_2.0.html&quot;&gt;porting guide&lt;/a&gt; d&amp;#8217;Ansible livre quelques informations pour porter les plugins Callback en Ansible 2. Malheureusement, le fonctionnement interne d&amp;#8217;Ansible ayant bougé, il faudra réadapter le code. En vrac :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Les extra_vars ne sont plus accessibles dans &lt;strong&gt;playbook_on_start&lt;/strong&gt; mais seulement à partir de &lt;strong&gt;v2_playbook_on_play_start&lt;/strong&gt;, et d&amp;#8217;une façon un peu différente :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;extra_vars = play.get_variable_manager().extra_vars&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le nom du rôle est accessible dans &lt;strong&gt;v2_playbook_on_task_start&lt;/strong&gt;. Pour garder une certaine compatibilité avec du code Ansible 1.X, vous pouvez faire :&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;if task._role is not None:  # on verifie si c'est un role ou non
    task.role_name = task._role._role_name&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_strong_conclusion_strong&quot;&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Les possibilités du plugin callback sont infinies. Je pense sincèrement qu&amp;#8217;en prenant le temps, il est possible de réaliser de nombreuses statistiques sur les déploiements (ainsi que de l&amp;#8217;alerting, de la corrélation avec d&amp;#8217;autres métriques comme des métriques systèmes&amp;#8230;&amp;#8203;), surtout avec des outils puissants comme Kibana/Grafana. Bref, à creuser !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Wed, 10 Aug 2016 00:00:00 +0200
</pubDate>
</item>
<item>
<guid>
https://mcorbin.fr/posts/2016-04-22-lesspipe/
</guid>
<link>
https://mcorbin.fr/posts/2016-04-22-lesspipe/
</link>
<title>
One day one manpage / Un jour une manpage : lesspipe
</title>
<description>
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;English version &lt;a href=&quot;https://mcorbin.fr/pages/lesspipe-en/&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Le concept de &quot;un jour une manpage&quot; est simple : je choisis une manpage aléatoirement et j&amp;#8217;explore la commande associée.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Aujourd&amp;#8217;hui, c&amp;#8217;est la commande &lt;strong&gt;lesspipe&lt;/strong&gt; qui sera passée à la loupe. Tout d&amp;#8217;abord, regardons ce que raconte un &lt;strong&gt;man lesspipe&lt;/strong&gt; :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;lessfile, lesspipe - &quot;input preprocessor&quot; for  less.
lessfile and lesspipe are programs that can be used to modify the  way  the contents of a file are displayed in less&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Cette commande permet donc de manipuler le contenu d&amp;#8217;un fichier avant de l&amp;#8217;envoyer à &lt;strong&gt;less&lt;/strong&gt;. Pourquoi faire ? Essayez de lancer &lt;strong&gt;less&lt;/strong&gt; sur une image, un .deb ou un .tar.gz&amp;#8230;&amp;#8203; Vous aurez quelques soucis. Lesspipe permet donc (entre autre) d&amp;#8217;enrichir less pour explorer de nouveaux types de fichier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour l&amp;#8217;activer, il suffit de lancer (ou de rajouter dans son .bashrc ou équivalent) :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;eval &quot;$(lesspipe)&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_comment_ça_marche&quot;&gt;Comment ça marche ?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Lançons juste &lt;strong&gt;lesspipe&lt;/strong&gt; dans un terminal. On obtient :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LESSOPEN=&quot;| /usr/bin/lesspipe %s&quot;;
export LESSCLOSE=&quot;/usr/bin/lesspipe %s %s&quot;;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Deux variables sont donc définies: LESSOPEN et LESSCLOSE.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;La man page de &lt;strong&gt;less&lt;/strong&gt; indique, dans la partie &lt;strong&gt;INPUT PREPROCESSOR&lt;/strong&gt;, que la variable LESSOPEN sert à activer un préprocesseur pour less. Ce préprocesseur reçoit en paramètre le nom du fichier envoyé à less, crée un fichier temporaire et renvoie en sortie le nom de ce fichier temporaire. Le nom du fichier temporaire sera ensuite utilisé par less.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Le préprocesseur peut également envoyer directement à &lt;strong&gt;less&lt;/strong&gt; des informations sans créer de fichiers temporaires. Dans ce cas là, tout ce qui sera envoyé sur la sortie standard du script appelé par LESSOPEN sera transmis à &lt;strong&gt;less&lt;/strong&gt;.
La man page de &lt;strong&gt;less&lt;/strong&gt; indique à ce sujet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It is also possible to set up an input preprocessor to pipe the file  data  directly to less, rather than putting the data into a replacement file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;[&amp;#8230;&amp;#8203;] To use an input pipe, make the first character in the LESSOPEN environment variable a vertical bar (|) to  signify  that  the  input  pre-processor is an input pipe.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On remarque que lesspipe ne créera pas de fichiers temporaires (le script commence par un &lt;strong&gt;|&lt;/strong&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans notre cas, quand &lt;strong&gt;less&lt;/strong&gt; sera appelée, le script &lt;code&gt;/usr/bin/lesspipe&lt;/code&gt; sera appelé avec comme paramètre le nom du fichier sur lequel less est appelé.
Essayons d&amp;#8217;appeler &lt;code&gt;/usr/bin/lesspipe&lt;/code&gt; manuellement, par exemple sur une image :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ lesspipe myimage.png
myimage.png PNG 254x29 1920x1080+12+134 8-bit sRGB 3.69KB 0.000u 0:00.000&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On voit que lesspipe retourne certaines informations sur l&amp;#8217;image. Ces informations seront passées à &lt;strong&gt;less&lt;/strong&gt; et affichées.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pour LESSCLOSE, voici une partie intéressante de la man page de less :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
When less closes a file opened in such a way, it will call another program, called  the  input  postprocessor,  which  may perform any desired clean-up action.
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;LESSCLOSE sert donc à faire le nettoyage. Le script référencé par LESSCLOSE reçoit deux paramètres : le nom du fichier original (sur lequel on a appelé &lt;strong&gt;less&lt;/strong&gt;), et le nom du fichier temporaire (généré par le script LESSOPEN).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On peut maintenant utiliser &lt;strong&gt;less&lt;/strong&gt; sur de nombreux types de fichiers. Par exemple, less sur un .zip affichera les fichiers contenus dans cette archive. Même chose pour de nombreux autres formats comme tar, deb, rpm, iso, pdf&amp;#8230;&amp;#8203; Et même des images !&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_source_highlight&quot;&gt;source-highlight&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Dans le même genre, source-highlight permet de rajouter de la coloration syntaxique à less. Pour l&amp;#8217;installer (sur Debian), c&amp;#8217;est simple :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt-get install source-highlight&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;On se retrouve ensuite avec un script dans &lt;strong&gt;/usr/share/source-highlight/src-hilite-lesspipe.sh&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;De la même façon que pour lesspipe, utilisons ce script comme préprocesseur :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export LESSOPEN=&quot;| /usr/share/source-highlight/src-hilite-lesspipe.sh %s&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;less -R [votre fichier]&lt;/strong&gt; vous ouvrira le fichier avec la coloration syntaxique.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;En conclusion, grâce aux deux variables d&amp;#8217;environnements (LESSOPEN and LESSCLOSE) vues précédemment, vous pouvez même facilement écrire vos propres scripts pour enrichir less.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
<pubDate>
Fri, 22 Apr 2016 00:00:00 +0200
</pubDate>
</item>
</channel>
</rss>
